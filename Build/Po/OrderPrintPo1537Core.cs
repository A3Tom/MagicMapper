using System;
using System.Collections.Generic;
using Firefly.Box;
using ENV.Data;
using ENV;
using Firefly.Box.UI.Advanced;
using System.IO;
using System.Drawing;
using System.Drawing.Imaging;

namespace MandCo.Mos.MOSReports
{
    
    /// <summary>Order Print (po1537)(P#400)</summary>
    // Last change before Migration: 13/03/2013 14:54:51
    public class OrderPrintPo1537Core : OrderPrintPo1537 
    {
        
        #region Models
        
        /// <summary>Franchisee Order Header</summary>
        readonly Models.FranchiseeOrderHeader FranchiseeOrderHeader = new Models.FranchiseeOrderHeader { KeepCacheAliveAfterExit = true, ReadOnly = true };
        
        /// <summary>Franchisee Lookup</summary>
        readonly Models.FranchiseeLookup FranchiseeLookup = new Models.FranchiseeLookup { KeepCacheAliveAfterExit = true, ReadOnly = true };
        #endregion
        
        #region Parameters
        
        /// <summary>p:Order</summary>
        readonly NumberColumn pOrder = new NumberColumn("p:Order", "6A")
        {
        	IsParameter = true
        };
        
        /// <summary>p:Report Type</summary>
        readonly TextColumn pReportType = new TextColumn("p:Report Type", "UA")
        {
        	IsParameter = true
        };
        
        /// <summary>p:dept copy</summary>
        readonly BoolColumn pDeptCopy = new BoolColumn("p:dept copy")
        {
        	IsParameter = true
        };
        
        /// <summary>p:supplier copy</summary>
        readonly BoolColumn pSupplierCopy = new BoolColumn("p:supplier copy")
        {
        	IsParameter = true
        };
        
        /// <summary>p:order version number</summary>
        internal readonly NumberColumn pOrderVersionNumber = new NumberColumn("p:order version number", "3")
        {
        	IsParameter = true
        };
        
        /// <summary>p:franchise order</summary>
        readonly BoolColumn pFranchiseOrder = new BoolColumn("p:franchise order")
        {
        	IsParameter = true
        };
        
        /// <summary>p:Franchise Order Number</summary>
        readonly NumberColumn pFranchiseOrderNumber = new NumberColumn("p:Franchise Order Number", "6A")
        {
        	IsParameter = true
        };
        
        /// <summary>p:Cancelled Order</summary>
        readonly BoolColumn pCancelledOrder = new BoolColumn("p:Cancelled Order")
        {
        	IsParameter = true
        };
        
        /// <summary>p:Commitment Order</summary>
        internal readonly BoolColumn pCommitmentOrder = new BoolColumn("p:Commitment Order")
        {
        	IsParameter = true
        };
        
        /// <summary>p:Create as PDF?</summary>
        readonly BoolColumn pCreateAsPDF = new BoolColumn("p:Create as PDF?")
        {
        	IsParameter = true
        };
        #endregion
        
        #region Columns
        
        /// <summary>v:Copy For</summary>
        internal readonly TextColumn vCopyFor = new TextColumn("v:Copy For", "15");
        #endregion

        public List<string> tempImages = new List<string>(); 

        /// <summary>Order Print (po1537)(P#400)</summary>
        public OrderPrintPo1537Core()
        {
            Title = "Order Print (po1537)";
            InitializeDataView();
        }
        void InitializeDataView()
        {
            Relations.Add(FranchiseeOrderHeader, 
            		FranchiseeOrderHeader.FRANCHISEE_ORDER_NUMBER.IsEqualTo(pFranchiseOrderNumber), 
            	FranchiseeOrderHeader.SortByMOS_FRA_ORDERS_X1);
            
            Relations.Add(FranchiseeLookup, 
            		FranchiseeLookup.FRANCHISEE_ID.IsEqualTo(FranchiseeOrderHeader.FRANCHISEE_ID), 
            	FranchiseeLookup.SortByMOS_FRA_FRANCHISEE_LOOKUP_X1);
            
            
            #region Columns
            
            // this task created for multiple copy control in next task
            
            Columns.Add(pOrder);
            Columns.Add(pReportType);
            Columns.Add(pDeptCopy);
            Columns.Add(pSupplierCopy);
            Columns.Add(pOrderVersionNumber);
            Columns.Add(pFranchiseOrder);
            Columns.Add(pFranchiseOrderNumber);
            Columns.Add(pCancelledOrder);
            Columns.Add(pCommitmentOrder);
            Columns.Add(pCreateAsPDF);
            
            Columns.Add(vCopyFor);
            
            Columns.Add(FranchiseeOrderHeader.FRANCHISEE_ORDER_NUMBER);
            Columns.Add(FranchiseeOrderHeader.FRANCHISEE_ID);
            Columns.Add(FranchiseeOrderHeader.TERRITORY_ID);
            
            Columns.Add(FranchiseeLookup.FRANCHISEE_ID);
            Columns.Add(FranchiseeLookup.FRANCHISEE_NAME);
            Columns.Add(FranchiseeLookup.FRANCHISEE_ADDRESS_1);
            Columns.Add(FranchiseeLookup.FRANCHISEE_ADDRESS_2);
            Columns.Add(FranchiseeLookup.FRANCHISEE_ADDRESS_3);
            Columns.Add(FranchiseeLookup.FRANCHISEE_ADDRESS_4);
            Columns.Add(FranchiseeLookup.FRANCHISEE_ZIPPOST_CODE);
            Columns.Add(FranchiseeLookup.FRANCHISEE_STATUS);
            
            // PLEASE BE AWARE ANY CHANGE TO THIS PROGRAM WILL NEED DONE TO
            // PO2035 AND MAY NEED DONE TO PO2074 AND PO2075
            
            // IF ITS A PROFORMA CHANGE THIS MAY ALSO NEED DONE TO PO2083
            #endregion
        }
        
        /// <summary>Order Print (po1537)</summary>
        #region Parameters Original Names
        /// <param name="ppOrder">p:Order</param>
        /// <param name="ppReportType">p:Report Type</param>
        /// <param name="ppDeptCopy">p:dept copy</param>
        /// <param name="ppSupplierCopy">p:supplier copy</param>
        /// <param name="ppOrderVersionNumber">p:order version number</param>
        /// <param name="ppFranchiseOrder">p:franchise order</param>
        /// <param name="ppFranchiseOrderNumber">p:Franchise Order Number</param>
        /// <param name="ppCancelledOrder">p:Cancelled Order</param>
        /// <param name="ppCommitmentOrder">p:Commitment Order</param>
        /// <param name="ppCreateAsPDF">p:Create as PDF?</param>
        #endregion
        public override void Run(NumberParameter ppOrder, TextParameter ppReportType, BoolParameter ppDeptCopy = null, BoolParameter ppSupplierCopy = null, NumberParameter ppOrderVersionNumber = null, BoolParameter ppFranchiseOrder = null, NumberParameter ppFranchiseOrderNumber = null, BoolParameter ppCancelledOrder = null, BoolParameter ppCommitmentOrder = null, BoolParameter ppCreateAsPDF = null)
        {
            #region Bind Parameters
            
            BindParameter(pOrder, ppOrder);
            BindParameter(pReportType, ppReportType);
            BindParameter(pDeptCopy, ppDeptCopy);
            BindParameter(pSupplierCopy, ppSupplierCopy);
            BindParameter(pOrderVersionNumber, ppOrderVersionNumber);
            BindParameter(pFranchiseOrder, ppFranchiseOrder);
            BindParameter(pFranchiseOrderNumber, ppFranchiseOrderNumber);
            BindParameter(pCancelledOrder, ppCancelledOrder);
            BindParameter(pCommitmentOrder, ppCommitmentOrder);
            BindParameter(pCreateAsPDF, ppCreateAsPDF);
            #endregion
            Execute();
        }
        protected override void OnLoad()
        {
            Exit(ExitTiming.AfterRow);
            KeepChildRelationCacheAlive = true;
        }
        protected override void OnEnd()
        {
            if(pReportType == "O")
            {
                // department copy
                if(pDeptCopy)
                {
                    vCopyFor.Value = "DEPT COPY";
                    Cached<MainControl>().Run();
                }
                
                // Supplier copy
                if(pSupplierCopy)
                {
                    vCopyFor.Value = "SUPPLIER COPY";
                    Cached<MainControl>().Run();
                    // Archive copy of Order PDF if Official Order and created as a PDF
                    if(pCreateAsPDF)
                    {
                        Cached<ArchiveOrderPDF>().Run();
                    }
                }
                
            }
            
            // Proforma
            if(pReportType == "P")
            {
                vCopyFor.Value = "DEPT COPY";
                Cached<MainControl>().Run();
            }
            
            if(pReportType == "L")
            {
                vCopyFor.Value = "DEPT COPY";
                Cached<MainControl>().Run();
            }

            DeleteTempImages();

        }

        private void DeleteTempImages()
        {
            foreach (var image in tempImages)
            {
                File.Delete(image);
            }
        }
        
        
        
        /// <summary>Main Control(P#400.1)</summary>
        // Last change before Migration: 13/03/2013 14:54:51
        internal class MainControl : Mos.BusinessProcessBase 
        {
            
            #region Models
            
            /// <summary>Orders</summary>
            internal readonly Models.Orders Orders = new Models.Orders { Cached = false, ReadOnly = true };
            
            /// <summary>Territory Lookup</summary>
            internal readonly Models.TerritoryLookup TerritoryLookup = new Models.TerritoryLookup { ReadOnly = true };
            
            /// <summary>Branch Details</summary>
            readonly Models.BranchDetails BranchDetails = new Models.BranchDetails { ReadOnly = true };
            
            /// <summary>TempPackGrid</summary>
            readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
            
            /// <summary>Packs Make Up</summary>
            readonly Models.PacksMakeUp PacksMakeUp = new Models.PacksMakeUp { ReadOnly = true };
            #endregion
            
            #region Columns
            
            /// <summary>v:Order Number</summary>
            readonly NumberColumn vOrderNumber = new NumberColumn("v:Order Number", "6A");
            
            /// <summary>v:Report Type</summary>
            readonly TextColumn vReportType = new TextColumn("v:Report Type", "UA");
            
            /// <summary>v:Report Part</summary>
            readonly NumberColumn vReportPart = new NumberColumn("v:Report Part", "1");
            
            /// <summary>v:Prev Order Found</summary>
            readonly BoolColumn vPrevOrderFound = new BoolColumn("v:Prev Order Found");
            
            /// <summary>v:Cost Diff Tween Lots Found</summary>
            readonly BoolColumn vCostDiffTweenLotsFound = new BoolColumn("v:Cost Diff Tween Lots Found");
            #endregion

            #region Streams
            
            /// <summary>Order Report</summary>
            ENV.Printing.PrinterWriter _ioOrderReport;
            #endregion
            
            #region Printing Layouts
            Printing.OrderPrintPo1537MainControl _layout;
            #endregion
            
            internal OrderPrintPo1537Core _parent;
            
            
            /// <summary>Main Control(P#400.1)</summary>
            public MainControl(OrderPrintPo1537Core parent)
            {
                _parent = parent;
                Title = "Main Control";
                Entities.Add(TempPackGrid);
                Entities.Add(PacksMakeUp);
                InitializeDataView();
                _layout = new Printing.OrderPrintPo1537MainControl(this);
            }
            void InitializeDataView()
            {
                Relations.Add(Orders, 
                		Orders.ORDER_NUMBER.IsEqualTo(vOrderNumber), 
                	Orders.SortBySHP_ORDERS_X1);
                
                Relations.Add(TerritoryLookup, 
                		TerritoryLookup.TERRITORY_ID.IsEqualTo(_parent.FranchiseeOrderHeader.TERRITORY_ID), 
                	TerritoryLookup.SortByMOS_FRA_TERRITORY_LOOKUP_X1);
                
                Relations.Add(BranchDetails, 
                		BranchDetails.BRANCH_NUMBER.IsEqualTo(TerritoryLookup.BRANCH_NUMBER), 
                	BranchDetails.SortByREF_BRANCH_X1);
                
                
                #region Columns
                
                // these two virtuals were previously the params received from the
                // calling program until two copies for Official print was requested.
                // the 2 copies is controlled by i/o file properties which would
                // not recognise the virtual at this level
                // a new parent task has been added to collect the params
                // both of which update these in task prefix here and one is used in
                // i/o properties for copies control
                Columns.Add(vOrderNumber);
                Columns.Add(vReportType);
                
                Columns.Add(vReportPart);
                
                Columns.Add(vPrevOrderFound);
                
                Columns.Add(vCostDiffTweenLotsFound);
                
                
                Columns.Add(Orders.ORDER_NUMBER);
                Columns.Add(Orders.PRODUCT_NUMBER);
                Columns.Add(Orders.SUPPLIER_CODE);
                Columns.Add(Orders.LAST_UPDATE_DATE);
                Columns.Add(Orders.CREATE_DATE);
                
                Columns.Add(TerritoryLookup.TERRITORY_ID);
                Columns.Add(TerritoryLookup.BRANCH_NUMBER);
                
                Columns.Add(BranchDetails.BRANCH_NUMBER);
                Columns.Add(BranchDetails.BRANCH_ADDRESS_1);
                Columns.Add(BranchDetails.BRANCH_ADDRESS_2);
                Columns.Add(BranchDetails.BRANCH_ADDRESS_3);
                Columns.Add(BranchDetails.BRANCH_ADDRESS_4);
                #endregion
            }
            
            /// <summary>Main Control</summary>
            internal void Run()
            {
                Execute();
            }
            protected override void OnLoad()
            {
                Exit(ExitTiming.AfterRow, () => u.If(vReportType == "P", vReportPart == 1 || _parent.pCancelledOrder || _parent.pCommitmentOrder, u.If(vReportType == "L", vReportPart == 2 || _parent.pCancelledOrder || _parent.pCommitmentOrder, vReportPart == 3 || _parent.pCancelledOrder || _parent.pCommitmentOrder)));
                TransactionScope = TransactionScopes.Task;
                
                _ioOrderReport = new ENV.Printing.PrinterWriter(u.If(_parent.pCreateAsPDF, @"C:\temp\" + u.Str(_parent.pOrder, "6"), ""))
                			{
                				Name = "Order Report",
                				PrinterName = Mos.Printing.Printers.Printer1.PrinterName,
                				Pdf = _parent.pCreateAsPDF,
                				PrintPreview = u.Not(_parent.pCreateAsPDF)
                			};
                Streams.Add(_ioOrderReport);
                _layout.Reset();
            }
            protected override void OnStart()
            {
                vOrderNumber.Value = _parent.pOrder;
                vReportType.Value = _parent.pReportType;
            }
            protected override void OnEnterRow()
            {
                
                
                
                // page. Not defined as a Header as they are ignored when using 'Top'
                _ioOrderReport.NewPage();
                _layout.ReportHeader.WriteTo(_ioOrderReport);
                if(_parent.pCancelledOrder)
                {
                    _layout.CancelledOrder.WriteTo(_ioOrderReport);
                }
                if(Exp_23())
                {
                    _layout.FranchiseInfo.WriteTo(_ioOrderReport);
                }
            }
            protected override void OnLeaveRow()
            {
                if(u.Not(_parent.pCancelledOrder))
                {
                    vReportPart.Value = Counter;
                    
                    // check if size cost differs between lots and if so call
                    // prog to gather records by lot for colour size print in part 1
                    vCostDiffTweenLotsFound.Value = false;
                    Cached<CheckForCostDiffs>().Run();
                    if(vCostDiffTweenLotsFound)
                    {
                        SubPrograms.SubColsSizesBtLotPo1617.Create().Run(
                        				vOrderNumber, 
                        				_parent.pFranchiseOrder, 
                        				_parent.pFranchiseOrderNumber);
                    }
                    
                    // Create Reocrds in Temp Table Pack Grid to determin each Size Colour
                    // combination for a given Product Number on the Printed Order
                    // this is now done in Size Rel Posit seq 26 July 01
                    if(vReportPart == 1)
                    {
                        Cached<SubPrograms.SubRollupColsSizesPo1615>().Run(
                        				vOrderNumber, 
                        				_parent.pFranchiseOrder, 
                        				_parent.pFranchiseOrderNumber);
                    }
                    // check for prev order to determine if curr order is new or repeat
                    Cached<CheckForPrevOrd>().Run();

                    Cached<OrderDetails>().Run();                        
                }
            }
            protected override void OnEnd()
            {
                _layout.ReportFooter.WriteTo(_ioOrderReport);
            }
            
            #region Expressions
            internal Bool Exp_3()
            {
                return _parent.pReportType == "O" && u.Left(Orders.SUPPLIER_CODE, 3) == "014";
            }
            internal Bool Exp_9()
            {
                return vReportType == "L";
            }
            internal Time Exp_13()
            {
                return Time.Now;
            }
            internal Date Exp_14()
            {
                return Date.Now;
            }
            internal Number Exp_15()
            {
                return _ioOrderReport.Page;
            }
            internal Bool Exp_17()
            {
                return vReportType == "P";
            }
            internal Bool Exp_18()
            {
                return vReportType == "O" && u.Not(_parent.pCommitmentOrder);
            }
            internal Bool Exp_19()
            {
                return vReportType == "O" && _parent.pCommitmentOrder;
            }
            internal Bool Exp_20()
            {
                return vReportType == "R";
            }
            internal Text Exp_21()
            {
                return u.If(_parent.pReportType == "P", "End of Proforma", "End of Order");
            }
            internal Bool Exp_23()
            {
                return _parent.pFranchiseOrder && u.Not(_parent.pCancelledOrder) && u.Not(_parent.pCommitmentOrder);
            }
            internal Text Exp_27()
            {
                return u.Trim(_parent.FranchiseeLookup.FRANCHISEE_NAME);
            }
            internal Text Exp_28()
            {
                return u.Str(_parent.pOrder, "6") + "-" + u.If(_parent.pFranchiseOrder, u.Str(_parent.FranchiseeOrderHeader.TERRITORY_ID, "3P0"), "000");
            }
            internal Bool Exp_29()
            {
                return _parent.pCommitmentOrder && _parent.pReportType == "P";
            }
            #endregion
            
            
            
            /// <summary>Order Details(P#400.1.1)</summary>
            // Last change before Migration: 07/02/2013 11:23:56
            internal class OrderDetails : Mos.BusinessProcessBase 
            {
                
                #region Models
                
                /// <summary>Orders</summary>
                internal readonly Models.Orders Orders = new Models.Orders { ReadOnly = true };
                
                /// <summary>Linked Orders</summary>
                readonly Models.LinkedOrders LinkedOrders = new Models.LinkedOrders { ReadOnly = true };
                
                /// <summary>Supplier</summary>
                readonly Models.Supplier Supplier = new Models.Supplier { Cached = false, ReadOnly = true };
                
                /// <summary>Order Reproc Reasons</summary>
                readonly Models.OrderReprocReasons OrderReprocReasons = new Models.OrderReprocReasons { ReadOnly = true };
                
                /// <summary>Orders</summary>
                readonly Models.Orders Orders1 = new Models.Orders { Cached = false, ReadOnly = true };
                
                /// <summary>Delivery Terms</summary>
                readonly Models.DeliveryTerms DeliveryTerms = new Models.DeliveryTerms { ReadOnly = true };
                
                /// <summary>Currency Codes</summary>
                internal readonly Models.CurrencyCodes CurrencyCodes = new Models.CurrencyCodes { ReadOnly = true };
                
                /// <summary>Country</summary>
                internal readonly Models.Country Country = new Models.Country { ReadOnly = true };
                
                /// <summary>Supplier</summary>
                internal readonly Models.Supplier Supplier1 = new Models.Supplier { Cached = false, ReadOnly = true };
                
                /// <summary>Supplier</summary>
                internal readonly Models.Supplier Supplier2 = new Models.Supplier { Cached = false, ReadOnly = true };
                
                /// <summary>AnalCd By Country</summary>
                readonly Models.AnalCdByCountry AnalCdByCountry = new Models.AnalCdByCountry { ReadOnly = true };
                
                /// <summary>Lot</summary>
                readonly Models.Lot Lot = new Models.Lot { ReadOnly = true };
                
                /// <summary>Product</summary>
                internal readonly Models.Product Product = new Models.Product { ReadOnly = true };
                
                /// <summary>Products By Style</summary>
                readonly Models.ProductsByStyle ProductsByStyle = new Models.ProductsByStyle { ReadOnly = true };
                
                /// <summary>Style Specification</summary>
                internal readonly Models.StyleSpecification StyleSpecification = new Models.StyleSpecification { ReadOnly = true };
                
                /// <summary>Style Construction</summary>
                internal readonly Models.StyleConstruction StyleConstruction1 = new Models.StyleConstruction { ReadOnly = true };
                
                /// <summary>DSS Departments</summary>
                readonly Models.DSSDepartments DSSDepartments = new Models.DSSDepartments { ReadOnly = true };
                
                /// <summary>DSS Sub Departments</summary>
                readonly Models.DSSSubDepartments DSSSubDepartments = new Models.DSSSubDepartments { ReadOnly = true };
                
                /// <summary>DSS Sections</summary>
                readonly Models.DSSSections DSSSections = new Models.DSSSections { ReadOnly = true };
                
                /// <summary>DSS Ranges</summary>
                readonly Models.DSSRanges DSSRanges = new Models.DSSRanges { ReadOnly = true };
                
                /// <summary>DSS Sub Ranges</summary>
                readonly Models.DSSSubRanges DSSSubRanges = new Models.DSSSubRanges { ReadOnly = true };
                
                /// <summary>Product</summary>
                readonly Models.Product Product1 = new Models.Product { ReadOnly = true };
                
                /// <summary>Product</summary>
                readonly Models.Product Product2 = new Models.Product { ReadOnly = true };
                
                /// <summary>MOS_URGENT_ORDER_REASONS</summary>
                internal readonly Models.MOS_URGENT_ORDER_REASONS MOS_URGENT_ORDER_REASONS = new Models.MOS_URGENT_ORDER_REASONS { ReadOnly = true };
                
                /// <summary>Supplier Factory List</summary>
                readonly Models.SupplierFactoryList SupplierFactoryList = new Models.SupplierFactoryList { ReadOnly = true };
                
                /// <summary>Style Labels</summary>
                readonly Models.StyleLabels StyleLabels = new Models.StyleLabels { ReadOnly = true };
                
                /// <summary>MOS_FRA_ORDER_PACKS</summary>
                readonly Models.MOS_FRA_ORDER_PACKS MOS_FRA_ORDER_PACKS = new Models.MOS_FRA_ORDER_PACKS { ReadOnly = true };
                #endregion
                
                #region Columns
                
                /// <summary>v:Style is Set or Multi</summary>
                readonly BoolColumn vStyleIsSetOrMulti = new BoolColumn("v:Style is Set or Multi");
                
                /// <summary>v:UK/Foreign Supplier</summary>
                readonly TextColumn vUKForeignSupplier = new TextColumn("v:UK/Foreign Supplier", "3");
                
                /// <summary>v:char return</summary>
                readonly TextColumn vCharReturn = new TextColumn("v:char return", "4");
                
                /// <summary>v:formatted suppliers address</summary>
                internal readonly TextColumn vFormattedSuppliersAddress = new TextColumn("v:formatted suppliers address", "1000");
                
                /// <summary>v:formatted factory address</summary>
                internal readonly TextColumn vFormattedFactoryAddress = new TextColumn("v:formatted factory address", "1000");
                
                /// <summary>v:EC Supplier Found</summary>
                readonly BoolColumn vECSupplierFound = new BoolColumn("v:EC Supplier Found");
                
                /// <summary>v:Style Image Path</summary>
                readonly TextColumn vStyleImagePath = new TextColumn("v:Style Image Path", "30A");
                
                /// <summary>v:Product Hierarchy Description</summary>
                internal readonly TextColumn vProductHierarchyDescription = new TextColumn("v:Product Hierarchy Description", "150");
                
                /// <summary>v:Prod is Sect 4N4</summary>
                readonly BoolColumn vProdIsSect4N4 = new BoolColumn("v:Prod is Sect 4N4");
                
                /// <summary>v:Prod is Sect 4N7</summary>
                readonly BoolColumn vProdIsSect4N7 = new BoolColumn("v:Prod is Sect 4N7");
                
                /// <summary>v:Wash Care Label</summary>
                internal readonly TextColumn vWashCareLabel = new TextColumn("v:Wash Care Label", "100A");
                
                /// <summary>v:Iron Care Label</summary>
                internal readonly TextColumn vIronCareLabel = new TextColumn("v:Iron Care Label", "100A");
                
                /// <summary>v:Special Clean Care Label</summary>
                internal readonly TextColumn vSpecialCleanCareLabel = new TextColumn("v:Special Clean Care Label", "100A");
                
                /// <summary>v:Bleach Care Label</summary>
                internal readonly TextColumn vBleachCareLabel = new TextColumn("v:Bleach Care Label", "100A");
                
                /// <summary>v:Drying Care Label</summary>
                internal readonly TextColumn vDryingCareLabel = new TextColumn("v:Drying Care Label", "100A");
                
                /// <summary>v:Other Care Description</summary>
                internal readonly TextColumn vOtherCareDescription = new TextColumn("v:Other Care Description", "100A");
                
                /// <summary>v:Certificate String 1</summary>
                internal readonly TextColumn vCertificateString1 = new TextColumn("v:Certificate String 1", "20A");
                
                /// <summary>v:Certificate String 2</summary>
                internal readonly TextColumn vCertificateString2 = new TextColumn("v:Certificate String 2", "30A");
                
                /// <summary>v:MFA Cats</summary>
                internal readonly TextColumn vMFACats = new TextColumn("v:MFA Cats", "20");
                
                /// <summary>v:HS Codes</summary>
                internal readonly TextColumn vHSCodes = new TextColumn("v:HS Codes", "28");
                
                /// <summary>v:Style Construction String</summary>
                internal readonly TextColumn vStyleConstructionString = new TextColumn("v:Style Construction String", "30A");
                
                /// <summary>RC:franchise label exists</summary>
                readonly BoolColumn RCFranchiseLabelExists = new BoolColumn("RC:franchise label exists");
                
                /// <summary>RC:franchise order exists</summary>
                readonly BoolColumn RCFranchiseOrderExists = new BoolColumn("RC:franchise order exists");
                
                /// <summary>v:Multiple Packing Methods</summary>
                readonly BoolColumn vMultiplePackingMethods = new BoolColumn("v:Multiple Packing Methods");
                #endregion
                
                #region Printing Layouts
                Printing.OrderPrintPo1537OrderDetails _layout;
                #endregion
                
                internal MainControl _parent;
                
                
                /// <summary>Order Details(P#400.1.1)</summary>
                public OrderDetails(MainControl parent)
                {
                    _parent = parent;
                    Title = "Order Details";
                    InitializeDataView();
                    _layout = new Printing.OrderPrintPo1537OrderDetails(this);
                    _layout.Layouts.Add(_parent._layout);
                }
                void InitializeDataView()
                {
                    From = Orders;
                    Relations.Add(LinkedOrders, 
                    		LinkedOrders.SecondaryOrder.IsEqualTo(_parent.vOrderNumber), 
                    	LinkedOrders.SortBySHP_Linked_Orders_X2);
                    
                    Relations.Add(Supplier, 
                    		Supplier.SUPPLIER_ACCOUNT.IsEqualTo(LinkedOrders.SupplierAccount), 
                    	Supplier.SortByREF_SUPPLIER_X1);
                    
                    Relations.Add(OrderReprocReasons, 
                    		OrderReprocReasons.ReprocCode.IsEqualTo(LinkedOrders.ReprocCode).And(
                    		OrderReprocReasons.ReprocSeq.IsEqualTo(LinkedOrders.ReprocSeq)).And(
                    		OrderReprocReasons.SupplierID.IsEqualTo(Supplier.SUPPLIER_IDENTIFIER)), 
                    	OrderReprocReasons.SortBySHP_Order_Reproc_Reasons_X1);
                    
                    Relations.Add(Orders1, 
                    		Orders1.ORDER_NUMBER.IsEqualTo(LinkedOrders.PrimaryOrder), 
                    	Orders1.SortBySHP_ORDERS_X1);
                    
                    Relations.Add(DeliveryTerms, 
                    		DeliveryTerms.TermsOfDelyCode.IsEqualTo(() => u.If(vUKForeignSupplier == "014", Orders.TERMS_OF_DELIVERY, "FD  ")), 
                    	DeliveryTerms.SortBySHP_Delivery_Terms_X1);
                    
                    Relations.Add(CurrencyCodes, 
                    		CurrencyCodes.CurrencyCode.IsEqualTo(Orders.ORDER_CURRENCY), 
                    	CurrencyCodes.SortBySHP_Currencies_X1);
                    
                    Relations.Add(Country, 
                    		Country.CountryCode.IsEqualTo(Orders.COUNTRY_OF_MANUFACTURE), 
                    	Country.SortBySHP_Countries_X1);
                    
                    Relations.Add(Supplier1, 
                    		Supplier1.SUPPLIER_ACCOUNT.IsEqualTo(Orders.AGENT_CODE), 
                    	Supplier1.SortByREF_SUPPLIER_X1);
                    
                    Relations.Add(Supplier2, 
                    		Supplier2.SUPPLIER_ACCOUNT.IsEqualTo(Orders.SUPPLIER_CODE), 
                    	Supplier2.SortByREF_SUPPLIER_X1);
                    
                    Relations.Add(AnalCdByCountry, 
                    		AnalCdByCountry.CountryCode.IsEqualTo(Supplier2.COUNTRY_CODE).And(
                    		AnalCdByCountry.AnalysisCode.IsEqualTo("EC")), 
                    	AnalCdByCountry.SortBySHP_Anal_Codes_By_Ctry_X2);
                    
                    Relations.Add(Lot, 
                    		Lot.ORDER_NUMBER.IsEqualTo(_parent.vOrderNumber), 
                    	Lot.SortBySHP_LOTS_X1);
                    
                    Relations.Add(Product, 
                    		Product.ProductNumber.IsEqualTo(Orders.PRODUCT_NUMBER), 
                    	Product.SortByREF_Product_X1);
                    
                    Relations.Add(ProductsByStyle, 
                    		ProductsByStyle.ProductNumber.IsEqualTo(Orders.PRODUCT_NUMBER), 
                    	ProductsByStyle.SortBySHP_Products_By_Style_X2);
                    
                    Relations.Add(StyleSpecification, 
                    		StyleSpecification.STYLE_CODE.IsEqualTo(ProductsByStyle.StyleCode), 
                    	StyleSpecification.SortBySHP_STYLE_SPECIFICATION_X1);
                    
                    Relations.Add(StyleConstruction1, 
                    		StyleConstruction1.StyleCode.IsEqualTo(ProductsByStyle.StyleCode), 
                    	StyleConstruction1.SortBySHP_Style_Construction_X1);
                    
                    Relations.Add(DSSDepartments, 
                    		DSSDepartments.DSS_DEPARTMENT_CODE.IsEqualTo(StyleSpecification.DSS_DEPARTMENT_CODE), 
                    	DSSDepartments.SortByREF_DEPARTMENTS_X1);
                    
                    Relations.Add(DSSSubDepartments, 
                    		DSSSubDepartments.DSS_DEPARTMENT_CODE.IsEqualTo(StyleSpecification.DSS_DEPARTMENT_CODE).And(
                    		DSSSubDepartments.DSS_SUB_DEPARTMENT_CODE.IsEqualTo(StyleSpecification.DSS_SUB_DEPT_CODE)), 
                    	DSSSubDepartments.SortByREF_SUB_DEPARTMENTS_X1);
                    
                    Relations.Add(DSSSections, 
                    		DSSSections.DSS_DEPARTMENT_CODE.IsEqualTo(StyleSpecification.DSS_DEPARTMENT_CODE).And(
                    		DSSSections.DSS_SUB_DEPARTMENT_CODE.IsEqualTo(StyleSpecification.DSS_SUB_DEPT_CODE)).And(
                    		DSSSections.DSS_SECTION_CODE.IsEqualTo(StyleSpecification.DSS_SECTION_CODE)), 
                    	DSSSections.SortByREF_SECTIONS_X1);
                    
                    Relations.Add(DSSRanges, 
                    		DSSRanges.DSS_DEPARTMENT_CODE.IsEqualTo(StyleSpecification.DSS_DEPARTMENT_CODE).And(
                    		DSSRanges.DSS_SUB_DEPARTMENT_CODE.IsEqualTo(StyleSpecification.DSS_SUB_DEPT_CODE)).And(
                    		DSSRanges.DSS_SECTION_CODE.IsEqualTo(StyleSpecification.DSS_SECTION_CODE)).And(
                    		DSSRanges.DSS_RANGE_CODE.IsEqualTo(StyleSpecification.DSS_RANGE_CODE)), 
                    	DSSRanges.SortByREF_RANGES_X1);
                    
                    Relations.Add(DSSSubRanges, 
                    		DSSSubRanges.DSS_DEPARTMENT_CODE.IsEqualTo(StyleSpecification.DSS_DEPARTMENT_CODE).And(
                    		DSSSubRanges.DSS_SUB_DEPARTMENT_CODE.IsEqualTo(StyleSpecification.DSS_SUB_DEPT_CODE)).And(
                    		DSSSubRanges.DSS_SECTION_CODE.IsEqualTo(StyleSpecification.DSS_SECTION_CODE)).And(
                    		DSSSubRanges.DSS_RANGE_CODE.IsEqualTo(StyleSpecification.DSS_RANGE_CODE)).And(
                    		DSSSubRanges.DSS_SUB_RANGE_CODE.IsEqualTo(StyleSpecification.DSS_SUB_RANGE_CODE)), 
                    	DSSSubRanges.SortByREF_SUB_RANGES_X1);
                    
                    Relations.Add(Product1, 
                    		Product1.DSSDepartmentCode.IsEqualTo("4 ").And(
                    		Product1.DSSSubDepartmentCode.IsEqualTo("N ")).And(
                    		Product1.DSSSectionCode.IsEqualTo("4 ")).And(
                    		Product1.ProductNumber.IsEqualTo(Orders.PRODUCT_NUMBER)), 
                    	Product1.SortByREF_Product_X3);
                    
                    Relations.Add(Product2, 
                    		Product2.DSSDepartmentCode.IsEqualTo("4 ").And(
                    		Product2.DSSSubDepartmentCode.IsEqualTo("N ")).And(
                    		Product2.DSSSectionCode.IsEqualTo("7 ")).And(
                    		Product2.ProductNumber.IsEqualTo(Orders.PRODUCT_NUMBER)), 
                    	Product2.SortByREF_Product_X3);
                    
                    Relations.Add(MOS_URGENT_ORDER_REASONS, 
                    		MOS_URGENT_ORDER_REASONS.URGENT_ORDER_CODE.IsEqualTo(Orders.URGENT_ORDER_CODE), 
                    	MOS_URGENT_ORDER_REASONS.SortByMOS_URGENT_ORD_X1);
                    
                    Relations.Add(SupplierFactoryList, 
                    		SupplierFactoryList.SUPPLIER_ACCOUNT.IsEqualTo(Orders.SUPPLIER_CODE).And(
                    		SupplierFactoryList.FACTORY_ACCOUNT.IsEqualTo(Orders.FACTORY_CODE)), 
                    	SupplierFactoryList.SortByREF_SUPP_FACTORY_X1);
                    
                    Relations.Add(StyleLabels, 
                    		StyleLabels.StyleCode.IsEqualTo(ProductsByStyle.StyleCode).And(
                    		StyleLabels.LabelType.IsEqualTo(3)).And(
                    		StyleLabels.LabelCode.IsEqualTo("WL6")), 
                    	StyleLabels.SortBySHP_Style_Labels_X1);
                    
                    Relations.Add(MOS_FRA_ORDER_PACKS, 
                    		MOS_FRA_ORDER_PACKS.MACKAYS_ORDER_NUMBER.IsEqualTo(_parent.vOrderNumber).And(
                    		MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER.IsEqualTo(Orders.PRODUCT_NUMBER)), 
                    	MOS_FRA_ORDER_PACKS.SortByMOS_FRA_ORDER_PACKS_X1);
                    
                    Where.Add(Orders.ORDER_NUMBER.IsEqualTo(_parent.vOrderNumber));
                    OrderBy = Orders.SortBySHP_ORDERS_X1;
                    
                    #region Columns
                    
                    Columns.Add(vStyleIsSetOrMulti);
                    // Order Details for Order Number passed in as a Parm
                    // All Pages of Print
                    Columns.Add(Orders.ORDER_NUMBER);
                    Columns.Add(Orders.SEASON1);
                    Columns.Add(Orders.ORDER_DATE);
                    Columns.Add(Orders.ORDER_CURRENCY);
                    Columns.Add(Orders.TERMS_OF_DELIVERY);
                    // if this = 'y', this is a primary order with secondary orders
                    Columns.Add(Orders.ORDER_HAS_SECONDARY_ORDERS);
                    // if this is not blank, the incoming order is a secondary order
                    Columns.Add(Orders.ORDER_IS_A_SECONDARY_ORDER);
                    // link for primary order no in case incoming order is a secondary order
                    Columns.Add(LinkedOrders.SecondaryOrder);
                    Columns.Add(LinkedOrders.PrimaryOrder);
                    Columns.Add(LinkedOrders.ReprocCode);
                    Columns.Add(LinkedOrders.ReprocSeq);
                    Columns.Add(LinkedOrders.SupplierAccount);
                    // get secondary order supplier id
                    Columns.Add(Supplier.SUPPLIER_ACCOUNT);
                    Columns.Add(Supplier.SUPPLIER_IDENTIFIER);
                    // get reprocessing detail for order heading in place of full description
                    Columns.Add(OrderReprocReasons.ReprocCode);
                    Columns.Add(OrderReprocReasons.ReprocSeq);
                    Columns.Add(OrderReprocReasons.SupplierID);
                    Columns.Add(OrderReprocReasons.ReprocDescription);
                    // get primary order supplier code
                    // these will be printed in place of full description if the incoming
                    // order is a secondary order
                    Columns.Add(Orders1.ORDER_NUMBER);
                    Columns.Add(Orders1.SUPPLIER_CODE);
                    
                    Columns.Add(vUKForeignSupplier).BindValue(() => u.Mid(Orders.SUPPLIER_CODE, 1, 3));
                    
                    // n.b. INITIAL TERMS OF DELIVERY FROM THE ORDER
                    Columns.Add(DeliveryTerms.TermsOfDelyCode);
                    Columns.Add(DeliveryTerms.IncludeFreight);
                    Columns.Add(DeliveryTerms.IncludeDuty);
                    Columns.Add(DeliveryTerms.IncludeUplift);
                    
                    // used in Lot Table
                    Columns.Add(CurrencyCodes.CurrencyCode);
                    Columns.Add(CurrencyCodes.CurrencyDescription);
                    Columns.Add(Orders.LAST_UPDATE_DATE);
                    Columns.Add(Orders.DELIVER_TO);
                    Columns.Add(Orders.AGENT_COMMISSION_PCENT);
                    Columns.Add(Orders.PAYMENT_TERMS);
                    Columns.Add(Orders.COUNTRY_OF_MANUFACTURE);
                    Columns.Add(Country.CountryCode);
                    Columns.Add(Country.CountryName);
                    // agent details
                    Columns.Add(Orders.AGENT_CODE);
                    Columns.Add(Supplier1.SUPPLIER_ACCOUNT);
                    Columns.Add(Supplier1.SUPPLIER_NAME);
                    // Supplier Details
                    Columns.Add(Orders.SUPPLIER_CODE);
                    Columns.Add(Supplier2.SUPPLIER_ACCOUNT);
                    Columns.Add(Supplier2.SUPPLIER_NAME);
                    Columns.Add(Supplier2.SUPPLIER_ADDRESS_1);
                    Columns.Add(Supplier2.SUPPLIER_ADDRESS_2);
                    Columns.Add(Supplier2.SUPPLIER_ADDRESS_3);
                    Columns.Add(Supplier2.SUPPLIER_ADDRESS_4);
                    Columns.Add(Supplier2.COUNTRY_CODE);
                    Columns.Add(Supplier2.CITY);
                    Columns.Add(Supplier2.POST_ZIP_CODE);
                    
                    Columns.Add(vCharReturn).BindValue(() => u.ASCIIChr(13));
                    Columns.Add(vFormattedSuppliersAddress);
                    Columns.Add(vFormattedFactoryAddress);
                    
                    Columns.Add(vECSupplierFound);
                    Relations[AnalCdByCountry].NotifyRowWasFoundTo(vECSupplierFound);
                    Columns.Add(AnalCdByCountry.CountryCode);
                    Columns.Add(AnalCdByCountry.AnalysisCode);
                    Columns.Add(Lot.ORDER_NUMBER);
                    Columns.Add(Lot.LOT_NUMBER);
                    Columns.Add(Lot.EXPORT_LIC_UNITS_QTY);
                    Columns.Add(Lot.SHIPPING_DATE_LATEST);
                    Columns.Add(Lot.DELIVERY_DATE);
                    // Product Details
                    Columns.Add(Orders.PRODUCT_NUMBER);
                    Columns.Add(Product.ProductNumber);
                    Columns.Add(Product.ProductDescription);
                    Columns.Add(Product.MerchandisingCode);
                    Columns.Add(Product.Factor);
                    // Link between Produc and Style
                    Columns.Add(ProductsByStyle.ProductNumber);
                    Columns.Add(ProductsByStyle.StyleCode);
                    // Style Details
                    Columns.Add(vStyleImagePath);
                    Columns.Add(StyleSpecification.STYLE_CODE);
                    Columns.Add(StyleSpecification.STYLE_DESCRIPTION);
                    Columns.Add(StyleSpecification.BRAND_NAME);
                    Columns.Add(StyleSpecification.MAIN_CONSTRUCTION);
                    Columns.Add(StyleSpecification.DSS_DEPARTMENT_CODE);
                    Columns.Add(StyleSpecification.DSS_SUB_DEPT_CODE);
                    Columns.Add(StyleSpecification.DSS_SECTION_CODE);
                    Columns.Add(StyleSpecification.DSS_RANGE_CODE);
                    Columns.Add(StyleSpecification.DSS_SUB_RANGE_CODE);
                    Columns.Add(StyleSpecification.STYLE_IMAGE_PATH);
                    Columns.Add(StyleSpecification.DELIVER_HANGING_OR_FLAT);
                    // next 2 used for label qty calc
                    Columns.Add(StyleSpecification.SET_OR_MULTI_ITEM);
                    Columns.Add(StyleSpecification.C_E_UNITS_IN_SET_OR_MULTI);
                    Columns.Add(StyleSpecification.BOXED_BH_OR_HANGING);
                    Columns.Add(StyleSpecification.HANGER_CODE);
                    Columns.Add(StyleSpecification.SIZE_SPEC_CODE);
                    Columns.Add(StyleSpecification.COM_ORD_STYLE);
                    Columns.Add(StyleSpecification.IN_OUT_BOXING);
                    Columns.Add(StyleConstruction1.StyleCode);
                    Columns.Add(StyleConstruction1.StyleComponentSequence);
                    Columns.Add(StyleConstruction1.ConstructionType);
                    Columns.Add(StyleConstruction1.StyleGauge);
                    Columns.Add(StyleConstruction1.StyleWeight);
                    Columns.Add(StyleConstruction1.StyleDyeType);
                    Columns.Add(StyleConstruction1.StyleYarnType);
                    Columns.Add(StyleConstruction1.StyleYarnCount);
                    
                    Columns.Add(DSSDepartments.DSS_DEPARTMENT_CODE);
                    Columns.Add(DSSDepartments.DESCRIPTION);
                    
                    // Sub Department Description for Style
                    Columns.Add(DSSSubDepartments.DSS_DEPARTMENT_CODE);
                    Columns.Add(DSSSubDepartments.DSS_SUB_DEPARTMENT_CODE);
                    Columns.Add(DSSSubDepartments.DESCRIPTION);
                    
                    // Section Description
                    Columns.Add(DSSSections.DSS_DEPARTMENT_CODE);
                    Columns.Add(DSSSections.DSS_SUB_DEPARTMENT_CODE);
                    Columns.Add(DSSSections.DSS_SECTION_CODE);
                    Columns.Add(DSSSections.DESCRIPTION);
                    
                    Columns.Add(DSSRanges.DSS_DEPARTMENT_CODE);
                    Columns.Add(DSSRanges.DSS_SUB_DEPARTMENT_CODE);
                    Columns.Add(DSSRanges.DSS_SECTION_CODE);
                    Columns.Add(DSSRanges.DSS_RANGE_CODE);
                    Columns.Add(DSSRanges.DESCRIPTION);
                    
                    Columns.Add(DSSSubRanges.DSS_DEPARTMENT_CODE);
                    Columns.Add(DSSSubRanges.DSS_SUB_DEPARTMENT_CODE);
                    Columns.Add(DSSSubRanges.DSS_SECTION_CODE);
                    Columns.Add(DSSSubRanges.DSS_RANGE_CODE);
                    Columns.Add(DSSSubRanges.DSS_SUB_RANGE_CODE);
                    Columns.Add(DSSSubRanges.DESCRIPTION);
                    
                    Columns.Add(vProductHierarchyDescription).BindValue(() => u.Trim(u.Trim(DSSDepartments.DESCRIPTION) + "-" + u.Trim(DSSSubDepartments.DESCRIPTION) + "-" + u.Trim(DSSSections.DESCRIPTION) + "-" + u.Trim(DSSRanges.DESCRIPTION) + "-" + u.Trim(DSSSubRanges.DESCRIPTION)));
                    
                    // CHECK FOR SECTION 4N4
                    Columns.Add(vProdIsSect4N4);
                    Relations[Product1].NotifyRowWasFoundTo(vProdIsSect4N4);
                    Columns.Add(Product1.DSSDepartmentCode);
                    Columns.Add(Product1.DSSSubDepartmentCode);
                    Columns.Add(Product1.DSSSectionCode);
                    Columns.Add(Product1.DSSRangeCode);
                    Columns.Add(Product1.DSSSubRangeCode);
                    Columns.Add(Product1.ProductNumber);
                    // CHECK FOR SECTION 4N7
                    Columns.Add(vProdIsSect4N7);
                    Relations[Product2].NotifyRowWasFoundTo(vProdIsSect4N7);
                    Columns.Add(Product2.DSSDepartmentCode);
                    Columns.Add(Product2.DSSSubDepartmentCode);
                    Columns.Add(Product2.DSSSectionCode);
                    Columns.Add(Product2.DSSRangeCode);
                    Columns.Add(Product2.DSSSubRangeCode);
                    Columns.Add(Product2.ProductNumber);
                    
                    // get urgent order reason..... to be printed on report
                    Columns.Add(Orders.URGENT_ORDER_CODE);
                    Columns.Add(MOS_URGENT_ORDER_REASONS.URGENT_ORDER_CODE);
                    Columns.Add(MOS_URGENT_ORDER_REASONS.URGENT_ORDER_REASON);
                    
                    // virtuals where max of 5 Care Label Images are updated from subtask
                    Columns.Add(vWashCareLabel);
                    Columns.Add(vIronCareLabel);
                    Columns.Add(vSpecialCleanCareLabel);
                    Columns.Add(vBleachCareLabel);
                    Columns.Add(vDryingCareLabel);
                    // virtual for Care Type 6 Desc. (Seperate Form)
                    Columns.Add(vOtherCareDescription);
                    // virtuals for Certifcates required
                    Columns.Add(vCertificateString1);
                    Columns.Add(vCertificateString2);
                    // virtual for MFA Categories for Order
                    Columns.Add(vMFACats);
                    // HS Code - First 4 characters of commodity code (Bangladesh Only)
                    // **Changed to First 6 characters and now for all orders and not just Bangladesh**
                    Columns.Add(vHSCodes);
                    // Build Style Construction String from subtask (Style Construction)
                    Columns.Add(vStyleConstructionString);
                    
                    Columns.Add(Orders.FACTORY_CODE);
                    
                    Columns.Add(SupplierFactoryList.SUPPLIER_ACCOUNT);
                    Columns.Add(SupplierFactoryList.FACTORY_ACCOUNT);
                    Columns.Add(SupplierFactoryList.FACTORY_ID);
                    Columns.Add(SupplierFactoryList.FACTORY_COMPANY_NAME);
                    Columns.Add(SupplierFactoryList.FLAT_BLOCK_UNIT_ROOM_FLOOR);
                    Columns.Add(SupplierFactoryList.BUILDING_CENTRE_PLAZA);
                    Columns.Add(SupplierFactoryList.NUMBER_AND_STREET_LINE_1);
                    Columns.Add(SupplierFactoryList.NUMBER_AND_STREET_LINE_2);
                    Columns.Add(SupplierFactoryList.CITY);
                    Columns.Add(SupplierFactoryList.COUNTRY_CODE);
                    Columns.Add(SupplierFactoryList.POST_ZIP_CODE);
                    
                    Columns.Add(RCFranchiseLabelExists);
                    Relations[StyleLabels].NotifyRowWasFoundTo(RCFranchiseLabelExists);
                    Columns.Add(StyleLabels.StyleCode);
                    Columns.Add(StyleLabels.LabelType);
                    Columns.Add(StyleLabels.LabelCode);
                    
                    Columns.Add(RCFranchiseOrderExists);
                    Relations[MOS_FRA_ORDER_PACKS].NotifyRowWasFoundTo(RCFranchiseOrderExists);
                    Columns.Add(MOS_FRA_ORDER_PACKS.MACKAYS_ORDER_NUMBER);
                    Columns.Add(MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER);
                    Columns.Add(vMultiplePackingMethods);
                    #endregion
                }
                
                /// <summary>Order Details</summary>
                internal void Run()
                {
                    Execute();
                }
                protected override void OnLoad()
                {
                    TransactionScope = TransactionScopes.Task;
                    Activity = Activities.Browse;
                    _layout.Reset();
                }
                protected override void OnEnterRow()
                {
                    // GET CERTS FOR NON EC SUPPLIER
                    if(u.Not(vECSupplierFound) || u.Left(Orders.SUPPLIER_CODE, 3) == "014" && Supplier2.COUNTRY_CODE == "GB")
                    {
                        Cached<OrderCertificates>().Run();
                    }
                    
                    Cached<StyleConstruction>().Run();
                    vStyleImagePath.Value = StyleSpecification.STYLE_IMAGE_PATH;

                    var imageName = CompressImage(StyleSpecification.STYLE_IMAGE_PATH);
                    var tempImageName = new TextColumn {Value = imageName};
                    _layout.pic.Data = tempImageName;
                }

                public string CompressImage(TextColumn imageLocation)
                {
                    if (!File.Exists(imageLocation))
                    {
                        Message.ShowWarningInStatusBar("File does not exist " + imageLocation);
                        return null;
                    }

                    using (var bitmap = (Bitmap)Image.FromFile(imageLocation))
                    {                        
                        using (var newBitmap = new Bitmap(bitmap, 450, 462))
                        {
                            var tempImageFileName = string.Format(@"C:\temp\po1537CompressedImage-{0}.jpg", Guid.NewGuid());
                            newBitmap.Save(tempImageFileName, ImageFormat.Jpeg);
                            _parent._parent.tempImages.Add(tempImageFileName);
                            return tempImageFileName;
                        }
                    }
                }

                protected override void OnLeaveRow()
                {                    
                    // decides whether UK or Foreign Order(014)
                    // for  Logistics print do only on first part
                    if(_parent.vReportType != "L" && (_parent.vReportPart == 1 || _parent.vReportPart == 2) || _parent.vReportType == "L" && _parent.vReportPart == 1)
                    {
                        Cached<FormatSuppliersAddress>().Run();
                    }
                    if((_parent.vReportType != "L" && (_parent.vReportPart == 1 || _parent.vReportPart == 2) || _parent.vReportType == "L" && _parent.vReportPart == 1) && u.Not(_parent._parent.pCommitmentOrder) || _parent._parent.pCommitmentOrder && _parent._parent.pReportType == "P")
                    {
                        _layout.StyleDetails12.WriteTo(_parent._ioOrderReport);
                    }
                    if((_parent.vReportType != "L" && (_parent.vReportPart == 1 || _parent.vReportPart == 2) || _parent.vReportType == "L" && _parent.vReportPart == 1) && _parent._parent.pCommitmentOrder && _parent._parent.pReportType != "P")
                    {
                        _layout.StyleDetails12Commitment.WriteTo(_parent._ioOrderReport);
                    }
                    if(Exp_65())
                    {
                        Cached<FormatFactoryAddress>().Run();
                    }
                    if(Exp_65())
                    {
                        _layout.FactoryDetails12.WriteTo(_parent._ioOrderReport);
                    }
                    
                    // for part 3 only
                    if(_parent.vReportPart == 3)
                    {
                        _layout.StyleDetails3.WriteTo(_parent._ioOrderReport);
                    }
                    
                    if(_parent.vReportPart == 1)
                    {
                        _layout.OrderSupplierDetails1.WriteTo(_parent._ioOrderReport);
                    }
                    // for all except Logistics print and part #2
                    if(_parent.vReportType != "L" && _parent.vReportPart == 2)
                    {
                        _layout.OrderSupplierDetail2.WriteTo(_parent._ioOrderReport);
                    }
                    
                    if(_parent.vReportPart == 3)
                    {
                        _layout.BrandName3.WriteTo(_parent._ioOrderReport);
                    }
                    if(_parent.vReportPart == 3 && u.Trim(Orders.SUPPLIER_CODE) != "014J0010" && u.Trim(Orders.SUPPLIER_CODE) != "014P1030")
                    {
                        _layout.CountryOfManufacture.WriteTo(_parent._ioOrderReport);                        
                    }
                    
                    vStyleIsSetOrMulti.Value = u.If(StyleSpecification.SET_OR_MULTI_ITEM == " ", false, true);
                    
                    if(_parent.vReportPart == 1 || _parent.vReportPart == 3)
                    {
                        Cached<StyleComponents>().Run();
                    }
                    
                    Cached<MultiplePackingMethods>().Run();
                    if(u.Not(vMultiplePackingMethods))
                    {
                        if((_parent.vReportPart == 1 || _parent.vReportPart == 3) && u.StrTokenCnt(StyleSpecification.HANGER_CODE, ",") > 0)
                        {
                            Cached<PackingMethod1BBHH>().Run();
                        }
                        if((_parent.vReportPart == 1 || _parent.vReportPart == 3) && u.StrTokenCnt(StyleSpecification.HANGER_CODE, ",") == 0)
                        {
                            Cached<PackingMethod2BBHH>().Run();
                        }
                    }
                    if(vMultiplePackingMethods)
                    {
                        Cached<PackingMethodMultiple>().Run();
                    }
                    
                    if((_parent.vReportPart == 1 || _parent.vReportPart == 3) && StyleSpecification.SIZE_SPEC_CODE != "")
                    {
                        Cached<SizeSpecDetails>().Run();
                    }
                    if(RCFranchiseOrderExists && u.Not(RCFranchiseLabelExists) && u.Not(_parent._parent.pCommitmentOrder))
                    {
                        ExtraMOSPrograms.AddFranchOrderLabelPo2218.Create().Run(ProductsByStyle.StyleCode);
                    }
                    Cached<StyleCareLabels>().Run();
                }
                
                #region Expressions
                internal Date Exp_7()
                {
                    return u.If(vUKForeignSupplier == "014" && Orders.TERMS_OF_DELIVERY != "FD", Lot.SHIPPING_DATE_LATEST, Lot.DELIVERY_DATE);
                }
                internal Text Exp_8()
                {
                    return "First " + u.If(vUKForeignSupplier == "014" && Orders.TERMS_OF_DELIVERY != "FD", "Shipment", "Delivery");
                }
                internal Text Exp_9()
                {
                    return u.If(StyleSpecification.DSS_DEPARTMENT_CODE == "3 ", DSSSections.DESCRIPTION, DSSSubDepartments.DESCRIPTION);
                }
                internal Text Exp_10()
                {
                    return u.If(StyleSpecification.DSS_DEPARTMENT_CODE == "3 ", "Section:", "Sub Dept:");
                }
                internal Text Exp_12()
                {
                    return u.If(Orders.ORDER_IS_A_SECONDARY_ORDER == "", StyleSpecification.STYLE_DESCRIPTION, OrderReprocReasons.ReprocDescription + u.ASCIIChr(13) + "Please refer to Order " + u.Str(LinkedOrders.PrimaryOrder, "######") + ", and Supplier " + Orders1.SUPPLIER_CODE + " in all correspondence");
                }
                internal Bool Exp_17()
                {
                    return Orders.ORDER_IS_A_SECONDARY_ORDER == "";
                }
                internal Text Exp_21()
                {
                    return u.If(_parent.vPrevOrderFound, "REPEAT ORDER", "NEW ORDER");
                }
                internal Bool Exp_22()
                {
                    return _parent.vReportType == "P";
                }
                internal Text Exp_23()
                {
                    return u.If(Product.MerchandisingCode == "F", "Fashion", u.If(Product.MerchandisingCode == "S", "Staple", ""));
                }
                internal Bool Exp_24()
                {
                    return _parent.vReportType != "L";
                }
                internal Number Exp_30()
                {
                    return u.If(vUKForeignSupplier != "014", 0.86, 3.01);
                }
                internal Number Exp_31()
                {
                    return u.If(vUKForeignSupplier != "014", 0.46, 2.15);
                }
                internal Bool Exp_32()
                {
                    return vUKForeignSupplier == "014";
                }
                internal Bool Exp_33()
                {
                    return vUKForeignSupplier == "014";
                }
                internal Text Exp_59()
                {
                    return u.If(Orders.URGENT_ORDER_CODE == 0, "Normal", "Urgent");
                }
                internal Text Exp_62()
                {
                    return "Inchinnan";
                }
                internal Bool Exp_63()
                {
                    return Product.MerchandisingCode == "F" && (u.Not(_parent._parent.pCommitmentOrder) || _parent._parent.pCommitmentOrder && _parent._parent.pReportType == "P");
                }
                Bool Exp_65()
                {
                    return Orders.FACTORY_CODE != "" && (_parent.vReportPart == 1 || _parent.vReportPart == 2) && u.Not(_parent._parent.pCommitmentOrder);
                }
                internal Bool Exp_66()
                {
                    return _parent.vReportType == "P";
                }
                #endregion
                
                
                
                /// <summary>Style Care Labels(P#400.1.1.1)</summary>
                // Last change before Migration: 07/02/2013 11:23:56
                internal class StyleCareLabels : Mos.BusinessProcessBase 
                {
                    
                    #region Models
                    
                    /// <summary>Style Care Labels</summary>
                    readonly Models.StyleCareLabels StyleCareLabels1 = new Models.StyleCareLabels { ReadOnly = true };
                    
                    /// <summary>Care Label Codes By Type</summary>
                    readonly Models.CareLabelCodesByType CareLabelCodesByType = new Models.CareLabelCodesByType { ReadOnly = true };
                    #endregion
                    
                    #region Printing Layouts
                    Printing.OrderPrintPo1537StyleCareLabels _layout;
                    #endregion
                    
                    internal OrderDetails _parent;
                    
                    
                    /// <summary>Style Care Labels(P#400.1.1.1)</summary>
                    public StyleCareLabels(OrderDetails parent)
                    {
                        _parent = parent;
                        Title = "Style Care Labels";
                        InitializeDataView();
                        _layout = new Printing.OrderPrintPo1537StyleCareLabels(this);
                        _layout.Layouts.Add(_parent._parent._layout);
                    }
                    void InitializeDataView()
                    {
                        From = StyleCareLabels1;
                        Relations.Add(CareLabelCodesByType, 
                        		CareLabelCodesByType.CareType.IsEqualTo(StyleCareLabels1.CareType).And(
                        		CareLabelCodesByType.CareCode.IsEqualTo(StyleCareLabels1.CareCode)), 
                        	CareLabelCodesByType.SortBySHP_Care_Lbl_Cds_By_Type_X1);
                        
                        Where.Add(StyleCareLabels1.StyleCode.IsEqualTo(_parent.StyleSpecification.STYLE_CODE));
                        OrderBy = StyleCareLabels1.SortBySHP_Style_Care_Labels_X1;
                        
                        #region Columns
                        
                        // Style care Label info and images.
                        Columns.Add(StyleCareLabels1.StyleCode);
                        Columns.Add(StyleCareLabels1.CareType);
                        Columns.Add(StyleCareLabels1.CareCode);
                        Columns.Add(CareLabelCodesByType.CareType);
                        Columns.Add(CareLabelCodesByType.CareCode);
                        Columns.Add(CareLabelCodesByType.CareCodeDescription);
                        Columns.Add(CareLabelCodesByType.CareCodeImagePath);
                        #endregion
                    }
                    
                    /// <summary>Style Care Labels</summary>
                    internal void Run()
                    {
                        Execute();
                    }
                    protected override void OnLoad()
                    {
                        TransactionScope = TransactionScopes.Task;
                        Activity = Activities.Browse;
                        _layout.Reset();
                    }
                    protected override void OnLeaveRow()
                    {
                        // There can be a max of 5 Style Care images. Update each of the 5
                        // variables depending on which type of care type label is being read
                        // there is also a 6th care type which is text
                        if(StyleCareLabels1.CareType == 1)
                        {
                            _parent.vWashCareLabel.Value = CareLabelCodesByType.CareCodeImagePath;
                        }
                        if(StyleCareLabels1.CareType == 2)
                        {
                            _parent.vIronCareLabel.Value = CareLabelCodesByType.CareCodeImagePath;
                        }
                        if(StyleCareLabels1.CareType == 3)
                        {
                            _parent.vSpecialCleanCareLabel.Value = CareLabelCodesByType.CareCodeImagePath;
                        }
                        if(StyleCareLabels1.CareType == 4)
                        {
                            _parent.vBleachCareLabel.Value = CareLabelCodesByType.CareCodeImagePath;
                        }
                        if(StyleCareLabels1.CareType == 5)
                        {
                            _parent.vDryingCareLabel.Value = CareLabelCodesByType.CareCodeImagePath;
                        }
                        if(StyleCareLabels1.CareType == 6)
                        {
                            _parent.vOtherCareDescription.Value = CareLabelCodesByType.CareCodeDescription;
                        }
                    }
                    protected override void OnEnd()
                    {
                        if(_parent._parent.vReportPart == 3)
                        {
                            _layout.StyleCareLabelImages3.WriteTo(_parent._parent._ioOrderReport);
                        }
                        if(_parent._parent.vReportPart == 3 && StyleCareLabels1.CareType == 6)
                        {
                            _layout.StyleCareDescCareType6.WriteTo(_parent._parent._ioOrderReport);
                        }
                        Cached<SpecialInstructions>().Run();
                    }
                    
                    
                    
                    /// <summary>Special Instructions(P#400.1.1.1.1)</summary>
                    // Last change before Migration: 07/02/2013 11:23:56
                    internal class SpecialInstructions : Mos.BusinessProcessBase 
                    {
                        
                        #region Models
                        
                        /// <summary>Style Care Type Addit Instruct</summary>
                        readonly Models.StyleCareTypeAdditInstruct StyleCareTypeAdditInstruct = new Models.StyleCareTypeAdditInstruct { ReadOnly = true };
                        
                        /// <summary>General Work File</summary>
                        readonly Models.GeneralWorkFile GeneralWorkFile = new Models.GeneralWorkFile { AllowRowLocking = true };
                        #endregion
                        
                        #region Columns
                        
                        /// <summary>v:Single Label Type Exists</summary>
                        readonly BoolColumn vSingleLabelTypeExists = new BoolColumn("v:Single Label Type Exists");
                        
                        /// <summary>v:Multi Label Type Exists</summary>
                        readonly BoolColumn vMultiLabelTypeExists = new BoolColumn("v:Multi Label Type Exists");
                        #endregion
                        
                        internal StyleCareLabels _parent;
                        
                        
                        /// <summary>Special Instructions(P#400.1.1.1.1)</summary>
                        public SpecialInstructions(StyleCareLabels parent)
                        {
                            _parent = parent;
                            Title = "Special Instructions";
                            InitializeDataView();
                        }
                        void InitializeDataView()
                        {
                            From = StyleCareTypeAdditInstruct;
                            Relations.Add(GeneralWorkFile, RelationType.InsertIfNotFound, 
                            		GeneralWorkFile.UserId.BindEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)).And(
                            		GeneralWorkFile.Alpha1.BindEqualTo(() => u.Str(Counter, "##"))).And(
                            		GeneralWorkFile.Alpha2.BindEqualTo(() => u.Str(StyleCareTypeAdditInstruct.InstructionCode, "##"))), 
                            	GeneralWorkFile.SortBySHP_General_Work_X1);
                            
                            Where.Add(StyleCareTypeAdditInstruct.StyleCode.IsEqualTo(_parent.StyleCareLabels1.StyleCode));
                            OrderBy = StyleCareTypeAdditInstruct.SortBySHP_Style_Special_Instructs_X1;
                            
                            #region Columns
                            
                            // next 2 are used to determine how the label type reporting will be done
                            // where garment is set or multi and label type requires one label per
                            // component
                            Columns.Add(vSingleLabelTypeExists);
                            Columns.Add(vMultiLabelTypeExists);
                            
                            Columns.Add(StyleCareTypeAdditInstruct.StyleCode);
                            Columns.Add(StyleCareTypeAdditInstruct.CareType);
                            Columns.Add(StyleCareTypeAdditInstruct.InstructionCode);
                            
                            // Using Num2 and alpha2 to hold spec instructs detail
                            // any rows created here will have label detail updated later
                            // alpha 1 is a seq no generated from counter(0) which initially is zero
                            Columns.Add(GeneralWorkFile.UserId);
                            Columns.Add(GeneralWorkFile.Alpha1);
                            Columns.Add(GeneralWorkFile.Alpha2);
                            Columns.Add(GeneralWorkFile.Alpha3);
                            Columns.Add(GeneralWorkFile.Alpha4);
                            Columns.Add(GeneralWorkFile.Num2).BindValue(StyleCareTypeAdditInstruct.CareType);
                            #endregion
                        }
                        
                        /// <summary>Special Instructions</summary>
                        internal void Run()
                        {
                            Execute();
                        }
                        protected override void OnLoad()
                        {
                            RowLocking = LockingStrategy.OnRowLoading;
                            TransactionScope = TransactionScopes.RowLocking;
                        }
                        protected override void OnStart()
                        {
                            Cached<ZapTempTable>().Run();
                        }
                        protected override void OnEnd()
                        {
                            // To add Reprint functionality, 'R' added to condition. Only place in
                            // Program apart from adding Text Label to the Order Form
                            
                            // also included Report functionality 'L'
                            if(_parent._parent._parent.vReportType == "P" && _parent._parent._parent.vReportPart == 1 || (_parent._parent._parent.vReportType == "O" || _parent._parent._parent.vReportType == "R" || _parent._parent._parent.vReportType == "L") && (_parent._parent._parent.vReportPart == 1 || _parent._parent._parent.vReportPart == 2))
                            {
                                Cached<LotDetails>().Run();
                            }
                            if(_parent._parent._parent.vReportPart == 3)
                            {
                                Cached<StyleOtherLabel>().Run();
                            }
                            if(_parent._parent._parent.vReportPart == 3)
                            {
                                Cached<TillCodes>().Run();
                            }
                        }
                        
                        
                        
                        /// <summary>Till Codes(P#400.1.1.1.1.1)</summary>
                        // Last change before Migration: 09/11/2012 11:10:33
                        internal class TillCodes : Mos.BusinessProcessBase 
                        {
                            
                            #region Models
                            
                            /// <summary>Product Colours</summary>
                            readonly Models.ProductColours ProductColours = new Models.ProductColours { ReadOnly = true };
                            
                            /// <summary>Option Attributes</summary>
                            readonly Models.OptionAttributes OptionAttributes = new Models.OptionAttributes { KeepCacheAliveAfterExit = true, ReadOnly = true };
                            
                            /// <summary>Option Attribute Codes</summary>
                            internal readonly Models.OptionAttributeCodes OptionAttributeCodes = new Models.OptionAttributeCodes { KeepCacheAliveAfterExit = true, ReadOnly = true };
                            #endregion
                            
                            #region Columns
                            
                            /// <summary>v:Tot Labs Col 1</summary>
                            internal readonly NumberColumn vTotLabsCol1 = new NumberColumn("v:Tot Labs Col 1", "6");
                            
                            /// <summary>v:Tot Labs Col 2</summary>
                            internal readonly NumberColumn vTotLabsCol2 = new NumberColumn("v:Tot Labs Col 2", "6");
                            
                            /// <summary>v:Style Instructs to Supplier</summary>
                            internal readonly TextColumn vStyleInstructsToSupplier = new TextColumn("v:Style Instructs to Supplier", "UX100");
                            #endregion
                            
                            #region Printing Layouts
                            Printing.OrderPrintPo1537TillCodes _layout;
                            #endregion
                            
                            SpecialInstructions _parent;
                            
                            
                            /// <summary>Till Codes(P#400.1.1.1.1.1)</summary>
                            public TillCodes(SpecialInstructions parent)
                            {
                                _parent = parent;
                                Title = "Till Codes";
                                InitializeDataView();
                                _layout = new Printing.OrderPrintPo1537TillCodes(this);
                                _layout.Layouts.Add(_parent._parent._parent._parent._layout);
                            }
                            void InitializeDataView()
                            {
                                From = ProductColours;
                                Relations.Add(OptionAttributes, 
                                		OptionAttributes.ATTRIBUTE_TYPE.IsEqualTo(3).And(
                                		OptionAttributes.PRODUCT_NUMBER.IsEqualTo(_parent._parent._parent.Orders.PRODUCT_NUMBER)).And(
                                		OptionAttributes.COLOUR_CODE.IsEqualTo(ProductColours.ColourCode)), 
                                	OptionAttributes.SortByREF_OPT_ATT_X1);
                                
                                Relations.Add(OptionAttributeCodes, 
                                		OptionAttributeCodes.ATTRIBUTE_TYPE.IsEqualTo(3).And(
                                		OptionAttributeCodes.ATTRIBUTE_CODE.IsEqualTo(OptionAttributes.ATTRIBUTE_CODE)), 
                                	OptionAttributeCodes.SortByREF_OPT_ATT_CODE_X1);
                                
                                Where.Add(ProductColours.ProductNumber.IsEqualTo(_parent._parent._parent.Orders.PRODUCT_NUMBER));
                                OrderBy = ProductColours.SortBySHP_Product_Colours_X2;
                                
                                #region Columns
                                
                                // label totals for till code form footer
                                Columns.Add(vTotLabsCol1);
                                Columns.Add(vTotLabsCol2);
                                
                                Columns.Add(vStyleInstructsToSupplier);
                                
                                Columns.Add(ProductColours.ProductNumber);
                                Columns.Add(ProductColours.ColourCode);
                                Columns.Add(ProductColours.ColourRelativePosition);
                                
                                // get story attrib code type 3
                                Columns.Add(OptionAttributes.ATTRIBUTE_TYPE);
                                Columns.Add(OptionAttributes.PRODUCT_NUMBER);
                                Columns.Add(OptionAttributes.COLOUR_CODE);
                                Columns.Add(OptionAttributes.ATTRIBUTE_CODE);
                                
                                // Get Story Description
                                Columns.Add(OptionAttributeCodes.ATTRIBUTE_TYPE);
                                Columns.Add(OptionAttributeCodes.ATTRIBUTE_CODE);
                                Columns.Add(OptionAttributeCodes.ATTRIBUTE_CODE_DESCRIPTION);
                                #endregion
                            }
                            
                            /// <summary>Till Codes</summary>
                            internal void Run()
                            {
                                Execute();
                            }
                            protected override void OnLoad()
                            {
                                TransactionScope = TransactionScopes.RowLocking;
                                KeepChildRelationCacheAlive = true;
                                KeepViewVisibleAfterExit = true;
                                _layout.Reset();
                            }
                            protected override void OnStart()
                            {
                                _layout.TillCodeTableHeader3.WriteTo(_parent._parent._parent._parent._ioOrderReport);
                            }
                            protected override void OnLeaveRow()
                            {
                                Cached<ProductSizes>().Run();
                            }
                            protected override void OnEnd()
                            {
                                _layout.TillCodeTableFooter3.WriteTo(_parent._parent._parent._parent._ioOrderReport);
                                
                                // last thing(s) to be printed
                                Cached<StyleInstructs>().Run();
                            }
                            
                            #region Expressions
                            internal Bool Exp_3()
                            {
                                return u.Not(_parent._parent._parent.vStyleIsSetOrMulti) || _parent._parent._parent.vStyleIsSetOrMulti && _parent.vSingleLabelTypeExists;
                            }
                            internal Bool Exp_4()
                            {
                                return u.Not(_parent._parent._parent.vStyleIsSetOrMulti) || _parent._parent._parent.vStyleIsSetOrMulti && _parent.vSingleLabelTypeExists;
                            }
                            internal Bool Exp_5()
                            {
                                return _parent._parent._parent.vStyleIsSetOrMulti && _parent.vMultiLabelTypeExists;
                            }
                            internal Bool Exp_6()
                            {
                                return _parent._parent._parent.vStyleIsSetOrMulti && _parent.vMultiLabelTypeExists;
                            }
                            #endregion
                            
                            
                            
                            /// <summary>Product Sizes(P#400.1.1.1.1.1.1)</summary>
                            // Last change before Migration: 09/11/2012 11:12:48
                            internal class ProductSizes : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>Product Sizes</summary>
                                internal readonly Models.ProductSizes ProductSizes1 = new Models.ProductSizes { ReadOnly = true };
                                
                                /// <summary>Colour</summary>
                                internal readonly Models.Colour Colour = new Models.Colour { ReadOnly = true };
                                
                                /// <summary>Size</summary>
                                readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                
                                /// <summary>REF_PACK_LOOKUP</summary>
                                readonly Models.REF_PACK_LOOKUP REF_PACK_LOOKUP = new Models.REF_PACK_LOOKUP { ReadOnly = true };
                                
                                /// <summary>Tcodes</summary>
                                readonly Models.Tcodes Tcodes = new Models.Tcodes { ReadOnly = true };
                                
                                /// <summary>Tcodes</summary>
                                readonly Models.Tcodes Tcodes1 = new Models.Tcodes { ReadOnly = true };
                                
                                /// <summary>Barcodes Available</summary>
                                internal readonly Models.BarcodesAvailable BarcodesAvailable = new Models.BarcodesAvailable { ReadOnly = true };
                                #endregion
                                
                                #region Columns
                                
                                /// <summary>v:Size on Order</summary>
                                readonly BoolColumn vSizeOnOrder = new BoolColumn("v:Size on Order");
                                
                                /// <summary>v:franchisee ordered size</summary>
                                readonly BoolColumn vFranchiseeOrderedSize = new BoolColumn("v:franchisee ordered size");
                                
                                /// <summary>rc:tillcode NOT duplicate ok</summary>
                                readonly BoolColumn rcTillcodeNOTDuplicateOk = new BoolColumn("rc:tillcode NOT duplicate ok");
                                
                                /// <summary>rc:tillcode with duplicate ok</summary>
                                readonly BoolColumn rcTillcodeWithDuplicateOk = new BoolColumn("rc:tillcode with duplicate ok");
                                
                                /// <summary>v:Prod Col Size(pre Calc)</summary>
                                readonly NumberColumn vProdColSizePreCalc = new NumberColumn("v:Prod Col Size(pre Calc)", "4");
                                
                                /// <summary>v:Calcd Qty for Column 1</summary>
                                internal readonly NumberColumn vCalcdQtyForColumn1 = new NumberColumn("v:Calcd Qty for Column 1", "4");
                                
                                /// <summary>v:Calcd Qty for Column 2</summary>
                                internal readonly NumberColumn vCalcdQtyForColumn2 = new NumberColumn("v:Calcd Qty for Column 2", "6");
                                #endregion
                                
                                #region Printing Layouts
                                Printing.OrderPrintPo1537ProductSizes _layout;
                                #endregion
                                
                                internal TillCodes _parent;
                                
                                
                                /// <summary>Product Sizes(P#400.1.1.1.1.1.1)</summary>
                                public ProductSizes(TillCodes parent)
                                {
                                    _parent = parent;
                                    Title = "Product Sizes";
                                    InitializeDataView();
                                    _layout = new Printing.OrderPrintPo1537ProductSizes(this);
                                    _layout.Layouts.Add(_parent._parent._parent._parent._parent._layout);
                                    _layout.Layouts.Add(_parent._layout);
                                }
                                void InitializeDataView()
                                {
                                    From = ProductSizes1;
                                    Relations.Add(Colour, 
                                    		Colour.ColourCode.IsEqualTo(_parent.ProductColours.ColourCode), 
                                    	Colour.SortByREF_Colour_X1);
                                    
                                    Relations.Add(Size1, 
                                    		Size1.SizeCode.IsEqualTo(ProductSizes1.SizeCode), 
                                    	Size1.SortByREF_Size_X1);
                                    
                                    Relations.Add(REF_PACK_LOOKUP, 
                                    		REF_PACK_LOOKUP.LOOK_UP_FACTOR.IsEqualTo(_parent._parent._parent._parent.Product.Factor).And(
                                    		REF_PACK_LOOKUP.COLOUR_RELATIVE_POSITION.IsEqualTo(_parent.ProductColours.ColourRelativePosition)).And(
                                    		REF_PACK_LOOKUP.SIZE_RELATIVE_POSITION.IsEqualTo(ProductSizes1.SizeRelativePosition)), 
                                    	REF_PACK_LOOKUP.SortByREF_PACK_LOOKUP_X1);
                                    
                                    Relations.Add(Tcodes, 
                                    		Tcodes.PRODUCT_NUMBER.IsEqualTo(_parent._parent._parent._parent.Orders.PRODUCT_NUMBER).And(
                                    		Tcodes.COLOUR_CODE.IsEqualTo(_parent.ProductColours.ColourCode)).And(
                                    		Tcodes.SIZE_CODE.IsEqualTo(ProductSizes1.SizeCode)).And(
                                    		Tcodes.DUPLICATE_FLAG.IsEqualTo(" ")), 
                                    	Tcodes.SortByREF_TCODES_X2);
                                    
                                    Relations.Add(Tcodes1, 
                                    		Tcodes1.PRODUCT_NUMBER.IsEqualTo(_parent._parent._parent._parent.Orders.PRODUCT_NUMBER).And(
                                    		Tcodes1.COLOUR_CODE.IsEqualTo(_parent.ProductColours.ColourCode)).And(
                                    		Tcodes1.SIZE_CODE.IsEqualTo(ProductSizes1.SizeCode)), 
                                    	Tcodes1.SortByREF_TCODES_X2);
                                    
                                    Relations.Add(BarcodesAvailable, 
                                    		BarcodesAvailable.TILL_CODE.IsEqualTo(() => u.If(rcTillcodeNOTDuplicateOk, Tcodes.TILL_CODE, Tcodes1.TILL_CODE)), 
                                    	BarcodesAvailable.SortByREF_BAR_CODES_AVAILABLE_X2);
                                    
                                    Where.Add(ProductSizes1.ProductNumber.IsEqualTo(_parent._parent._parent._parent.Orders.PRODUCT_NUMBER));
                                    OrderBy = ProductSizes1.SortBySHP_Product_Sizes_X2;
                                    
                                    #region Columns
                                    
                                    Columns.Add(ProductSizes1.ProductNumber);
                                    Columns.Add(ProductSizes1.SizeCode);
                                    Columns.Add(ProductSizes1.SizeRelativePosition);
                                    Columns.Add(ProductSizes1.SellingPrice);
                                    
                                    // check if size on order rec prefix call
                                    Columns.Add(vSizeOnOrder);
                                    Columns.Add(vFranchiseeOrderedSize);
                                    
                                    Columns.Add(Colour.ColourCode);
                                    Columns.Add(Colour.ColourDescription);
                                    Columns.Add(Size1.SizeCode);
                                    Columns.Add(Size1.SizeDescription);
                                    Columns.Add(Size1.FullDescription);
                                    
                                    Columns.Add(REF_PACK_LOOKUP.LOOK_UP_FACTOR);
                                    Columns.Add(REF_PACK_LOOKUP.COLOUR_RELATIVE_POSITION);
                                    Columns.Add(REF_PACK_LOOKUP.SIZE_RELATIVE_POSITION);
                                    Columns.Add(REF_PACK_LOOKUP.PACK_RATIO_COLOUR);
                                    Columns.Add(REF_PACK_LOOKUP.PACK_RATIO_SIZE);
                                    
                                    // Link twice to till codes, prefer non-duplicated check-coded Tillcode
                                    Columns.Add(rcTillcodeNOTDuplicateOk);
                                    Relations[Tcodes].NotifyRowWasFoundTo(rcTillcodeNOTDuplicateOk);
                                    Columns.Add(Tcodes.PRODUCT_NUMBER);
                                    Columns.Add(Tcodes.COLOUR_CODE);
                                    Columns.Add(Tcodes.SIZE_CODE);
                                    Columns.Add(Tcodes.DUPLICATE_FLAG);
                                    Columns.Add(Tcodes.TILL_CODE);
                                    
                                    Columns.Add(rcTillcodeWithDuplicateOk);
                                    Relations[Tcodes1].NotifyRowWasFoundTo(rcTillcodeWithDuplicateOk);
                                    Columns.Add(Tcodes1.PRODUCT_NUMBER);
                                    Columns.Add(Tcodes1.COLOUR_CODE);
                                    Columns.Add(Tcodes1.SIZE_CODE);
                                    Columns.Add(Tcodes1.DUPLICATE_FLAG);
                                    Columns.Add(Tcodes1.TILL_CODE);
                                    Columns.Add(BarcodesAvailable.TILL_CODE);
                                    Columns.Add(BarcodesAvailable.BAR_CODE);
                                    // Product Colours Size qty before any calculations on Label Numbers
                                    Columns.Add(vProdColSizePreCalc);
                                    // Calcd label count for row print
                                    Columns.Add(vCalcdQtyForColumn1);
                                    Columns.Add(vCalcdQtyForColumn2);
                                    #endregion
                                }
                                
                                /// <summary>Product Sizes</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    TransactionScope = TransactionScopes.Task;
                                    Activity = Activities.Browse;
                                    _layout.Reset();
                                }
                                protected override void OnEnterRow()
                                {
                                    Cached<SizeOrdered>().Run();
                                }
                                protected override void OnLeaveRow()
                                {
                                    // only if size ordered
                                    if(vSizeOnOrder && u.Not(_parent._parent._parent._parent._parent._parent.pFranchiseOrder))
                                    {
                                        Cached<SizeColourCost>().Run();
                                        if(Exp_12())
                                        {
                                            _layout.TillCodeDetail3.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    
                                    if(_parent._parent._parent._parent._parent._parent.pFranchiseOrder)
                                    {
                                        Cached<SizeOrderedByFranchisee>().Run();
                                    }
                                    if(_parent._parent._parent._parent._parent._parent.pFranchiseOrder && vFranchiseeOrderedSize)
                                    {
                                        Cached<SizeColourCost>().Run();
                                        if(Exp_12())
                                        {
                                            _layout.TillCodeDetail3.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                        vFranchiseeOrderedSize.Value = false;
                                    }
                                }
                                
                                #region Expressions
                                internal Bool Exp_1()
                                {
                                    return u.Not(_parent._parent._parent._parent.vStyleIsSetOrMulti) || _parent._parent._parent._parent.vStyleIsSetOrMulti && _parent._parent.vSingleLabelTypeExists;
                                }
                                internal Bool Exp_11()
                                {
                                    return _parent._parent._parent._parent.vStyleIsSetOrMulti && _parent._parent.vMultiLabelTypeExists;
                                }
                                Bool Exp_12()
                                {
                                    return vCalcdQtyForColumn1 != 0 || vCalcdQtyForColumn2 != 0;
                                }
                                internal Number Exp_13()
                                {
                                    return u.If(rcTillcodeNOTDuplicateOk, Tcodes.TILL_CODE, Tcodes1.TILL_CODE);
                                }
                                internal Text Exp_14()
                                {
                                    return REF_PACK_LOOKUP.PACK_RATIO_COLOUR + REF_PACK_LOOKUP.PACK_RATIO_SIZE + "S";
                                }
                                internal Text Exp_15()
                                {
                                    return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                }
                                #endregion
                                
                                
                                
                                /// <summary>Size Colour Cost(P#400.1.1.1.1.1.1.1)</summary>
                                // Last change before Migration: 20/10/2011 15:47:04
                                class SizeColourCost : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>TempPackGrid</summary>
                                    readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
                                    #endregion
                                    
                                    ProductSizes _parent;
                                    
                                    
                                    /// <summary>Size Colour Cost(P#400.1.1.1.1.1.1.1)</summary>
                                    public SizeColourCost(ProductSizes parent)
                                    {
                                        _parent = parent;
                                        Title = "Size Colour Cost";
                                        InitializeDataView();
                                    }
                                    void InitializeDataView()
                                    {
                                        From = TempPackGrid;
                                        Where.Add(TempPackGrid.User1.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                        Where.Add(TempPackGrid.ProductNumber.IsEqualTo(_parent.ProductSizes1.ProductNumber));
                                        Where.Add(TempPackGrid.SizeCode.IsEqualTo(_parent.ProductSizes1.SizeCode));
                                        OrderBy = TempPackGrid.SortByPackGrid_X1;
                                        
                                        #region Columns
                                        
                                        Columns.Add(TempPackGrid.User1);
                                        Columns.Add(TempPackGrid.ProductNumber);
                                        Columns.Add(TempPackGrid.SizeCode);
                                        Columns.Add(TempPackGrid.ColourCode01);
                                        Columns.Add(TempPackGrid.ColourDesc01);
                                        Columns.Add(TempPackGrid.Units01);
                                        Columns.Add(TempPackGrid.ColourCode02);
                                        Columns.Add(TempPackGrid.ColourDesc02);
                                        Columns.Add(TempPackGrid.Units02);
                                        Columns.Add(TempPackGrid.ColourCode03);
                                        Columns.Add(TempPackGrid.ColourDesc03);
                                        Columns.Add(TempPackGrid.Units03);
                                        Columns.Add(TempPackGrid.ColourCode04);
                                        Columns.Add(TempPackGrid.ColourDesc04);
                                        Columns.Add(TempPackGrid.Units04);
                                        Columns.Add(TempPackGrid.ColourCode05);
                                        Columns.Add(TempPackGrid.ColourDesc05);
                                        Columns.Add(TempPackGrid.Units05);
                                        Columns.Add(TempPackGrid.ColourCode06);
                                        Columns.Add(TempPackGrid.ColourDesc06);
                                        Columns.Add(TempPackGrid.Units06);
                                        Columns.Add(TempPackGrid.ColourCode07);
                                        Columns.Add(TempPackGrid.ColourDesc07);
                                        Columns.Add(TempPackGrid.Units07);
                                        Columns.Add(TempPackGrid.ColourCode08);
                                        Columns.Add(TempPackGrid.ColourDesc08);
                                        Columns.Add(TempPackGrid.Units08);
                                        Columns.Add(TempPackGrid.ColourCode09);
                                        Columns.Add(TempPackGrid.ColourDesc09);
                                        Columns.Add(TempPackGrid.Units09);
                                        Columns.Add(TempPackGrid.ColourCode10);
                                        Columns.Add(TempPackGrid.ColourDesc10);
                                        Columns.Add(TempPackGrid.Units10);
                                        Columns.Add(TempPackGrid.ColourCode11);
                                        Columns.Add(TempPackGrid.ColourDesc11);
                                        Columns.Add(TempPackGrid.Units11);
                                        Columns.Add(TempPackGrid.ColourCode12);
                                        Columns.Add(TempPackGrid.ColourDesc12);
                                        Columns.Add(TempPackGrid.Units12);
                                        Columns.Add(TempPackGrid.ColourCode13);
                                        Columns.Add(TempPackGrid.ColourDesc13);
                                        Columns.Add(TempPackGrid.Units13);
                                        Columns.Add(TempPackGrid.ColourCode14);
                                        Columns.Add(TempPackGrid.ColourDesc14);
                                        Columns.Add(TempPackGrid.Units14);
                                        Columns.Add(TempPackGrid.ColourCode15);
                                        Columns.Add(TempPackGrid.ColourDesc15);
                                        Columns.Add(TempPackGrid.Units15);
                                        Columns.Add(TempPackGrid.ColourCode16);
                                        Columns.Add(TempPackGrid.ColourDesc16);
                                        Columns.Add(TempPackGrid.Units16);
                                        Columns.Add(TempPackGrid.ColourCode17);
                                        Columns.Add(TempPackGrid.ColourDesc17);
                                        Columns.Add(TempPackGrid.Units17);
                                        Columns.Add(TempPackGrid.ColourCode18);
                                        Columns.Add(TempPackGrid.ColourDesc18);
                                        Columns.Add(TempPackGrid.Units18);
                                        Columns.Add(TempPackGrid.ColourCode19);
                                        Columns.Add(TempPackGrid.ColourDesc19);
                                        Columns.Add(TempPackGrid.Units19);
                                        Columns.Add(TempPackGrid.ColourCode20);
                                        Columns.Add(TempPackGrid.ColourDesc20);
                                        Columns.Add(TempPackGrid.Units20);
                                        Columns.Add(TempPackGrid.ColourCode21);
                                        Columns.Add(TempPackGrid.ColourDesc21);
                                        Columns.Add(TempPackGrid.Units21);
                                        Columns.Add(TempPackGrid.ColourCode22);
                                        Columns.Add(TempPackGrid.ColourDesc22);
                                        Columns.Add(TempPackGrid.Units22);
                                        Columns.Add(TempPackGrid.ColourCode23);
                                        Columns.Add(TempPackGrid.ColourDesc23);
                                        Columns.Add(TempPackGrid.Units23);
                                        Columns.Add(TempPackGrid.ColourCode24);
                                        Columns.Add(TempPackGrid.ColourDesc24);
                                        Columns.Add(TempPackGrid.Units24);
                                        Columns.Add(TempPackGrid.ColourCode25);
                                        Columns.Add(TempPackGrid.ColourDesc25);
                                        Columns.Add(TempPackGrid.Units25);
                                        Columns.Add(TempPackGrid.ColourCode26);
                                        Columns.Add(TempPackGrid.ColourDesc26);
                                        Columns.Add(TempPackGrid.Units26);
                                        Columns.Add(TempPackGrid.ColourCode27);
                                        Columns.Add(TempPackGrid.ColourDesc27);
                                        Columns.Add(TempPackGrid.Units27);
                                        Columns.Add(TempPackGrid.ColourCode28);
                                        Columns.Add(TempPackGrid.ColourDesc28);
                                        Columns.Add(TempPackGrid.Units28);
                                        Columns.Add(TempPackGrid.ColourCode29);
                                        Columns.Add(TempPackGrid.ColourDesc29);
                                        Columns.Add(TempPackGrid.Units29);
                                        Columns.Add(TempPackGrid.ColourCode30);
                                        Columns.Add(TempPackGrid.ColourDesc30);
                                        Columns.Add(TempPackGrid.Units30);
                                        Columns.Add(TempPackGrid.ColourCode31);
                                        Columns.Add(TempPackGrid.ColourDesc31);
                                        Columns.Add(TempPackGrid.Units31);
                                        Columns.Add(TempPackGrid.ColourCode32);
                                        Columns.Add(TempPackGrid.ColourDesc32);
                                        Columns.Add(TempPackGrid.Units32);
                                        Columns.Add(TempPackGrid.ColourCode33);
                                        Columns.Add(TempPackGrid.ColourDesc33);
                                        Columns.Add(TempPackGrid.Units33);
                                        Columns.Add(TempPackGrid.ColourCode34);
                                        Columns.Add(TempPackGrid.ColourDesc34);
                                        Columns.Add(TempPackGrid.Units34);
                                        Columns.Add(TempPackGrid.ColourCode35);
                                        Columns.Add(TempPackGrid.ColourDesc35);
                                        Columns.Add(TempPackGrid.Units35);
                                        Columns.Add(TempPackGrid.ColourCode36);
                                        Columns.Add(TempPackGrid.ColourDesc36);
                                        Columns.Add(TempPackGrid.Units36);
                                        Columns.Add(TempPackGrid.ColourCode37);
                                        Columns.Add(TempPackGrid.ColourDesc37);
                                        Columns.Add(TempPackGrid.Units37);
                                        Columns.Add(TempPackGrid.ColourCode38);
                                        Columns.Add(TempPackGrid.ColourDesc38);
                                        Columns.Add(TempPackGrid.Units38);
                                        Columns.Add(TempPackGrid.ColourCode39);
                                        Columns.Add(TempPackGrid.ColourDesc39);
                                        Columns.Add(TempPackGrid.Units39);
                                        Columns.Add(TempPackGrid.ColourCode40);
                                        Columns.Add(TempPackGrid.ColourDesc40);
                                        Columns.Add(TempPackGrid.Units40);
                                        Columns.Add(TempPackGrid.ColourCode41);
                                        Columns.Add(TempPackGrid.ColourDesc41);
                                        Columns.Add(TempPackGrid.Units41);
                                        Columns.Add(TempPackGrid.ColourCode42);
                                        Columns.Add(TempPackGrid.ColourDesc42);
                                        Columns.Add(TempPackGrid.Units42);
                                        Columns.Add(TempPackGrid.ColourCode43);
                                        Columns.Add(TempPackGrid.ColourDesc43);
                                        Columns.Add(TempPackGrid.Units43);
                                        Columns.Add(TempPackGrid.ColourCode44);
                                        Columns.Add(TempPackGrid.ColourDesc44);
                                        Columns.Add(TempPackGrid.Units44);
                                        Columns.Add(TempPackGrid.ColourCode45);
                                        Columns.Add(TempPackGrid.ColourDesc45);
                                        Columns.Add(TempPackGrid.Units45);
                                        Columns.Add(TempPackGrid.ColourCode46);
                                        Columns.Add(TempPackGrid.ColourDesc46);
                                        Columns.Add(TempPackGrid.Units46);
                                        Columns.Add(TempPackGrid.ColourCode47);
                                        Columns.Add(TempPackGrid.ColourDesc47);
                                        Columns.Add(TempPackGrid.Units47);
                                        Columns.Add(TempPackGrid.ColourCode48);
                                        Columns.Add(TempPackGrid.ColourDesc48);
                                        Columns.Add(TempPackGrid.Units48);
                                        Columns.Add(TempPackGrid.ColourCode49);
                                        Columns.Add(TempPackGrid.ColourDesc49);
                                        Columns.Add(TempPackGrid.Units49);
                                        Columns.Add(TempPackGrid.ColourCode50);
                                        Columns.Add(TempPackGrid.ColourDesc50);
                                        Columns.Add(TempPackGrid.Units50);
                                        Columns.Add(TempPackGrid.ColourCode51);
                                        Columns.Add(TempPackGrid.ColourDesc51);
                                        Columns.Add(TempPackGrid.Units51);
                                        Columns.Add(TempPackGrid.ColourCode52);
                                        Columns.Add(TempPackGrid.ColourDesc52);
                                        Columns.Add(TempPackGrid.Units52);
                                        Columns.Add(TempPackGrid.ColourCode53);
                                        Columns.Add(TempPackGrid.ColourDesc53);
                                        Columns.Add(TempPackGrid.Units53);
                                        Columns.Add(TempPackGrid.ColourCode54);
                                        Columns.Add(TempPackGrid.ColourDesc54);
                                        Columns.Add(TempPackGrid.Units54);
                                        Columns.Add(TempPackGrid.ColourCode55);
                                        Columns.Add(TempPackGrid.ColourDesc55);
                                        Columns.Add(TempPackGrid.Units55);
                                        Columns.Add(TempPackGrid.ColourCode56);
                                        Columns.Add(TempPackGrid.ColourDesc56);
                                        Columns.Add(TempPackGrid.Units56);
                                        Columns.Add(TempPackGrid.ColourCode57);
                                        Columns.Add(TempPackGrid.ColourDesc57);
                                        Columns.Add(TempPackGrid.Units57);
                                        Columns.Add(TempPackGrid.ColourCode58);
                                        Columns.Add(TempPackGrid.ColourDesc58);
                                        Columns.Add(TempPackGrid.Units58);
                                        Columns.Add(TempPackGrid.ColourCode59);
                                        Columns.Add(TempPackGrid.ColourDesc59);
                                        Columns.Add(TempPackGrid.Units59);
                                        Columns.Add(TempPackGrid.ColourCode60);
                                        Columns.Add(TempPackGrid.ColourDesc60);
                                        Columns.Add(TempPackGrid.Units60);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size Colour Cost</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                    }
                                    protected override void OnEnterRow()
                                    {
                                        _parent.vProdColSizePreCalc.Value = 0;
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        // get the correct qty for the colour
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode01)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units01;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode02)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units02;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode03)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units03;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode04)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units04;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode05)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units05;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode06)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units06;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode07)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units07;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode08)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units08;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode09)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units09;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode10)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units10;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode11)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units11;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode12)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units12;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode13)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units13;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode14)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units14;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode15)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units15;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode16)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units16;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode17)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units17;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode18)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units18;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode19)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units19;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode20)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units20;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode21)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units21;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode22)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units22;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode23)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units23;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode24)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units24;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode25)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units25;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode26)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units26;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode27)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units27;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode28)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units28;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode29)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units29;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode30)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units30;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode31)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units31;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode32)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units32;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode33)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units33;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode34)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units34;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode35)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units35;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode36)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units36;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode37)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units37;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode38)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units38;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode39)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units39;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode40)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units40;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode41)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units41;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode42)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units42;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode43)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units43;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode44)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units44;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode45)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units45;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode46)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units46;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode47)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units47;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode48)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units48;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode49)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units49;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode50)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units50;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode51)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units51;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode52)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units52;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode53)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units53;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode54)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units54;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode55)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units55;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode56)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units56;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode57)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units57;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode58)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units58;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode59)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units59;
                                        }
                                        if(_parent.Colour.ColourCode == TempPackGrid.ColourCode60)
                                        {
                                            _parent.vProdColSizePreCalc.Value = TempPackGrid.Units60;
                                        }
                                        // update for col1
                                        // update for column 2 * C&E units
                                        // column 2 will not be printed if garment is not a set or multi
                                        _parent.vCalcdQtyForColumn1.Value = _parent.vProdColSizePreCalc;
                                        _parent.vCalcdQtyForColumn2.Value = _parent.vProdColSizePreCalc * _parent._parent._parent._parent._parent.StyleSpecification.C_E_UNITS_IN_SET_OR_MULTI;
                                        // Total Number of above Labels for Report Footer in Parent Task
                                        _parent._parent.vTotLabsCol1.Value += _parent.vCalcdQtyForColumn1;
                                        _parent._parent.vTotLabsCol2.Value += _parent.vCalcdQtyForColumn2;
                                    }
                                    
                                    
                                }
                                
                                /// <summary>Size Ordered ?(P#400.1.1.1.1.1.1.2)</summary>
                                // Last change before Migration: 23/10/2012 15:38:10
                                class SizeOrdered : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>Order Lot Size Cost</summary>
                                    readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                    #endregion
                                    
                                    ProductSizes _parent;
                                    
                                    
                                    /// <summary>Size Ordered ?(P#400.1.1.1.1.1.1.2)</summary>
                                    public SizeOrdered(ProductSizes parent)
                                    {
                                        _parent = parent;
                                        Title = "Size Ordered ?";
                                        InitializeDataView();
                                    }
                                    void InitializeDataView()
                                    {
                                        From = OrderLotSizeCost;
                                        Where.Add(OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent._parent.Orders.ORDER_NUMBER));
                                        Where.Add(OrderLotSizeCost.ProductNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.PRODUCT_NUMBER));
                                        Where.Add(OrderLotSizeCost.SizeCode.IsEqualTo(_parent.ProductSizes1.SizeCode));
                                        OrderBy = OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1;
                                        
                                        #region Columns
                                        
                                        // only need to check at order level
                                        Columns.Add(OrderLotSizeCost.OrderNumber);
                                        Columns.Add(OrderLotSizeCost.LotNumber);
                                        Columns.Add(OrderLotSizeCost.ProductNumber);
                                        Columns.Add(OrderLotSizeCost.SizeCode);
                                        Columns.Add(OrderLotSizeCost.SizeQuantity);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size Ordered ?</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        KeepChildRelationCacheAlive = true;
                                        KeepViewVisibleAfterExit = true;
                                    }
                                    protected override void OnStart()
                                    {
                                        _parent.vSizeOnOrder.Value = false;
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        if(OrderLotSizeCost.SizeQuantity > 0)
                                        {
                                            _parent.vSizeOnOrder.Value = true;
                                        }
                                    }
                                    
                                    
                                }
                                
                                /// <summary>Size ordered by franchisee(P#400.1.1.1.1.1.1.3)</summary>
                                // Last change before Migration: 25/05/2012 12:15:13
                                class SizeOrderedByFranchisee : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>MOS_FRA_ORDER_PACKS</summary>
                                    readonly Models.MOS_FRA_ORDER_PACKS MOS_FRA_ORDER_PACKS = new Models.MOS_FRA_ORDER_PACKS { ReadOnly = true };
                                    
                                    /// <summary>Packs Make Up</summary>
                                    readonly Models.PacksMakeUp PacksMakeUp = new Models.PacksMakeUp { ReadOnly = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>RC:record found</summary>
                                    readonly BoolColumn RCRecordFound = new BoolColumn("RC:record found");
                                    #endregion
                                    
                                    ProductSizes _parent;
                                    
                                    
                                    /// <summary>Size ordered by franchisee(P#400.1.1.1.1.1.1.3)</summary>
                                    public SizeOrderedByFranchisee(ProductSizes parent)
                                    {
                                        _parent = parent;
                                        Title = "Size ordered by franchisee";
                                        InitializeDataView();
                                    }
                                    void InitializeDataView()
                                    {
                                        From = MOS_FRA_ORDER_PACKS;
                                        Relations.Add(PacksMakeUp, 
                                        		PacksMakeUp.ProductNumber.IsEqualTo(MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER).And(
                                        		PacksMakeUp.PackCode.IsEqualTo(MOS_FRA_ORDER_PACKS.PACK_CODE)).And(
                                        		PacksMakeUp.SizeCode.IsEqualTo(_parent.ProductSizes1.SizeCode)), 
                                        	PacksMakeUp.SortByWAR_Pack_MakeUp_X1);
                                        
                                        Where.Add(MOS_FRA_ORDER_PACKS.FRANCHISEE_ORDER_NUMBER.IsEqualTo(_parent._parent._parent._parent._parent._parent._parent.pFranchiseOrderNumber));
                                        Where.Add(MOS_FRA_ORDER_PACKS.MACKAYS_ORDER_NUMBER.IsEqualTo(_parent._parent._parent._parent._parent._parent._parent.pOrder));
                                        Where.Add(MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER.IsEqualTo(_parent.ProductSizes1.ProductNumber));
                                        Where.Add(MOS_FRA_ORDER_PACKS.QTY_OF_PACKS.IsGreaterOrEqualTo(1));
                                        OrderBy = MOS_FRA_ORDER_PACKS.SortByMOS_FRA_ORDER_PACKS_X1;
                                        
                                        #region Columns
                                        
                                        Columns.Add(MOS_FRA_ORDER_PACKS.FRANCHISEE_ORDER_NUMBER);
                                        Columns.Add(MOS_FRA_ORDER_PACKS.MACKAYS_ORDER_NUMBER);
                                        Columns.Add(MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER);
                                        Columns.Add(MOS_FRA_ORDER_PACKS.PACK_CODE);
                                        Columns.Add(MOS_FRA_ORDER_PACKS.QTY_OF_PACKS);
                                        
                                        Columns.Add(RCRecordFound);
                                        Relations[PacksMakeUp].NotifyRowWasFoundTo(RCRecordFound);
                                        Columns.Add(PacksMakeUp.ProductNumber);
                                        Columns.Add(PacksMakeUp.PackCode);
                                        Columns.Add(PacksMakeUp.ColourCode);
                                        Columns.Add(PacksMakeUp.SizeCode);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size ordered by franchisee</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        Exit(ExitTiming.BeforeRow, () => _parent.vFranchiseeOrderedSize);
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        AllowUserAbort = true;
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        if(RCRecordFound)
                                        {
                                            _parent.vFranchiseeOrderedSize.Value = true;
                                        }
                                    }
                                    
                                    
                                }
                            }
                            
                            /// <summary>Style Instructs(P#400.1.1.1.1.1.2)</summary>
                            // Last change before Migration: 23/10/2012 15:38:17
                            class StyleInstructs : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>Style Instructions</summary>
                                readonly Models.StyleInstructions StyleInstructions = new Models.StyleInstructions { AllowRowLocking = true };
                                
                                /// <summary>Instructions By Type</summary>
                                readonly Models.InstructionsByType InstructionsByType = new Models.InstructionsByType { AllowRowLocking = true };
                                #endregion
                                
                                TillCodes _parent;
                                
                                
                                /// <summary>Style Instructs(P#400.1.1.1.1.1.2)</summary>
                                public StyleInstructs(TillCodes parent)
                                {
                                    _parent = parent;
                                    Title = "Style Instructs";
                                    InitializeDataView();
                                }
                                void InitializeDataView()
                                {
                                    From = StyleInstructions;
                                    Relations.Add(InstructionsByType, 
                                    		InstructionsByType.InstructionType.IsEqualTo(StyleInstructions.StyleInstructionType).And(
                                    		InstructionsByType.InstructionCode.IsEqualTo(StyleInstructions.StyleInstructionCode)), 
                                    	InstructionsByType.SortBySHP_Instructions_By_Type_X1);
                                    
                                    Where.Add(StyleInstructions.StyleCode.IsEqualTo(_parent._parent._parent._parent.ProductsByStyle.StyleCode));
                                    Where.Add(StyleInstructions.StyleInstructionType.IsEqualTo(1));
                                    OrderBy = StyleInstructions.SortBySHP_Style_Instructions_X1;
                                    
                                    #region Columns
                                    
                                    Columns.Add(StyleInstructions.StyleCode);
                                    Columns.Add(StyleInstructions.StyleInstructionType);
                                    Columns.Add(StyleInstructions.StyleInstructionCode);
                                    Columns.Add(InstructionsByType.InstructionType);
                                    Columns.Add(InstructionsByType.InstructionCode);
                                    Columns.Add(InstructionsByType.InstructionText);
                                    #endregion
                                }
                                
                                /// <summary>Style Instructs</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    KeepViewVisibleAfterExit = true;
                                }
                                protected override void OnEnterRow()
                                {
                                    _parent.vStyleInstructsToSupplier.Value = "";
                                }
                                protected override void OnLeaveRow()
                                {
                                    // print on first pass i.e. counter(0)=1
                                    if(Counter == 1)
                                    {
                                        _parent._layout.StyleFurtherReqHed3.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    // will print if any (could be multiple)
                                    _parent.vStyleInstructsToSupplier.Value = InstructionsByType.InstructionText;
                                    _parent._layout.StyleFurtherReqDet3.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    _parent.vStyleInstructsToSupplier.Value = "";
                                }
                                protected override void OnEnd()
                                {
                                    if(Counter > 0)
                                    {
                                        _parent._layout.StyleFurtherReqFoot3.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                }
                                
                                
                            }
                        }
                        
                        /// <summary>Style Other Label(P#400.1.1.1.1.2)</summary>
                        // Last change before Migration: 23/10/2012 15:38:41
                        internal class StyleOtherLabel : Mos.BusinessProcessBase 
                        {
                            
                            #region Models
                            
                            /// <summary>Style Labels</summary>
                            readonly Models.StyleLabels StyleLabels = new Models.StyleLabels { ReadOnly = true };
                            
                            /// <summary>Label Types</summary>
                            readonly Models.LabelTypes LabelTypes = new Models.LabelTypes { ReadOnly = true };
                            #endregion
                            
                            SpecialInstructions _parent;
                            
                            
                            /// <summary>Style Other Label(P#400.1.1.1.1.2)</summary>
                            public StyleOtherLabel(SpecialInstructions parent)
                            {
                                _parent = parent;
                                Title = "Style Other Label";
                                InitializeDataView();
                            }
                            void InitializeDataView()
                            {
                                From = StyleLabels;
                                Relations.Add(LabelTypes, 
                                		LabelTypes.LabelType.IsEqualTo(StyleLabels.LabelType), 
                                	LabelTypes.SortBySHP_Label_Types_X1);
                                
                                Where.Add(StyleLabels.StyleCode.IsEqualTo(_parent._parent._parent.StyleSpecification.STYLE_CODE));
                                OrderBy = StyleLabels.SortBySHP_Style_Labels_X1;
                                
                                #region Columns
                                
                                // check for existence of single and multiple type labels
                                Columns.Add(StyleLabels.StyleCode);
                                Columns.Add(StyleLabels.LabelType);
                                Columns.Add(StyleLabels.LabelCode);
                                Columns.Add(LabelTypes.LabelType);
                                Columns.Add(LabelTypes.LabelTypeDescription);
                                // is this label type to be multiplied by no of pieces in Set or Multiple
                                Columns.Add(LabelTypes.ApplySetOrMultiple);
                                #endregion
                            }
                            
                            /// <summary>Style Other Label</summary>
                            internal void Run()
                            {
                                Execute();
                            }
                            protected override void OnLoad()
                            {
                                TransactionScope = TransactionScopes.Task;
                                Activity = Activities.Browse;
                            }
                            protected override void OnLeaveRow()
                            {
                                // check for existance of label types for label print format
                                if(LabelTypes.ApplySetOrMultiple == " ")
                                {
                                    _parent.vSingleLabelTypeExists.Value = true;
                                }
                                if(LabelTypes.ApplySetOrMultiple == "Y")
                                {
                                    _parent.vMultiLabelTypeExists.Value = true;
                                }
                            }
                            protected override void OnEnd()
                            {
                                // in case there were no spec instructs, create one row on work table
                                // to be used in the print task when printing the label column headers
                                Cached<CreateLabelHeaders>().Run();
                                // if garment is set or multi and multi labels exist
                                if(_parent._parent._parent.vStyleIsSetOrMulti && _parent.vMultiLabelTypeExists)
                                {
                                    Cached<Get1stOf2ColLabs>().Run();
                                }
                                // otherwise
                                // if garment is not set or multi
                                // or
                                // garment is set or multi but multi label types do not exist
                                if(u.Not(_parent._parent._parent.vStyleIsSetOrMulti) || _parent._parent._parent.vStyleIsSetOrMulti && u.Not(_parent.vMultiLabelTypeExists))
                                {
                                    Cached<GetOneColLabs>().Run();
                                }
                                
                                Cached<PrintInstructs>().Run();
                                Cached<PrintLabels>().Run();
                            }
                            
                            
                            
                            /// <summary>Get One Col Labs(P#400.1.1.1.1.2.1)</summary>
                            // Last change before Migration: 23/10/2012 15:38:22
                            class GetOneColLabs : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>Style Labels</summary>
                                readonly Models.StyleLabels StyleLabels = new Models.StyleLabels { ReadOnly = true };
                                
                                /// <summary>General Work File</summary>
                                readonly Models.GeneralWorkFile GeneralWorkFile = new Models.GeneralWorkFile { AllowRowLocking = true };
                                #endregion
                                
                                StyleOtherLabel _parent;
                                
                                
                                /// <summary>Get One Col Labs(P#400.1.1.1.1.2.1)</summary>
                                public GetOneColLabs(StyleOtherLabel parent)
                                {
                                    _parent = parent;
                                    Title = "Get One Col Labs";
                                    InitializeDataView();
                                }
                                void InitializeDataView()
                                {
                                    From = StyleLabels;
                                    Relations.Add(GeneralWorkFile, RelationType.InsertIfNotFound, 
                                    		GeneralWorkFile.UserId.BindEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)).And(
                                    		GeneralWorkFile.Alpha1.BindEqualTo(() => u.Str(Counter + 1, "##"))), 
                                    	GeneralWorkFile.SortBySHP_General_Work_X1);
                                    
                                    Where.Add(StyleLabels.StyleCode.IsEqualTo(_parent._parent._parent._parent.StyleSpecification.STYLE_CODE));
                                    OrderBy = StyleLabels.SortBySHP_Style_Labels_X1;
                                    
                                    #region Columns
                                    
                                    Columns.Add(StyleLabels.StyleCode);
                                    Columns.Add(StyleLabels.LabelType);
                                    Columns.Add(StyleLabels.LabelCode);
                                    
                                    // the work file will at the least have one row containing lnothing
                                    // or special instructions if any (alpha1 seq no = zero)
                                    // add label detail to or create new from row 2
                                    
                                    // locate only on user and seq no > zero in alpha 1
                                    // using num3 and alpha3 as column 1 set of label type and label code
                                    Columns.Add(GeneralWorkFile.UserId);
                                    Columns.Add(GeneralWorkFile.Alpha1);
                                    Columns.Add(GeneralWorkFile.Alpha2);
                                    Columns.Add(GeneralWorkFile.Alpha3);
                                    Columns.Add(GeneralWorkFile.Alpha4);
                                    Columns.Add(GeneralWorkFile.Num3);
                                    #endregion
                                }
                                
                                /// <summary>Get One Col Labs</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    KeepViewVisibleAfterExit = true;
                                }
                                protected override void OnLeaveRow()
                                {
                                    if(_parent._parent._parent._parent._parent._parent.pFranchiseOrder)
                                    {
                                        GeneralWorkFile.Num3.Value = StyleLabels.LabelType;
                                        GeneralWorkFile.Alpha3.Value = StyleLabels.LabelCode;
                                    }
                                    
                                    if(u.Not(_parent._parent._parent._parent._parent._parent.pFranchiseOrder) && StyleLabels.LabelCode != "WL6")
                                    {
                                        GeneralWorkFile.Num3.Value = StyleLabels.LabelType;
                                        GeneralWorkFile.Alpha3.Value = StyleLabels.LabelCode;
                                    }
                                }
                                
                                
                            }
                            
                            /// <summary>Get 1st of 2 Col Labs(P#400.1.1.1.1.2.2)</summary>
                            // Last change before Migration: 23/10/2012 15:38:31
                            class Get1stOf2ColLabs : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>Style Labels</summary>
                                readonly Models.StyleLabels StyleLabels = new Models.StyleLabels { ReadOnly = true };
                                
                                /// <summary>Label Types</summary>
                                readonly Models.LabelTypes LabelTypes = new Models.LabelTypes { ReadOnly = true };
                                
                                /// <summary>General Work File</summary>
                                readonly Models.GeneralWorkFile GeneralWorkFile = new Models.GeneralWorkFile { AllowRowLocking = true };
                                #endregion
                                
                                StyleOtherLabel _parent;
                                
                                
                                /// <summary>Get 1st of 2 Col Labs(P#400.1.1.1.1.2.2)</summary>
                                public Get1stOf2ColLabs(StyleOtherLabel parent)
                                {
                                    _parent = parent;
                                    Title = "Get 1st of 2 Col Labs";
                                    InitializeDataView();
                                }
                                void InitializeDataView()
                                {
                                    From = StyleLabels;
                                    Relations.Add(LabelTypes, 
                                    		LabelTypes.LabelType.IsEqualTo(StyleLabels.LabelType), 
                                    	LabelTypes.SortBySHP_Label_Types_X1);
                                    
                                    Relations.Add(GeneralWorkFile, RelationType.InsertIfNotFound, 
                                    		GeneralWorkFile.UserId.BindEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)).And(
                                    		GeneralWorkFile.Alpha1.BindEqualTo(() => u.Str(Counter + 1, "##"))), 
                                    	GeneralWorkFile.SortBySHP_General_Work_X1);
                                    
                                    Where.Add(StyleLabels.StyleCode.IsEqualTo(_parent._parent._parent._parent.StyleSpecification.STYLE_CODE));
                                    NonDbWhere.Add(LabelTypes.ApplySetOrMultiple.IsEqualTo(" "));
                                    OrderBy = StyleLabels.SortBySHP_Style_Labels_X1;
                                    
                                    #region Columns
                                    
                                    // writes 'single' label detail to temp table if any exist
                                    // generates a seq no in alpha 1 to allow 'multi' lab task to gather
                                    // on same rows
                                    
                                    Columns.Add(StyleLabels.StyleCode);
                                    Columns.Add(StyleLabels.LabelType);
                                    Columns.Add(StyleLabels.LabelCode);
                                    
                                    Columns.Add(LabelTypes.LabelType);
                                    // 'single' types
                                    Columns.Add(LabelTypes.ApplySetOrMultiple);
                                    
                                    // the work file will at the least have one row containing nothing
                                    // or special instructions if any (alpha1 seq no = zero)
                                    // add label detail to or create new from row 2
                                    
                                    // locate only on user and seq no > zero in alpha 1
                                    // using num3 and alpha3 as column 1 set of label type and code if any
                                    Columns.Add(GeneralWorkFile.UserId);
                                    Columns.Add(GeneralWorkFile.Alpha1);
                                    Columns.Add(GeneralWorkFile.Alpha2);
                                    Columns.Add(GeneralWorkFile.Alpha3);
                                    Columns.Add(GeneralWorkFile.Alpha4);
                                    Columns.Add(GeneralWorkFile.Num3);
                                    #endregion
                                }
                                
                                /// <summary>Get 1st of 2 Col Labs</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    RowLocking = LockingStrategy.OnUserEdit;
                                    TransactionScope = TransactionScopes.RowLocking;
                                    KeepViewVisibleAfterExit = true;
                                }
                                protected override void OnLeaveRow()
                                {
                                    if(_parent._parent._parent._parent._parent._parent.pFranchiseOrder)
                                    {
                                        LockCurrentRow();
                                        GeneralWorkFile.Num3.Value = StyleLabels.LabelType;
                                        LockCurrentRow();
                                        GeneralWorkFile.Alpha3.Value = StyleLabels.LabelCode;
                                    }
                                    
                                    if(u.Not(_parent._parent._parent._parent._parent._parent.pFranchiseOrder) && StyleLabels.LabelCode != "WL6")
                                    {
                                        LockCurrentRow();
                                        GeneralWorkFile.Num3.Value = StyleLabels.LabelType;
                                        LockCurrentRow();
                                        GeneralWorkFile.Alpha3.Value = StyleLabels.LabelCode;
                                    }
                                }
                                protected override void OnEnd()
                                {
                                    Cached<Get2ndColLabs>().Run();
                                }
                                
                                
                                
                                /// <summary>Get 2nd Col Labs(P#400.1.1.1.1.2.2.1)</summary>
                                // Last change before Migration: 23/10/2012 15:38:30
                                class Get2ndColLabs : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>Style Labels</summary>
                                    readonly Models.StyleLabels StyleLabels = new Models.StyleLabels { ReadOnly = true };
                                    
                                    /// <summary>Label Types</summary>
                                    readonly Models.LabelTypes LabelTypes = new Models.LabelTypes { ReadOnly = true };
                                    
                                    /// <summary>General Work File</summary>
                                    readonly Models.GeneralWorkFile GeneralWorkFile = new Models.GeneralWorkFile { AllowRowLocking = true };
                                    #endregion
                                    
                                    Get1stOf2ColLabs _parent;
                                    
                                    
                                    /// <summary>Get 2nd Col Labs(P#400.1.1.1.1.2.2.1)</summary>
                                    public Get2ndColLabs(Get1stOf2ColLabs parent)
                                    {
                                        _parent = parent;
                                        Title = "Get 2nd Col Labs";
                                        InitializeDataView();
                                    }
                                    void InitializeDataView()
                                    {
                                        From = StyleLabels;
                                        Relations.Add(LabelTypes, 
                                        		LabelTypes.LabelType.IsEqualTo(StyleLabels.LabelType), 
                                        	LabelTypes.SortBySHP_Label_Types_X1);
                                        
                                        Relations.Add(GeneralWorkFile, RelationType.InsertIfNotFound, 
                                        		GeneralWorkFile.UserId.BindEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)).And(
                                        		GeneralWorkFile.Alpha1.BindEqualTo(() => u.Str(Counter + 1, "##"))), 
                                        	GeneralWorkFile.SortBySHP_General_Work_X1);
                                        
                                        Where.Add(StyleLabels.StyleCode.IsEqualTo(_parent._parent._parent._parent._parent.StyleSpecification.STYLE_CODE));
                                        NonDbWhere.Add(LabelTypes.ApplySetOrMultiple.IsEqualTo("Y"));
                                        OrderBy = StyleLabels.SortBySHP_Style_Labels_X1;
                                        
                                        #region Columns
                                        
                                        // write 'multi' label deatil onto existing rows
                                        Columns.Add(StyleLabels.StyleCode);
                                        Columns.Add(StyleLabels.LabelType);
                                        Columns.Add(StyleLabels.LabelCode);
                                        Columns.Add(LabelTypes.LabelType);
                                        // 'multi' types
                                        Columns.Add(LabelTypes.ApplySetOrMultiple);
                                        
                                        // the work file will at the least have one row containing nothing
                                        // or special instructions if any (alpha1 seq no = zero)
                                        // add label detail to or create new from row 2
                                        
                                        // locate only on user and seq no > zero in alpha 1
                                        // using num4 and alpha4 as column 2 set of label type and label code
                                        Columns.Add(GeneralWorkFile.UserId);
                                        Columns.Add(GeneralWorkFile.Alpha1);
                                        Columns.Add(GeneralWorkFile.Alpha2);
                                        Columns.Add(GeneralWorkFile.Alpha3);
                                        Columns.Add(GeneralWorkFile.Alpha4);
                                        Columns.Add(GeneralWorkFile.Num4);
                                        
                                        #endregion
                                    }
                                    
                                    /// <summary>Get 2nd Col Labs</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnUserEdit;
                                        TransactionScope = TransactionScopes.RowLocking;
                                        KeepViewVisibleAfterExit = true;
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        if(_parent._parent._parent._parent._parent._parent._parent.pFranchiseOrder)
                                        {
                                            LockCurrentRow();
                                            GeneralWorkFile.Num4.Value = StyleLabels.LabelType;
                                            LockCurrentRow();
                                            GeneralWorkFile.Alpha4.Value = StyleLabels.LabelCode;
                                        }
                                        
                                        if(u.Not(_parent._parent._parent._parent._parent._parent._parent.pFranchiseOrder) && StyleLabels.LabelCode != "WL6")
                                        {
                                            LockCurrentRow();
                                            GeneralWorkFile.Num4.Value = StyleLabels.LabelType;
                                            LockCurrentRow();
                                            GeneralWorkFile.Alpha4.Value = StyleLabels.LabelCode;
                                        }
                                    }
                                    
                                    
                                }
                            }
                            
                            /// <summary>Create Label Headers(P#400.1.1.1.1.2.3)</summary>
                            // Last change before Migration: 23/10/2012 15:38:34
                            class CreateLabelHeaders : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>General Work File</summary>
                                readonly Models.GeneralWorkFile GeneralWorkFile = new Models.GeneralWorkFile { AllowRowLocking = true };
                                #endregion
                                
                                
                                /// <summary>Create Label Headers(P#400.1.1.1.1.2.3)</summary>
                                public CreateLabelHeaders()
                                {
                                    Title = "Create Label Headers";
                                    InitializeDataView();
                                }
                                void InitializeDataView()
                                {
                                    Relations.Add(GeneralWorkFile, RelationType.InsertIfNotFound, 
                                    		GeneralWorkFile.UserId.BindEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)).And(
                                    		GeneralWorkFile.Alpha1.BindEqualTo(() => u.Str(Counter, "##"))), 
                                    	GeneralWorkFile.SortBySHP_General_Work_X1);
                                    
                                    
                                    #region Columns
                                    
                                    // to allow label headers to be printed aside special instructions if any
                                    // the first work table row needs to hold the headers but the alpha cols
                                    // are too narrow so, leave alpha3 and 4 blank on the first row
                                    // if there were no special instructions create the row here
                                    // the seq no in alpha1 will be zero
                                    // link on user and alpha1
                                    Columns.Add(GeneralWorkFile.UserId);
                                    Columns.Add(GeneralWorkFile.Alpha1);
                                    Columns.Add(GeneralWorkFile.Alpha2);
                                    Columns.Add(GeneralWorkFile.Alpha3);
                                    Columns.Add(GeneralWorkFile.Alpha4);
                                    
                                    #endregion
                                }
                                
                                /// <summary>Create Label Headers</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    Exit(ExitTiming.AfterRow);
                                    RowLocking = LockingStrategy.OnUserEdit;
                                    TransactionScope = TransactionScopes.RowLocking;
                                    KeepViewVisibleAfterExit = true;
                                }
                                
                                
                            }
                            
                            /// <summary>Print Instructs(P#400.1.1.1.1.2.4)</summary>
                            // Last change before Migration: 23/10/2012 15:38:37
                            internal class PrintInstructs : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>General Work File</summary>
                                readonly Models.GeneralWorkFile GeneralWorkFile = new Models.GeneralWorkFile { AllowRowLocking = true };
                                
                                /// <summary>Care Type Addit Instructs</summary>
                                internal readonly Models.CareTypeAdditInstructs CareTypeAdditInstructs = new Models.CareTypeAdditInstructs { ReadOnly = true };
                                #endregion
                                
                                #region Printing Layouts
                                Printing.OrderPrintPo1537PrintInstructs _layout;
                                #endregion
                                
                                StyleOtherLabel _parent;
                                
                                
                                /// <summary>Print Instructs(P#400.1.1.1.1.2.4)</summary>
                                public PrintInstructs(StyleOtherLabel parent)
                                {
                                    _parent = parent;
                                    Title = "Print Instructs";
                                    InitializeDataView();
                                    _layout = new Printing.OrderPrintPo1537PrintInstructs(this);
                                    _layout.Layouts.Add(_parent._parent._parent._parent._parent._layout);
                                }
                                void InitializeDataView()
                                {
                                    From = GeneralWorkFile;
                                    Relations.Add(CareTypeAdditInstructs, 
                                    		CareTypeAdditInstructs.CareType.IsEqualTo(GeneralWorkFile.Num2).And(
                                    		CareTypeAdditInstructs.SpecialInstructionCode.IsEqualTo(() => u.Val(GeneralWorkFile.Alpha2, "99"))), 
                                    	CareTypeAdditInstructs.SortBySHP_Care_Type_Instructs_X1);
                                    
                                    Where.Add(GeneralWorkFile.UserId.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                    OrderBy = GeneralWorkFile.SortBySHP_General_Work_X1;
                                    
                                    #region Columns
                                    
                                    // the first row may be empty or may contain the first or only special
                                    // instruction
                                    // label headers will be printed during the first row pass
                                    Columns.Add(GeneralWorkFile.UserId);
                                    Columns.Add(GeneralWorkFile.Alpha1);
                                    Columns.Add(GeneralWorkFile.Alpha2);
                                    Columns.Add(GeneralWorkFile.Alpha3);
                                    Columns.Add(GeneralWorkFile.Alpha4);
                                    Columns.Add(GeneralWorkFile.Num2);
                                    Columns.Add(GeneralWorkFile.Num3);
                                    Columns.Add(GeneralWorkFile.Num4);
                                    
                                    // spec instructs
                                    Columns.Add(CareTypeAdditInstructs.CareType);
                                    Columns.Add(CareTypeAdditInstructs.SpecialInstructionCode);
                                    Columns.Add(CareTypeAdditInstructs.InstructionText);
                                    #endregion
                                }
                                
                                /// <summary>Print Instructs</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    TransactionScope = TransactionScopes.RowLocking;
                                    Activity = Activities.Browse;
                                    KeepViewVisibleAfterExit = true;
                                    _layout.Reset();
                                }
                                protected override void OnLeaveRow()
                                {
                                    if(GeneralWorkFile.Alpha2 != "")
                                    {
                                        _layout.PrintInstructs.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                }
                                
                                
                            }
                            
                            /// <summary>Print Labels(P#400.1.1.1.1.2.5)</summary>
                            // Last change before Migration: 23/10/2012 15:38:40
                            internal class PrintLabels : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>General Work File</summary>
                                readonly Models.GeneralWorkFile GeneralWorkFile = new Models.GeneralWorkFile { AllowRowLocking = true };
                                
                                /// <summary>Label Types</summary>
                                readonly Models.LabelTypes LabelTypes = new Models.LabelTypes { ReadOnly = true };
                                
                                /// <summary>Label Codes By Type</summary>
                                readonly Models.LabelCodesByType LabelCodesByType = new Models.LabelCodesByType { ReadOnly = true };
                                
                                /// <summary>Label Types</summary>
                                readonly Models.LabelTypes LabelTypes1 = new Models.LabelTypes { ReadOnly = true };
                                
                                /// <summary>Label Codes By Type</summary>
                                readonly Models.LabelCodesByType LabelCodesByType1 = new Models.LabelCodesByType { ReadOnly = true };
                                #endregion
                                
                                #region Printing Layouts
                                Printing.OrderPrintPo1537PrintLabels _layout;
                                #endregion
                                
                                StyleOtherLabel _parent;
                                
                                
                                /// <summary>Print Labels(P#400.1.1.1.1.2.5)</summary>
                                public PrintLabels(StyleOtherLabel parent)
                                {
                                    _parent = parent;
                                    Title = "Print Labels";
                                    InitializeDataView();
                                    _layout = new Printing.OrderPrintPo1537PrintLabels(this);
                                    _layout.Layouts.Add(_parent._parent._parent._parent._parent._layout);
                                }
                                void InitializeDataView()
                                {
                                    From = GeneralWorkFile;
                                    Relations.Add(LabelTypes, 
                                    		LabelTypes.LabelType.IsEqualTo(GeneralWorkFile.Num3), 
                                    	LabelTypes.SortBySHP_Label_Types_X1);
                                    
                                    Relations.Add(LabelCodesByType, 
                                    		LabelCodesByType.DSSDepartmentCode.IsEqualTo(_parent._parent._parent._parent.StyleSpecification.DSS_DEPARTMENT_CODE).And(
                                    		LabelCodesByType.DSSSubDepartmentCode.IsEqualTo(_parent._parent._parent._parent.StyleSpecification.DSS_SUB_DEPT_CODE)).And(
                                    		LabelCodesByType.DSSSectionCode.IsEqualTo(_parent._parent._parent._parent.StyleSpecification.DSS_SECTION_CODE)).And(
                                    		LabelCodesByType.LabelType.IsEqualTo(GeneralWorkFile.Num3)).And(
                                    		LabelCodesByType.LabelCode.IsEqualTo(GeneralWorkFile.Alpha3)), 
                                    	LabelCodesByType.SortBySHP_Label_Codes_By_Type_X1);
                                    
                                    Relations.Add(LabelTypes1, 
                                    		LabelTypes1.LabelType.IsEqualTo(GeneralWorkFile.Num4), 
                                    	LabelTypes1.SortBySHP_Label_Types_X1);
                                    
                                    Relations.Add(LabelCodesByType1, 
                                    		LabelCodesByType1.DSSDepartmentCode.IsEqualTo(_parent._parent._parent._parent.StyleSpecification.DSS_DEPARTMENT_CODE).And(
                                    		LabelCodesByType1.DSSSubDepartmentCode.IsEqualTo(_parent._parent._parent._parent.StyleSpecification.DSS_SUB_DEPT_CODE)).And(
                                    		LabelCodesByType1.DSSSectionCode.IsEqualTo(_parent._parent._parent._parent.StyleSpecification.DSS_SECTION_CODE)).And(
                                    		LabelCodesByType1.LabelType.IsEqualTo(GeneralWorkFile.Num4)).And(
                                    		LabelCodesByType1.LabelCode.IsEqualTo(GeneralWorkFile.Alpha4)), 
                                    	LabelCodesByType1.SortBySHP_Label_Codes_By_Type_X1);
                                    
                                    Where.Add(GeneralWorkFile.UserId.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                    OrderBy = GeneralWorkFile.SortBySHP_General_Work_X1;
                                    
                                    #region Columns
                                    
                                    // the first row may be empty or may contain the first or only special
                                    // instruction
                                    // label headers will be printed during the first row pass
                                    Columns.Add(GeneralWorkFile.UserId);
                                    Columns.Add(GeneralWorkFile.Alpha1);
                                    Columns.Add(GeneralWorkFile.Alpha2);
                                    Columns.Add(GeneralWorkFile.Alpha3);
                                    Columns.Add(GeneralWorkFile.Alpha4);
                                    Columns.Add(GeneralWorkFile.Num2);
                                    Columns.Add(GeneralWorkFile.Num3);
                                    Columns.Add(GeneralWorkFile.Num4);
                                    
                                    // Label Col 1
                                    Columns.Add(LabelTypes.LabelType);
                                    Columns.Add(LabelTypes.LabelTypeDescription);
                                    
                                    Columns.Add(LabelCodesByType.DSSDepartmentCode);
                                    Columns.Add(LabelCodesByType.DSSSubDepartmentCode);
                                    Columns.Add(LabelCodesByType.DSSSectionCode);
                                    Columns.Add(LabelCodesByType.LabelType);
                                    Columns.Add(LabelCodesByType.LabelCode);
                                    Columns.Add(LabelCodesByType.LabelCodeDescription);
                                    // Label Col 2
                                    Columns.Add(LabelTypes1.LabelType);
                                    Columns.Add(LabelTypes1.LabelTypeDescription);
                                    
                                    Columns.Add(LabelCodesByType1.DSSDepartmentCode);
                                    Columns.Add(LabelCodesByType1.DSSSubDepartmentCode);
                                    Columns.Add(LabelCodesByType1.DSSSectionCode);
                                    Columns.Add(LabelCodesByType1.LabelType);
                                    Columns.Add(LabelCodesByType1.LabelCode);
                                    Columns.Add(LabelCodesByType1.LabelCodeDescription);
                                    #endregion
                                }
                                
                                /// <summary>Print Labels</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    TransactionScope = TransactionScopes.RowLocking;
                                    Activity = Activities.Browse;
                                    KeepViewVisibleAfterExit = true;
                                    _layout.Reset();
                                }
                                protected override void OnLeaveRow()
                                {
                                    if(Counter == 1)
                                    {
                                        _layout.SpaceLine.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    _layout.PrintLabels.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                }
                                
                                #region Expressions
                                internal Bool Exp_1()
                                {
                                    return _parent._parent._parent._parent.vStyleIsSetOrMulti && _parent._parent.vMultiLabelTypeExists;
                                }
                                internal Bool Exp_2()
                                {
                                    return _parent._parent.vSingleLabelTypeExists || _parent._parent.vMultiLabelTypeExists && u.Not(_parent._parent._parent._parent.vStyleIsSetOrMulti);
                                }
                                internal Number Exp_3()
                                {
                                    return u.If(Counter == 1, 133, 132);
                                }
                                internal Text Exp_4()
                                {
                                    return u.If(Counter == 1, "Labels (multiples)", u.Trim(GeneralWorkFile.Alpha4) + " " + u.Trim(LabelCodesByType1.LabelCodeDescription));
                                }
                                internal Text Exp_5()
                                {
                                    return u.If(Counter == 1, "Labels", u.Trim(GeneralWorkFile.Alpha3) + " " + u.Trim(LabelCodesByType.LabelCodeDescription));
                                }
                                #endregion
                                
                                
                            }
                        }
                        
                        /// <summary>Lot Details(P#400.1.1.1.1.3)</summary>
                        // Last change before Migration: 07/02/2013 11:23:56
                        internal class LotDetails : Mos.BusinessProcessBase 
                        {
                            
                            #region Models
                            
                            /// <summary>Lot</summary>
                            internal readonly Models.Lot Lot = new Models.Lot { ReadOnly = true };
                            
                            /// <summary>Transport Codes</summary>
                            internal readonly Models.TransportCodes TransportCodes = new Models.TransportCodes { ReadOnly = true };
                            
                            /// <summary>Order Lot Size Cost</summary>
                            readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                            
                            /// <summary>Port Codes</summary>
                            readonly Models.PortCodes PortCodes = new Models.PortCodes { ReadOnly = true };
                            
                            /// <summary>Delivery Lead Times by Port</summary>
                            readonly Models.DeliveryLeadTimesByPort DeliveryLeadTimesByPort = new Models.DeliveryLeadTimesByPort { ReadOnly = true };
                            #endregion
                            
                            #region Columns
                            
                            /// <summary>v:Cost Diffs Within Lot Found</summary>
                            readonly BoolColumn vCostDiffsWithinLotFound = new BoolColumn("v:Cost Diffs Within Lot Found");
                            
                            /// <summary>p:franchise qty for lot</summary>
                            readonly NumberColumn pFranchiseQtyForLot = new NumberColumn("p:franchise qty for lot", "6");
                            #endregion
                            
                            #region Printing Layouts
                            Printing.OrderPrintPo1537LotDetails _layout;
                            #endregion
                            
                            internal SpecialInstructions _parent;
                            
                            
                            /// <summary>Lot Details(P#400.1.1.1.1.3)</summary>
                            public LotDetails(SpecialInstructions parent)
                            {
                                _parent = parent;
                                Title = "Lot Details";
                                InitializeDataView();
                                _layout = new Printing.OrderPrintPo1537LotDetails(this);
                                _layout.Layouts.Add(_parent._parent._parent._parent._layout);
                            }
                            void InitializeDataView()
                            {
                                From = Lot;
                                Relations.Add(TransportCodes, 
                                		TransportCodes.TransportCode.IsEqualTo(Lot.TRANSPORT_CODE), 
                                	TransportCodes.SortBySHP_Transport_Codes_X1);
                                
                                Relations.Add(OrderLotSizeCost, 
                                		OrderLotSizeCost.OrderNumber.IsEqualTo(Lot.ORDER_NUMBER).And(
                                		OrderLotSizeCost.LotNumber.IsEqualTo(Lot.LOT_NUMBER)).And(
                                		OrderLotSizeCost.ProductNumber.IsEqualTo(_parent._parent._parent.Orders.PRODUCT_NUMBER)), 
                                	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                
                                Relations.Add(PortCodes, 
                                		PortCodes.CEPortCode.IsEqualTo(Lot.CONSIGN_PORT).And(
                                		PortCodes.CountryCode.IsEqualTo(Lot.CONSIGN_COUNTRY)), 
                                	PortCodes.SortBySHP_Ports_X2);
                                
                                Relations.Add(DeliveryLeadTimesByPort, 
                                		DeliveryLeadTimesByPort.PortCode.IsEqualTo(Lot.CONSIGN_PORT).And(
                                		DeliveryLeadTimesByPort.CountryCode.IsEqualTo(Lot.CONSIGN_COUNTRY)).And(
                                		DeliveryLeadTimesByPort.TransportCode.IsEqualTo(Lot.TRANSPORT_CODE)), 
                                	DeliveryLeadTimesByPort.SortBySHP_Lead_Times_By_Port_X2);
                                Relations[DeliveryLeadTimesByPort].BindEnabled(() => u.Trim(Lot.TERMS_OF_DELIVERY) == "FCA");
                                
                                Where.Add(Lot.ORDER_NUMBER.IsEqualTo(_parent._parent._parent._parent.vOrderNumber));
                                NonDbWhere.Add(() => Lot.ORD_LOT_COMPLETE_STATUS != 9);
                                OrderBy = Lot.SortBySHP_LOTS_X1;
                                
                                #region Columns
                                
                                Columns.Add(vCostDiffsWithinLotFound);
                                
                                Columns.Add(Lot.ORDER_NUMBER);
                                Columns.Add(Lot.LOT_NUMBER);
                                Columns.Add(Lot.TOT_SEL_UNITS_PR_LOT);
                                Columns.Add(Lot.SHIPPING_DATE_LATEST);
                                Columns.Add(Lot.DELIVERY_DATE);
                                Columns.Add(Lot.EXTRA_NOTIONAL_COST_STER);
                                Columns.Add(Lot.EXTRA_LEAD_TIME);
                                Columns.Add(Lot.TRANSPORT_CODE);
                                Columns.Add(Lot.CONSIGN_PORT);
                                Columns.Add(Lot.ORD_LOT_COMPLETE_STATUS);
                                
                                Columns.Add(TransportCodes.TransportCode);
                                Columns.Add(TransportCodes.TransportCodeDescr);
                                Columns.Add(Lot.TERMS_OF_DELIVERY);
                                Columns.Add(Lot.CONSIGN_COUNTRY);
                                Columns.Add(OrderLotSizeCost.OrderNumber);
                                Columns.Add(OrderLotSizeCost.LotNumber);
                                Columns.Add(OrderLotSizeCost.ProductNumber);
                                Columns.Add(OrderLotSizeCost.SizeCode);
                                Columns.Add(OrderLotSizeCost.SizeCost);
                                Columns.Add(PortCodes.CEPortCode);
                                Columns.Add(PortCodes.CountryCode);
                                Columns.Add(PortCodes.PortNameDescripion);
                                
                                // Get Consolidator Description if FCA Country
                                Columns.Add(DeliveryLeadTimesByPort.PortCode);
                                Columns.Add(DeliveryLeadTimesByPort.CountryCode);
                                Columns.Add(DeliveryLeadTimesByPort.TransportCode);
                                Columns.Add(DeliveryLeadTimesByPort.Consolidator);
                                
                                Columns.Add(pFranchiseQtyForLot);
                                #endregion
                            }
                            
                            /// <summary>Lot Details</summary>
                            internal void Run()
                            {
                                Execute();
                            }
                            protected override void OnLoad()
                            {
                                TransactionScope = TransactionScopes.Task;
                                _layout.Reset();
                            }
                            protected override void OnStart()
                            {
                                // output for Page 1 only
                                if(_parent._parent._parent._parent.vReportPart == 1)
                                {
                                    _layout.OrderLotHeader1.WriteTo(_parent._parent._parent._parent._ioOrderReport);
                                }
                            }
                            protected override void OnLeaveRow()
                            {
                                // check if any cost diffs between sizes within lot to allow print VAR
                                // instead of cost price on lot line
                                vCostDiffsWithinLotFound.Value = false;
                                Cached<CostDiffsWithinLot>().Run();
                                // output for page 1 only
                                if(u.Not(_parent._parent._parent._parent._parent.pCommitmentOrder))
                                {
                                    ExtraMOSPrograms.CalcFranchiseQtysPo2204.Create().Run(
                                    				Lot.ORDER_NUMBER, 
                                    				Lot.LOT_NUMBER, 
                                    				pFranchiseQtyForLot, 
                                    				_parent._parent._parent._parent._parent.pFranchiseOrderNumber);
                                }
                                if(_parent._parent._parent._parent.vReportPart == 1 && (u.Not(_parent._parent._parent._parent._parent.pFranchiseOrder) && Lot.TOT_SEL_UNITS_PR_LOT > 0 || _parent._parent._parent._parent._parent.pFranchiseOrder && pFranchiseQtyForLot > 0))
                                {
                                    _layout.OrderLotDetails1.WriteTo(_parent._parent._parent._parent._ioOrderReport);
                                }
                            }
                            protected override void OnEnd()
                            {
                                // output for part 1 only
                                if(_parent._parent._parent._parent.vReportPart == 1)
                                {
                                    _layout.OrderLotUnderline1.WriteTo(_parent._parent._parent._parent._ioOrderReport);
                                }
                                // call this task for part 2
                                if(u.Not(_parent._parent._parent._parent._parent.pCommitmentOrder))
                                {
                                    Cached<ClearFranchPackTotals>().Run();
                                }
                                if(u.Not(_parent._parent._parent._parent._parent.pCommitmentOrder))
                                {
                                    Cached<GetFranchPackTotals>().Run();
                                }
                                if(_parent._parent._parent._parent.vReportPart == 2 && _parent._parent._parent.StyleSpecification.DSS_DEPARTMENT_CODE != "4" && u.Not(_parent._parent._parent._parent._parent.pFranchiseOrder))
                                {
                                    Cached<OrderLotPackNOTHOME>().Run();
                                }
                                if(_parent._parent._parent._parent.vReportPart == 2 && _parent._parent._parent.StyleSpecification.DSS_DEPARTMENT_CODE != "4" && _parent._parent._parent._parent._parent.pFranchiseOrder)
                                {
                                    Cached<OrderLotPackNOTHOMEFran>().Run();
                                }
                                if(_parent._parent._parent._parent.vReportPart == 2 && _parent._parent._parent.StyleSpecification.DSS_DEPARTMENT_CODE == "4" && u.Not(_parent._parent._parent._parent._parent.pFranchiseOrder))
                                {
                                    Cached<OrderLotPackHOME>().Run();
                                }
                                if(_parent._parent._parent._parent.vReportPart == 2 && _parent._parent._parent.StyleSpecification.DSS_DEPARTMENT_CODE == "4" && _parent._parent._parent._parent._parent.pFranchiseOrder)
                                {
                                    Cached<OrderLotPackHOMEFran>().Run();
                                }
                                // call this task for part 1 only if an order with no size cost diffs
                                if(_parent._parent._parent._parent.vReportPart == 1 && u.Not(_parent._parent._parent._parent.vCostDiffTweenLotsFound) && u.Not(_parent._parent._parent._parent.vReportType == "P" && _parent._parent._parent._parent._parent.pCommitmentOrder))
                                {
                                    Cached<SzColCst15Same>().Run();
                                }
                                // call this taskl for part 1 only if an order with size cost diffs
                                if(_parent._parent._parent._parent.vReportPart == 1 && _parent._parent._parent._parent.vCostDiffTweenLotsFound && u.Not(_parent._parent._parent._parent.vReportType == "P" && _parent._parent._parent._parent._parent.pCommitmentOrder))
                                {
                                    Cached<SizeCostDiffs>().Run();
                                }
                                // call for proforma
                                if(_parent._parent._parent._parent.vReportType == "P")
                                {
                                    Cached<ProformaPrint>().Run();
                                }
                            }
                            
                            #region Expressions
                            internal Bool Exp_1()
                            {
                                return _parent._parent._parent.vUKForeignSupplier == "011" || _parent._parent._parent.Orders.TERMS_OF_DELIVERY == "FD" || _parent._parent._parent.vUKForeignSupplier == "014" && _parent._parent._parent._parent._parent.vCopyFor == "DEPT COPY";
                            }
                            internal Text Exp_4()
                            {
                                return u.If(u.Not(vCostDiffsWithinLotFound), u.Str(OrderLotSizeCost.SizeCost, "######.##"), "VAR");
                            }
                            internal Bool Exp_5()
                            {
                                return _parent._parent._parent.vUKForeignSupplier != "014";
                            }
                            internal Bool Exp_6()
                            {
                                return _parent._parent._parent.vUKForeignSupplier == "014";
                            }
                            internal Bool Exp_7()
                            {
                                return _parent._parent._parent.vUKForeignSupplier == "014" && u.Not(_parent._parent._parent._parent._parent.pCommitmentOrder);
                            }
                            internal Bool Exp_8()
                            {
                                return _parent._parent._parent.vUKForeignSupplier == "014" && _parent._parent._parent._parent._parent.pCommitmentOrder;
                            }
                            internal Bool Exp_9()
                            {
                                return _parent._parent._parent.vUKForeignSupplier == "014" && _parent._parent._parent.Orders.TERMS_OF_DELIVERY != "FD";
                            }
                            internal Bool Exp_10()
                            {
                                return _parent._parent._parent._parent._parent.pReportType != "O" || _parent._parent._parent._parent._parent.pReportType == "O" && _parent._parent._parent.vUKForeignSupplier == "014" && _parent._parent._parent.Orders.TERMS_OF_DELIVERY != "FD";
                            }
                            internal Number Exp_12()
                            {
                                return u.If(_parent._parent._parent.vUKForeignSupplier == "014", 157.25, 59.5);
                            }
                            internal Bool Exp_29()
                            {
                                return _parent._parent._parent.vUKForeignSupplier == "014" && Lot.TERMS_OF_DELIVERY != "FD";
                            }
                            internal Text Exp_30()
                            {
                                return "Inchinnan";
                            }
                            internal Text Exp_32()
                            {
                                return u.If(u.Trim(Lot.TERMS_OF_DELIVERY) == "FCA", u.Trim(DeliveryLeadTimesByPort.Consolidator), u.If(u.Trim(Lot.TERMS_OF_DELIVERY) == "DDP", " Mackays Stores, Inchinnan, UK", PortCodes.PortNameDescripion));
                            }
                            internal Number Exp_33()
                            {
                                return u.If(_parent._parent._parent._parent._parent.pFranchiseOrder, pFranchiseQtyForLot, Lot.TOT_SEL_UNITS_PR_LOT - pFranchiseQtyForLot);
                            }
                            #endregion
                            
                            
                            
                            /// <summary>Order Lot Pack - NOT HOME(P#400.1.1.1.1.3.1)</summary>
                            // Last change before Migration: 25/01/2013 14:12:58
                            internal class OrderLotPackNOTHOME : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>Order Lot Packs</summary>
                                internal readonly Models.OrderLotPacks OrderLotPacks = new Models.OrderLotPacks { ReadOnly = true };
                                
                                /// <summary>Lot</summary>
                                readonly Models.Lot Lot = new Models.Lot { ReadOnly = true };
                                
                                /// <summary>Style Labels</summary>
                                readonly Models.StyleLabels StyleLabels = new Models.StyleLabels { ReadOnly = true };
                                #endregion
                                
                                #region Columns
                                
                                /// <summary>v:Footer Total Items Order Pack</summary>
                                readonly NumberColumn vFooterTotalItemsOrderPack = new NumberColumn("v:Footer Total Items Order Pack", "6");
                                
                                /// <summary>v:Footer Total Pack Make Up</summary>
                                readonly NumberColumn vFooterTotalPackMakeUp = new NumberColumn("v:Footer Total Pack Make Up", "6");
                                
                                /// <summary>v:Footer total Items FRA</summary>
                                readonly NumberColumn vFooterTotalItemsFRA = new NumberColumn("v:Footer total Items FRA", "6");
                                
                                /// <summary>RC:W3 label exists</summary>
                                readonly BoolColumn RCW3LabelExists = new BoolColumn("RC:W3 label exists");
                                #endregion
                                
                                #region Printing Layouts
                                Printing.OrderPrintPo1537OrderLotPackNOTHOME _layout;
                                #endregion
                                
                                LotDetails _parent;
                                
                                
                                /// <summary>Order Lot Pack - NOT HOME(P#400.1.1.1.1.3.1)</summary>
                                public OrderLotPackNOTHOME(LotDetails parent)
                                {
                                    _parent = parent;
                                    Title = "Order Lot Pack - NOT HOME";
                                    InitializeDataView();
                                    _layout = new Printing.OrderPrintPo1537OrderLotPackNOTHOME(this);
                                    _layout.Layouts.Add(_parent._parent._parent._parent._parent._layout);
                                }
                                void InitializeDataView()
                                {
                                    From = OrderLotPacks;
                                    Relations.Add(Lot, 
                                    		Lot.ORDER_NUMBER.IsEqualTo(_parent._parent._parent._parent._parent.vOrderNumber).And(
                                    		Lot.LOT_NUMBER.IsEqualTo(OrderLotPacks.LotNumber)), 
                                    	Lot.SortBySHP_LOTS_X1);
                                    
                                    Relations.Add(StyleLabels, 
                                    		StyleLabels.StyleCode.IsEqualTo(_parent._parent._parent._parent.StyleSpecification.STYLE_CODE).And(
                                    		StyleLabels.LabelType.IsEqualTo(3)).And(
                                    		StyleLabels.LabelCode.IsEqualTo("W3")), 
                                    	StyleLabels.SortBySHP_Style_Labels_X1);
                                    
                                    Where.Add(OrderLotPacks.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.vOrderNumber));
                                    OrderBy = OrderLotPacks.SortBySHP_Order_Lot_Packs_X1;
                                    
                                    #region Columns
                                    
                                    Columns.Add(OrderLotPacks.OrderNumber);
                                    Columns.Add(OrderLotPacks.LotNumber);
                                    // Delivery Date for Lot. Moved to this level because this task called in
                                    // TS instead of RS as was before
                                    Columns.Add(Lot.ORDER_NUMBER);
                                    Columns.Add(Lot.LOT_NUMBER);
                                    Columns.Add(Lot.SHIPPING_DATE_LATEST);
                                    Columns.Add(Lot.ORD_LOT_COMPLETE_STATUS);
                                    // OR FOR FD AND DOMESTIC DELIVERY DATE
                                    Columns.Add(Lot.DELIVERY_DATE);
                                    
                                    Columns.Add(OrderLotPacks.ProductNumber);
                                    Columns.Add(OrderLotPacks.PackType);
                                    Columns.Add(OrderLotPacks.AssortmentCode);
                                    Columns.Add(OrderLotPacks.PackCode);
                                    Columns.Add(OrderLotPacks.QuantityInPack);
                                    Columns.Add(OrderLotPacks.QuantityOfPack);
                                    // Footer Totals fot Line Totals, 'Total Items' & 'Total Items' on Print
                                    Columns.Add(vFooterTotalItemsOrderPack);
                                    Columns.Add(vFooterTotalPackMakeUp);
                                    Columns.Add(vFooterTotalItemsFRA);
                                    
                                    Columns.Add(RCW3LabelExists);
                                    Relations[StyleLabels].NotifyRowWasFoundTo(RCW3LabelExists);
                                    Columns.Add(StyleLabels.StyleCode);
                                    Columns.Add(StyleLabels.LabelType);
                                    Columns.Add(StyleLabels.LabelCode);
                                    #endregion
                                }
                                
                                /// <summary>Order Lot Pack - NOT HOME</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    TransactionScope = TransactionScopes.Task;
                                    _layout.Reset();
                                }
                                protected override void OnStart()
                                {
                                    // header for part 1
                                    if(Exp_4())
                                    {
                                        _layout.OrderLotPackPolybagWarning.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    if(Exp_4())
                                    {
                                        _layout.OrderLotPackHeader2.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                }
                                protected override void OnLeaveRow()
                                {
                                    // detail for part 2
                                    u.DBDel(typeof(Models.WorkPacksMakeup), "");
                                    if(Exp_4())
                                    {
                                        Cached<SeqPackMakeup>().Run();
                                    }
                                }
                                protected override void OnEnd()
                                {
                                    // footer for part 2
                                    ExtraMOSPrograms.CalcFranchiseQtysPo2204.Create().Run(
                                    				_parent._parent._parent._parent._parent._parent.pOrder, 
                                    				"", 
                                    				vFooterTotalItemsFRA, 
                                    				0);
                                    if(Exp_4())
                                    {
                                        _layout.OrderLotPackFooter.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                }
                                
                                #region Expressions
                                internal Text Exp_1()
                                {
                                    return u.If(_parent._parent._parent._parent.vUKForeignSupplier == "014" && _parent._parent._parent._parent.Orders.TERMS_OF_DELIVERY != "FD", "Shipment", "Delivery");
                                }
                                internal Bool Exp_3()
                                {
                                    return _parent._parent._parent._parent._parent.vReportType != "L" && u.Not(_parent._parent._parent._parent.vProdIsSect4N4) && u.Not(_parent._parent._parent._parent.vProdIsSect4N7);
                                }
                                Bool Exp_4()
                                {
                                    return _parent._parent._parent._parent._parent.vReportPart == 2 && Lot.ORD_LOT_COMPLETE_STATUS != 9;
                                }
                                internal Number Exp_12()
                                {
                                    return vFooterTotalItemsOrderPack - vFooterTotalItemsFRA;
                                }
                                internal Number Exp_13()
                                {
                                    return vFooterTotalPackMakeUp - vFooterTotalItemsFRA;
                                }
                                #endregion
                                
                                
                                
                                /// <summary>Seq Pack Makeup(P#400.1.1.1.1.3.1.1)</summary>
                                // Last change before Migration: 25/01/2013 14:12:58
                                internal class SeqPackMakeup : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>Packs Make Up</summary>
                                    readonly Models.PacksMakeUp PacksMakeUp = new Models.PacksMakeUp { ReadOnly = true };
                                    
                                    /// <summary>Product Sizes</summary>
                                    readonly Models.ProductSizes ProductSizes = new Models.ProductSizes { KeepCacheAliveAfterExit = true, ReadOnly = true };
                                    
                                    /// <summary>Work Packs Makeup</summary>
                                    readonly Models.WorkPacksMakeup WorkPacksMakeup = new Models.WorkPacksMakeup { KeepCacheAliveAfterExit = true, AllowRowLocking = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Franch Pack Item Qty Total</summary>
                                    readonly NumberColumn vFranchPackItemQtyTotal = new NumberColumn("v:Franch Pack Item Qty Total", "6");
                                    #endregion
                                    
                                    internal OrderLotPackNOTHOME _parent;
                                    
                                    
                                    /// <summary>Seq Pack Makeup(P#400.1.1.1.1.3.1.1)</summary>
                                    public SeqPackMakeup(OrderLotPackNOTHOME parent)
                                    {
                                        _parent = parent;
                                        Title = "Seq Pack Makeup";
                                        InitializeDataView();
                                    }
                                    void InitializeDataView()
                                    {
                                        From = PacksMakeUp;
                                        Relations.Add(ProductSizes, 
                                        		ProductSizes.ProductNumber.IsEqualTo(PacksMakeUp.ProductNumber).And(
                                        		ProductSizes.SizeCode.IsEqualTo(PacksMakeUp.SizeCode)), 
                                        	ProductSizes.SortBySHP_Product_Sizes_X1);
                                        
                                        Relations.Add(WorkPacksMakeup, RelationType.Insert, 
                                        		WorkPacksMakeup.ProductNumber.BindEqualTo(PacksMakeUp.ProductNumber).And(
                                        		WorkPacksMakeup.PackCode.BindEqualTo(PacksMakeUp.PackCode)).And(
                                        		WorkPacksMakeup.ColourCode.BindEqualTo(PacksMakeUp.ColourCode)).And(
                                        		WorkPacksMakeup.SizeRelPosition.BindEqualTo(ProductSizes.SizeRelativePosition)), 
                                        	WorkPacksMakeup.SortBySHP_Work_Packs_Makeup_X1);
                                        
                                        Where.Add(PacksMakeUp.ProductNumber.IsEqualTo(_parent.OrderLotPacks.ProductNumber));
                                        Where.Add(PacksMakeUp.PackCode.IsEqualTo(_parent.OrderLotPacks.PackCode));
                                        OrderBy = PacksMakeUp.SortByWAR_Pack_MakeUp_X1;
                                        
                                        #region Columns
                                        
                                        Columns.Add(PacksMakeUp.ProductNumber);
                                        Columns.Add(PacksMakeUp.PackCode);
                                        Columns.Add(PacksMakeUp.ColourCode);
                                        Columns.Add(PacksMakeUp.SizeCode);
                                        Columns.Add(PacksMakeUp.ItemsInPack);
                                        
                                        Columns.Add(ProductSizes.ProductNumber);
                                        Columns.Add(ProductSizes.SizeCode);
                                        Columns.Add(ProductSizes.SizeRelativePosition);
                                        
                                        Columns.Add(WorkPacksMakeup.ProductNumber);
                                        Columns.Add(WorkPacksMakeup.PackCode);
                                        Columns.Add(WorkPacksMakeup.ColourCode);
                                        Columns.Add(WorkPacksMakeup.SizeCode).BindValue(PacksMakeUp.SizeCode);
                                        Columns.Add(WorkPacksMakeup.SizeRelPosition);
                                        Columns.Add(WorkPacksMakeup.ItemsInPack).BindValue(PacksMakeUp.ItemsInPack);
                                        
                                        Columns.Add(vFranchPackItemQtyTotal);
                                        #endregion
                                    }
                                    
                                    /// <summary>Seq Pack Makeup</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnUserEdit;
                                        TransactionScope = TransactionScopes.RowLocking;
                                        KeepChildRelationCacheAlive = true;
                                        KeepViewVisibleAfterExit = true;
                                    }
                                    protected override void OnEnd()
                                    {
                                        Cached<GetPackItemQtyTotal>().Run();
                                        Cached<PackMakeUp>().Run();
                                    }
                                    
                                    
                                    
                                    /// <summary>Get Pack Item Qty Total(P#400.1.1.1.1.3.1.1.1)</summary>
                                    // Last change before Migration: 01/06/2012 11:47:42
                                    class GetPackItemQtyTotal : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Franch Pack Totals Wrk</summary>
                                        readonly Models.FranchPackTotalsWrk FranchPackTotalsWrk = new Models.FranchPackTotalsWrk { AllowRowLocking = true };
                                        #endregion
                                        
                                        SeqPackMakeup _parent;
                                        
                                        
                                        /// <summary>Get Pack Item Qty Total(P#400.1.1.1.1.3.1.1.1)</summary>
                                        public GetPackItemQtyTotal(SeqPackMakeup parent)
                                        {
                                            _parent = parent;
                                            Title = "Get Pack Item Qty Total";
                                            InitializeDataView();
                                        }
                                        void InitializeDataView()
                                        {
                                            From = FranchPackTotalsWrk;
                                            Where.Add(FranchPackTotalsWrk.OrderNumber.IsEqualTo(_parent._parent.OrderLotPacks.OrderNumber));
                                            Where.Add(FranchPackTotalsWrk.LotNumber.IsEqualTo(_parent._parent.OrderLotPacks.LotNumber));
                                            Where.Add(FranchPackTotalsWrk.PackCode.IsEqualTo(_parent._parent.OrderLotPacks.PackCode));
                                            OrderBy = FranchPackTotalsWrk.SortByMOS_FRA_PACK_TOTALS_X1;
                                            
                                            #region Columns
                                            
                                            Columns.Add(FranchPackTotalsWrk.OrderNumber);
                                            Columns.Add(FranchPackTotalsWrk.LotNumber);
                                            Columns.Add(FranchPackTotalsWrk.PackCode);
                                            Columns.Add(FranchPackTotalsWrk.ItemsInPack);
                                            #endregion
                                        }
                                        
                                        /// <summary>Get Pack Item Qty Total</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            AllowUserAbort = true;
                                        }
                                        protected override void OnStart()
                                        {
                                            _parent.vFranchPackItemQtyTotal.Value = 0;
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            _parent.vFranchPackItemQtyTotal.Value += FranchPackTotalsWrk.ItemsInPack;
                                        }
                                        
                                        
                                    }
                                    
                                    /// <summary>Pack Make Up(P#400.1.1.1.1.3.1.1.2)</summary>
                                    // Last change before Migration: 25/01/2013 14:12:58
                                    internal class PackMakeUp : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Packs Makeup</summary>
                                        internal readonly Models.WorkPacksMakeup WorkPacksMakeup = new Models.WorkPacksMakeup { AllowRowLocking = true };
                                        
                                        /// <summary>Colour</summary>
                                        internal readonly Models.Colour Colour = new Models.Colour { ReadOnly = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Products By Style</summary>
                                        readonly Models.ProductsByStyle ProductsByStyle = new Models.ProductsByStyle { ReadOnly = true };
                                        
                                        /// <summary>Style Specification</summary>
                                        readonly Models.StyleSpecification StyleSpecification = new Models.StyleSpecification { ReadOnly = true };
                                        
                                        /// <summary>Franch Pack Totals Wrk</summary>
                                        readonly Models.FranchPackTotalsWrk FranchPackTotalsWrk = new Models.FranchPackTotalsWrk { ReadOnly = true };
                                        
                                        /// <summary>Product Pack Codes</summary>
                                        internal readonly Models.ProductPackCodes ProductPackCodes = new Models.ProductPackCodes { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Items Order Pack</summary>
                                        readonly NumberColumn vTotalItemsOrderPack = new NumberColumn("v:Total Items Order Pack", "6");
                                        
                                        /// <summary>v:Total Items Pack Make Up</summary>
                                        readonly NumberColumn vTotalItemsPackMakeUp = new NumberColumn("v:Total Items Pack Make Up", "6");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537PackMakeUp _layout;
                                        #endregion
                                        
                                        internal SeqPackMakeup _parent;
                                        
                                        
                                        /// <summary>Pack Make Up(P#400.1.1.1.1.3.1.1.2)</summary>
                                        public PackMakeUp(SeqPackMakeup parent)
                                        {
                                            _parent = parent;
                                            Title = "Pack Make Up";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537PackMakeUp(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                            _layout.Layouts.Add(_parent._parent._layout);
                                            var WorkPacksMakeupPackCodeGroup = Groups.Add(WorkPacksMakeup.PackCode);
                                            WorkPacksMakeupPackCodeGroup.Leave += WorkPacksMakeupPackCodeGroup_Leave;
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkPacksMakeup;
                                            Relations.Add(Colour, 
                                            		Colour.ColourCode.IsEqualTo(WorkPacksMakeup.ColourCode), 
                                            	Colour.SortByREF_Colour_X1);
                                            
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkPacksMakeup.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(ProductsByStyle, 
                                            		ProductsByStyle.ProductNumber.IsEqualTo(WorkPacksMakeup.ProductNumber), 
                                            	ProductsByStyle.SortBySHP_Products_By_Style_X2);
                                            
                                            Relations.Add(StyleSpecification, 
                                            		StyleSpecification.STYLE_CODE.IsEqualTo(ProductsByStyle.StyleCode), 
                                            	StyleSpecification.SortBySHP_STYLE_SPECIFICATION_X1);
                                            
                                            Relations.Add(FranchPackTotalsWrk, 
                                            		FranchPackTotalsWrk.OrderNumber.IsEqualTo(_parent._parent.OrderLotPacks.OrderNumber).And(
                                            		FranchPackTotalsWrk.LotNumber.IsEqualTo(_parent._parent.OrderLotPacks.LotNumber)).And(
                                            		FranchPackTotalsWrk.PackCode.IsEqualTo(_parent._parent.OrderLotPacks.PackCode)).And(
                                            		FranchPackTotalsWrk.ColourCode.IsEqualTo(WorkPacksMakeup.ColourCode)).And(
                                            		FranchPackTotalsWrk.SizeCode.IsEqualTo(WorkPacksMakeup.SizeCode)), 
                                            	FranchPackTotalsWrk.SortByMOS_FRA_PACK_TOTALS_X1);
                                            
                                            Relations.Add(ProductPackCodes, 
                                            		ProductPackCodes.ProductNumber.IsEqualTo(_parent._parent.OrderLotPacks.ProductNumber).And(
                                            		ProductPackCodes.PackCode.IsEqualTo(_parent._parent.OrderLotPacks.PackCode)), 
                                            	ProductPackCodes.SortBySHP_Product_Pack_Codes_X2);
                                            
                                            Where.Add(WorkPacksMakeup.ProductNumber.IsEqualTo(_parent._parent.OrderLotPacks.ProductNumber));
                                            Where.Add(WorkPacksMakeup.PackCode.IsEqualTo(_parent._parent.OrderLotPacks.PackCode));
                                            OrderBy = WorkPacksMakeup.SortBySHP_Work_Packs_Makeup_X1;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkPacksMakeup.ProductNumber);
                                            Columns.Add(WorkPacksMakeup.PackCode);
                                            Columns.Add(WorkPacksMakeup.ColourCode);
                                            Columns.Add(Colour.ColourCode);
                                            Columns.Add(Colour.ColourDescription);
                                            Columns.Add(WorkPacksMakeup.SizeCode);
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            Columns.Add(WorkPacksMakeup.SizeRelPosition);
                                            Columns.Add(WorkPacksMakeup.ItemsInPack);
                                            // virtuals to calculate total items from Order Pack and Pack Make Up
                                            Columns.Add(vTotalItemsOrderPack);
                                            Columns.Add(vTotalItemsPackMakeUp);
                                            
                                            Columns.Add(ProductsByStyle.ProductNumber);
                                            Columns.Add(ProductsByStyle.StyleCode);
                                            
                                            Columns.Add(StyleSpecification.STYLE_CODE);
                                            Columns.Add(StyleSpecification.POLYBAG_MULTI_PACKS);
                                            
                                            Columns.Add(FranchPackTotalsWrk.OrderNumber);
                                            Columns.Add(FranchPackTotalsWrk.ProductNumber);
                                            Columns.Add(FranchPackTotalsWrk.LotNumber);
                                            Columns.Add(FranchPackTotalsWrk.PackCode);
                                            Columns.Add(FranchPackTotalsWrk.ColourCode);
                                            Columns.Add(FranchPackTotalsWrk.SizeCode);
                                            Columns.Add(FranchPackTotalsWrk.PackQty);
                                            Columns.Add(FranchPackTotalsWrk.ItemsInPack);
                                            
                                            Columns.Add(ProductPackCodes.ProductNumber);
                                            Columns.Add(ProductPackCodes.PackCode);
                                            Columns.Add(ProductPackCodes.PolyBag);
                                            #endregion
                                        }
                                        
                                        /// <summary>Pack Make Up</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnEnterRow()
                                        {
                                            vTotalItemsOrderPack.Value = 0;
                                            vTotalItemsPackMakeUp.Value = 0;
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalItemsOrderPack.Value = _parent._parent.OrderLotPacks.QuantityOfPack * _parent._parent.OrderLotPacks.QuantityInPack;
                                            vTotalItemsPackMakeUp.Value = _parent._parent.OrderLotPacks.QuantityOfPack * WorkPacksMakeup.ItemsInPack;
                                            // Update Footer Totals in Parent with 'Total Item' Line Totals on Print
                                            _parent._parent.vFooterTotalPackMakeUp.Value += vTotalItemsPackMakeUp;
                                            _parent._parent.vFooterTotalItemsOrderPack.Value = _parent._parent.vFooterTotalPackMakeUp;
                                            // Output each line of the Pack Make Up Report
                                            if(_parent._parent.OrderLotPacks.QuantityOfPack > 0)
                                            {
                                                _layout.PackMakeUp2.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        void WorkPacksMakeupPackCodeGroup_Leave()
                                        {
                                            // Output a line after each change of PAck Code if the quantity for
                                            // the Pack Code is greater than 0
                                            if(_parent._parent.OrderLotPacks.QuantityOfPack > 0)
                                            {
                                                _layout.PackCodeDividingLine.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_1()
                                        {
                                            return _parent._parent._parent._parent._parent._parent._parent._parent.pReportType == "L";
                                        }
                                        internal Date Exp_2()
                                        {
                                            return u.If(_parent._parent._parent._parent._parent._parent.vUKForeignSupplier == "014" && _parent._parent._parent._parent._parent._parent.Orders.TERMS_OF_DELIVERY != "FD", _parent._parent.Lot.SHIPPING_DATE_LATEST, _parent._parent.Lot.DELIVERY_DATE);
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return Counter == 1;
                                        }
                                        internal Text Exp_12()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        internal Bool Exp_15()
                                        {
                                            return (u.Not(_parent._parent.RCW3LabelExists) || _parent._parent.OrderLotPacks.QuantityInPack > 1) && Counter == 1;
                                        }
                                        internal Number Exp_23()
                                        {
                                            return _parent._parent.OrderLotPacks.QuantityOfPack - FranchPackTotalsWrk.PackQty;
                                        }
                                        internal Number Exp_24()
                                        {
                                            return vTotalItemsOrderPack - _parent.vFranchPackItemQtyTotal;
                                        }
                                        internal Number Exp_25()
                                        {
                                            return vTotalItemsPackMakeUp - FranchPackTotalsWrk.ItemsInPack;
                                        }
                                        #endregion
                                        
                                        
                                    }
                                }
                            }
                            
                            /// <summary>Order Lot Pack - NOT HOME fran(P#400.1.1.1.1.3.2)</summary>
                            // Last change before Migration: 25/01/2013 14:13:00
                            internal class OrderLotPackNOTHOMEFran : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>MOS_FRA_ORDER_PACKS</summary>
                                internal readonly Models.MOS_FRA_ORDER_PACKS MOS_FRA_ORDER_PACKS = new Models.MOS_FRA_ORDER_PACKS { ReadOnly = true };
                                
                                /// <summary>Lot</summary>
                                readonly Models.Lot Lot = new Models.Lot { ReadOnly = true };
                                
                                /// <summary>Style Labels</summary>
                                readonly Models.StyleLabels StyleLabels = new Models.StyleLabels { ReadOnly = true };
                                
                                /// <summary>Order Lot Packs</summary>
                                internal readonly Models.OrderLotPacks OrderLotPacks = new Models.OrderLotPacks { ReadOnly = true };
                                #endregion
                                
                                #region Columns
                                
                                /// <summary>v:Footer Total Items Order Pack</summary>
                                internal readonly NumberColumn vFooterTotalItemsOrderPack = new NumberColumn("v:Footer Total Items Order Pack", "6");
                                
                                /// <summary>v:Footer Total Pack Make Up</summary>
                                internal readonly NumberColumn vFooterTotalPackMakeUp = new NumberColumn("v:Footer Total Pack Make Up", "6");
                                
                                /// <summary>RC:W3 label exists</summary>
                                readonly BoolColumn RCW3LabelExists = new BoolColumn("RC:W3 label exists");
                                #endregion
                                
                                #region Printing Layouts
                                Printing.OrderPrintPo1537OrderLotPackNOTHOMEFran _layout;
                                #endregion
                                
                                LotDetails _parent;
                                
                                
                                /// <summary>Order Lot Pack - NOT HOME fran(P#400.1.1.1.1.3.2)</summary>
                                public OrderLotPackNOTHOMEFran(LotDetails parent)
                                {
                                    _parent = parent;
                                    Title = "Order Lot Pack - NOT HOME fran";
                                    InitializeDataView();
                                    _layout = new Printing.OrderPrintPo1537OrderLotPackNOTHOMEFran(this);
                                    _layout.Layouts.Add(_parent._parent._parent._parent._parent._layout);
                                }
                                void InitializeDataView()
                                {
                                    From = MOS_FRA_ORDER_PACKS;
                                    Relations.Add(Lot, 
                                    		Lot.ORDER_NUMBER.IsEqualTo(_parent._parent._parent._parent._parent.vOrderNumber).And(
                                    		Lot.LOT_NUMBER.IsEqualTo(MOS_FRA_ORDER_PACKS.LOT_NUMBER)), 
                                    	Lot.SortBySHP_LOTS_X1);
                                    
                                    Relations.Add(StyleLabels, 
                                    		StyleLabels.StyleCode.IsEqualTo(_parent._parent._parent._parent.StyleSpecification.STYLE_CODE).And(
                                    		StyleLabels.LabelType.IsEqualTo(3)).And(
                                    		StyleLabels.LabelCode.IsEqualTo("W3")), 
                                    	StyleLabels.SortBySHP_Style_Labels_X1);
                                    
                                    Relations.Add(OrderLotPacks, 
                                    		OrderLotPacks.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.vOrderNumber).And(
                                    		OrderLotPacks.LotNumber.IsEqualTo(MOS_FRA_ORDER_PACKS.LOT_NUMBER)).And(
                                    		OrderLotPacks.ProductNumber.IsEqualTo(MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER)).And(
                                    		OrderLotPacks.PackCode.IsEqualTo(MOS_FRA_ORDER_PACKS.PACK_CODE)), 
                                    	OrderLotPacks.SortBySHP_Order_Lot_Packs_X1);
                                    
                                    Where.Add(MOS_FRA_ORDER_PACKS.FRANCHISEE_ORDER_NUMBER.IsEqualTo(_parent._parent._parent._parent._parent._parent.pFranchiseOrderNumber));
                                    Where.Add(MOS_FRA_ORDER_PACKS.MACKAYS_ORDER_NUMBER.IsEqualTo(_parent._parent._parent._parent._parent.vOrderNumber));
                                    OrderBy = MOS_FRA_ORDER_PACKS.SortByMOS_FRA_ORDER_PACKS_X1;
                                    
                                    #region Columns
                                    
                                    Columns.Add(MOS_FRA_ORDER_PACKS.FRANCHISEE_ORDER_NUMBER);
                                    Columns.Add(MOS_FRA_ORDER_PACKS.MACKAYS_ORDER_NUMBER);
                                    Columns.Add(MOS_FRA_ORDER_PACKS.LOT_NUMBER);
                                    // Delivery Date for Lot. Moved to this level because this task called in
                                    // TS instead of RS as was before
                                    Columns.Add(Lot.ORDER_NUMBER);
                                    Columns.Add(Lot.LOT_NUMBER);
                                    Columns.Add(Lot.SHIPPING_DATE_LATEST);
                                    Columns.Add(Lot.ORD_LOT_COMPLETE_STATUS);
                                    // OR FOR FD AND DOMESTIC DELIVERY DATE
                                    Columns.Add(Lot.DELIVERY_DATE);
                                    
                                    Columns.Add(MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER);
                                    Columns.Add(MOS_FRA_ORDER_PACKS.PACK_CODE);
                                    Columns.Add(MOS_FRA_ORDER_PACKS.QTY_OF_PACKS);
                                    Columns.Add(MOS_FRA_ORDER_PACKS.FRANCHISEE_ORDER_ITEM_STATUS);
                                    Columns.Add(MOS_FRA_ORDER_PACKS.CREATE_USER);
                                    // Footer Totals fot Line Totals, 'Total Items' & 'Total Items' on Print
                                    Columns.Add(vFooterTotalItemsOrderPack);
                                    Columns.Add(vFooterTotalPackMakeUp);
                                    
                                    Columns.Add(RCW3LabelExists);
                                    Relations[StyleLabels].NotifyRowWasFoundTo(RCW3LabelExists);
                                    Columns.Add(StyleLabels.StyleCode);
                                    Columns.Add(StyleLabels.LabelType);
                                    Columns.Add(StyleLabels.LabelCode);
                                    
                                    Columns.Add(OrderLotPacks.OrderNumber);
                                    Columns.Add(OrderLotPacks.LotNumber);
                                    Columns.Add(OrderLotPacks.ProductNumber);
                                    Columns.Add(OrderLotPacks.PackType);
                                    Columns.Add(OrderLotPacks.PackCode);
                                    Columns.Add(OrderLotPacks.QuantityInPack);
                                    #endregion
                                }
                                
                                /// <summary>Order Lot Pack - NOT HOME fran</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    TransactionScope = TransactionScopes.Task;
                                    _layout.Reset();
                                }
                                protected override void OnStart()
                                {
                                    // header for part 1
                                    if(Exp_4())
                                    {
                                        _layout.OrderLotPackPolybagWarning.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    if(Exp_4())
                                    {
                                        _layout.OrderLotPackHeader2.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                }
                                protected override void OnLeaveRow()
                                {
                                    // detail for part 2
                                    u.DBDel(typeof(Models.WorkPacksMakeup), "");
                                    if(Exp_4())
                                    {
                                        Cached<SeqPackMakeup>().Run();
                                    }
                                }
                                protected override void OnEnd()
                                {
                                    // footer for part 2
                                    if(Exp_4())
                                    {
                                        _layout.OrderLotPackFooter.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                }
                                
                                #region Expressions
                                internal Text Exp_1()
                                {
                                    return u.If(_parent._parent._parent._parent.vUKForeignSupplier == "014" && _parent._parent._parent._parent.Orders.TERMS_OF_DELIVERY != "FD", "Shipment", "Delivery");
                                }
                                internal Bool Exp_3()
                                {
                                    return _parent._parent._parent._parent._parent.vReportType != "L" && u.Not(_parent._parent._parent._parent.vProdIsSect4N4) && u.Not(_parent._parent._parent._parent.vProdIsSect4N7);
                                }
                                Bool Exp_4()
                                {
                                    return _parent._parent._parent._parent._parent.vReportPart == 2 && Lot.ORD_LOT_COMPLETE_STATUS != 9;
                                }
                                #endregion
                                
                                
                                
                                /// <summary>Seq Pack Makeup(P#400.1.1.1.1.3.2.1)</summary>
                                // Last change before Migration: 25/01/2013 14:13:00
                                internal class SeqPackMakeup : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>Packs Make Up</summary>
                                    readonly Models.PacksMakeUp PacksMakeUp = new Models.PacksMakeUp { ReadOnly = true };
                                    
                                    /// <summary>Product Sizes</summary>
                                    readonly Models.ProductSizes ProductSizes = new Models.ProductSizes { KeepCacheAliveAfterExit = true, ReadOnly = true };
                                    
                                    /// <summary>Work Packs Makeup</summary>
                                    readonly Models.WorkPacksMakeup WorkPacksMakeup = new Models.WorkPacksMakeup { KeepCacheAliveAfterExit = true, AllowRowLocking = true };
                                    #endregion
                                    
                                    internal OrderLotPackNOTHOMEFran _parent;
                                    
                                    
                                    /// <summary>Seq Pack Makeup(P#400.1.1.1.1.3.2.1)</summary>
                                    public SeqPackMakeup(OrderLotPackNOTHOMEFran parent)
                                    {
                                        _parent = parent;
                                        Title = "Seq Pack Makeup";
                                        InitializeDataView();
                                    }
                                    void InitializeDataView()
                                    {
                                        From = PacksMakeUp;
                                        Relations.Add(ProductSizes, 
                                        		ProductSizes.ProductNumber.IsEqualTo(PacksMakeUp.ProductNumber).And(
                                        		ProductSizes.SizeCode.IsEqualTo(PacksMakeUp.SizeCode)), 
                                        	ProductSizes.SortBySHP_Product_Sizes_X1);
                                        
                                        Relations.Add(WorkPacksMakeup, RelationType.Insert, 
                                        		WorkPacksMakeup.ProductNumber.BindEqualTo(PacksMakeUp.ProductNumber).And(
                                        		WorkPacksMakeup.PackCode.BindEqualTo(PacksMakeUp.PackCode)).And(
                                        		WorkPacksMakeup.ColourCode.BindEqualTo(PacksMakeUp.ColourCode)).And(
                                        		WorkPacksMakeup.SizeRelPosition.BindEqualTo(ProductSizes.SizeRelativePosition)), 
                                        	WorkPacksMakeup.SortBySHP_Work_Packs_Makeup_X1);
                                        
                                        Where.Add(PacksMakeUp.ProductNumber.IsEqualTo(_parent.MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER));
                                        Where.Add(PacksMakeUp.PackCode.IsEqualTo(_parent.MOS_FRA_ORDER_PACKS.PACK_CODE));
                                        OrderBy = PacksMakeUp.SortByWAR_Pack_MakeUp_X1;
                                        
                                        #region Columns
                                        
                                        Columns.Add(PacksMakeUp.ProductNumber);
                                        Columns.Add(PacksMakeUp.PackCode);
                                        Columns.Add(PacksMakeUp.ColourCode);
                                        Columns.Add(PacksMakeUp.SizeCode);
                                        Columns.Add(PacksMakeUp.ItemsInPack);
                                        
                                        Columns.Add(ProductSizes.ProductNumber);
                                        Columns.Add(ProductSizes.SizeCode);
                                        Columns.Add(ProductSizes.SizeRelativePosition);
                                        
                                        Columns.Add(WorkPacksMakeup.ProductNumber);
                                        Columns.Add(WorkPacksMakeup.PackCode);
                                        Columns.Add(WorkPacksMakeup.ColourCode);
                                        Columns.Add(WorkPacksMakeup.SizeCode).BindValue(PacksMakeUp.SizeCode);
                                        Columns.Add(WorkPacksMakeup.SizeRelPosition);
                                        Columns.Add(WorkPacksMakeup.ItemsInPack).BindValue(PacksMakeUp.ItemsInPack);
                                        #endregion
                                    }
                                    
                                    /// <summary>Seq Pack Makeup</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnUserEdit;
                                        TransactionScope = TransactionScopes.RowLocking;
                                        KeepChildRelationCacheAlive = true;
                                        KeepViewVisibleAfterExit = true;
                                    }
                                    protected override void OnEnd()
                                    {
                                        Cached<PackMakeUp>().Run();
                                    }
                                    
                                    
                                    
                                    /// <summary>Pack Make Up(P#400.1.1.1.1.3.2.1.1)</summary>
                                    // Last change before Migration: 25/01/2013 14:12:59
                                    internal class PackMakeUp : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Packs Makeup</summary>
                                        internal readonly Models.WorkPacksMakeup WorkPacksMakeup = new Models.WorkPacksMakeup { AllowRowLocking = true };
                                        
                                        /// <summary>Colour</summary>
                                        internal readonly Models.Colour Colour = new Models.Colour { ReadOnly = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Products By Style</summary>
                                        readonly Models.ProductsByStyle ProductsByStyle = new Models.ProductsByStyle { ReadOnly = true };
                                        
                                        /// <summary>Style Specification</summary>
                                        readonly Models.StyleSpecification StyleSpecification = new Models.StyleSpecification { ReadOnly = true };
                                        
                                        /// <summary>Product Pack Codes</summary>
                                        internal readonly Models.ProductPackCodes ProductPackCodes = new Models.ProductPackCodes { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Items Order Pack</summary>
                                        internal readonly NumberColumn vTotalItemsOrderPack = new NumberColumn("v:Total Items Order Pack", "6");
                                        
                                        /// <summary>v:Total Items Pack Make Up</summary>
                                        internal readonly NumberColumn vTotalItemsPackMakeUp = new NumberColumn("v:Total Items Pack Make Up", "6");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537PackMakeUp1 _layout;
                                        #endregion
                                        
                                        internal SeqPackMakeup _parent;
                                        
                                        
                                        /// <summary>Pack Make Up(P#400.1.1.1.1.3.2.1.1)</summary>
                                        public PackMakeUp(SeqPackMakeup parent)
                                        {
                                            _parent = parent;
                                            Title = "Pack Make Up";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537PackMakeUp1(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                            _layout.Layouts.Add(_parent._parent._layout);
                                            var WorkPacksMakeupPackCodeGroup = Groups.Add(WorkPacksMakeup.PackCode);
                                            WorkPacksMakeupPackCodeGroup.Leave += WorkPacksMakeupPackCodeGroup_Leave;
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkPacksMakeup;
                                            Relations.Add(Colour, 
                                            		Colour.ColourCode.IsEqualTo(WorkPacksMakeup.ColourCode), 
                                            	Colour.SortByREF_Colour_X1);
                                            
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkPacksMakeup.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(ProductsByStyle, 
                                            		ProductsByStyle.ProductNumber.IsEqualTo(WorkPacksMakeup.ProductNumber), 
                                            	ProductsByStyle.SortBySHP_Products_By_Style_X2);
                                            
                                            Relations.Add(StyleSpecification, 
                                            		StyleSpecification.STYLE_CODE.IsEqualTo(ProductsByStyle.StyleCode), 
                                            	StyleSpecification.SortBySHP_STYLE_SPECIFICATION_X1);
                                            
                                            Relations.Add(ProductPackCodes, 
                                            		ProductPackCodes.ProductNumber.IsEqualTo(_parent._parent.MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER).And(
                                            		ProductPackCodes.PackCode.IsEqualTo(_parent._parent.MOS_FRA_ORDER_PACKS.PACK_CODE)), 
                                            	ProductPackCodes.SortBySHP_Product_Pack_Codes_X2);
                                            
                                            Where.Add(WorkPacksMakeup.ProductNumber.IsEqualTo(_parent._parent.MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER));
                                            Where.Add(WorkPacksMakeup.PackCode.IsEqualTo(_parent._parent.MOS_FRA_ORDER_PACKS.PACK_CODE));
                                            OrderBy = WorkPacksMakeup.SortBySHP_Work_Packs_Makeup_X1;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkPacksMakeup.ProductNumber);
                                            Columns.Add(WorkPacksMakeup.PackCode);
                                            Columns.Add(WorkPacksMakeup.ColourCode);
                                            Columns.Add(Colour.ColourCode);
                                            Columns.Add(Colour.ColourDescription);
                                            Columns.Add(WorkPacksMakeup.SizeCode);
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            Columns.Add(WorkPacksMakeup.SizeRelPosition);
                                            Columns.Add(WorkPacksMakeup.ItemsInPack);
                                            // virtuals to calculate total items from Order Pack and Pack Make Up
                                            Columns.Add(vTotalItemsOrderPack);
                                            Columns.Add(vTotalItemsPackMakeUp);
                                            
                                            Columns.Add(ProductsByStyle.ProductNumber);
                                            Columns.Add(ProductsByStyle.StyleCode);
                                            
                                            Columns.Add(StyleSpecification.STYLE_CODE);
                                            Columns.Add(StyleSpecification.POLYBAG_MULTI_PACKS);
                                            
                                            Columns.Add(ProductPackCodes.ProductNumber);
                                            Columns.Add(ProductPackCodes.PackCode);
                                            Columns.Add(ProductPackCodes.PolyBag);
                                            #endregion
                                        }
                                        
                                        /// <summary>Pack Make Up</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnEnterRow()
                                        {
                                            vTotalItemsOrderPack.Value = 0;
                                            vTotalItemsPackMakeUp.Value = 0;
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalItemsOrderPack.Value = _parent._parent.MOS_FRA_ORDER_PACKS.QTY_OF_PACKS * _parent._parent.OrderLotPacks.QuantityInPack;
                                            vTotalItemsPackMakeUp.Value = _parent._parent.MOS_FRA_ORDER_PACKS.QTY_OF_PACKS * WorkPacksMakeup.ItemsInPack;
                                            // Update Footer Totals in Parent with 'Total Item' Line Totals on Print
                                            _parent._parent.vFooterTotalPackMakeUp.Value += vTotalItemsPackMakeUp;
                                            _parent._parent.vFooterTotalItemsOrderPack.Value = _parent._parent.vFooterTotalPackMakeUp;
                                            // Output each line of the Pack Make Up Report
                                            if(_parent._parent.MOS_FRA_ORDER_PACKS.QTY_OF_PACKS > 0)
                                            {
                                                _layout.PackMakeUp2.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        void WorkPacksMakeupPackCodeGroup_Leave()
                                        {
                                            // Output a line after each change of PAck Code if the quantity for
                                            // the Pack Code is greater than 0
                                            if(_parent._parent.MOS_FRA_ORDER_PACKS.QTY_OF_PACKS > 0)
                                            {
                                                _layout.PackCodeDividingLine.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_1()
                                        {
                                            return _parent._parent._parent._parent._parent._parent._parent._parent.pReportType == "L";
                                        }
                                        internal Date Exp_2()
                                        {
                                            return u.If(_parent._parent._parent._parent._parent._parent.vUKForeignSupplier == "014" && _parent._parent._parent._parent._parent._parent.Orders.TERMS_OF_DELIVERY != "FD", _parent._parent.Lot.SHIPPING_DATE_LATEST, _parent._parent.Lot.DELIVERY_DATE);
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return Counter == 1;
                                        }
                                        internal Text Exp_12()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        internal Bool Exp_15()
                                        {
                                            return (u.Not(_parent._parent.RCW3LabelExists) || _parent._parent.OrderLotPacks.QuantityInPack > 1) && Counter == 1;
                                        }
                                        #endregion
                                        
                                        
                                    }
                                }
                            }
                            
                            /// <summary>Sz Col Cst 1/5 Same(P#400.1.1.1.1.3.3)</summary>
                            // Last change before Migration: 07/02/2013 11:23:56
                            internal class SzColCst15Same : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>TempPackGrid</summary>
                                internal readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
                                
                                /// <summary>Size</summary>
                                readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                
                                /// <summary>Order Lot Size Cost</summary>
                                internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                #endregion
                                
                                #region Columns
                                
                                /// <summary>v:Total Colours01</summary>
                                internal readonly NumberColumn vTotalColours01 = new NumberColumn("v:Total Colours01", "7");
                                
                                /// <summary>v:Total Colours02</summary>
                                internal readonly NumberColumn vTotalColours02 = new NumberColumn("v:Total Colours02", "7");
                                
                                /// <summary>v:Total Colours03</summary>
                                internal readonly NumberColumn vTotalColours03 = new NumberColumn("v:Total Colours03", "7");
                                
                                /// <summary>v:Total Colours04</summary>
                                internal readonly NumberColumn vTotalColours04 = new NumberColumn("v:Total Colours04", "7");
                                
                                /// <summary>v:Total Colours05</summary>
                                internal readonly NumberColumn vTotalColours05 = new NumberColumn("v:Total Colours05", "7");
                                
                                /// <summary>v:Line Total Number Sizes 1/5</summary>
                                internal readonly NumberColumn vLineTotalNumberSizes15 = new NumberColumn("v:Line Total Number Sizes 1/5", "9");
                                
                                /// <summary>v:Footer Total No of Sizes 1/5</summary>
                                internal readonly NumberColumn vFooterTotalNoOfSizes15 = new NumberColumn("v:Footer Total No of Sizes 1/5", "9");
                                
                                /// <summary>v:Colour Description01</summary>
                                internal readonly TextColumn vColourDescription01 = new TextColumn("v:Colour Description01", "UX9A");
                                
                                /// <summary>v:Colour Description02</summary>
                                internal readonly TextColumn vColourDescription02 = new TextColumn("v:Colour Description02", "UX9A");
                                
                                /// <summary>v:Colour Description03</summary>
                                internal readonly TextColumn vColourDescription03 = new TextColumn("v:Colour Description03", "UX9A");
                                
                                /// <summary>v:Colour Description04</summary>
                                internal readonly TextColumn vColourDescription04 = new TextColumn("v:Colour Description04", "UX9A");
                                
                                /// <summary>v:Colour Description05</summary>
                                internal readonly TextColumn vColourDescription05 = new TextColumn("v:Colour Description05", "UX9A");
                                
                                /// <summary>v:Colour Description06</summary>
                                internal readonly TextColumn vColourDescription06 = new TextColumn("v:Colour Description06", "UX9A");
                                
                                /// <summary>v:Colour Description07</summary>
                                internal readonly TextColumn vColourDescription07 = new TextColumn("v:Colour Description07", "UX9A");
                                
                                /// <summary>v:Colour Description08</summary>
                                internal readonly TextColumn vColourDescription08 = new TextColumn("v:Colour Description08", "UX9A");
                                
                                /// <summary>v:Colour Description09</summary>
                                internal readonly TextColumn vColourDescription09 = new TextColumn("v:Colour Description09", "UX9A");
                                
                                /// <summary>v:Colour Description10</summary>
                                internal readonly TextColumn vColourDescription10 = new TextColumn("v:Colour Description10", "UX9A");
                                
                                /// <summary>v:Colour Description11</summary>
                                internal readonly TextColumn vColourDescription11 = new TextColumn("v:Colour Description11", "UX9A");
                                
                                /// <summary>v:Colour Description12</summary>
                                internal readonly TextColumn vColourDescription12 = new TextColumn("v:Colour Description12", "UX9A");
                                
                                /// <summary>v:Colour Description13</summary>
                                internal readonly TextColumn vColourDescription13 = new TextColumn("v:Colour Description13", "UX9A");
                                
                                /// <summary>v:Colour Description14</summary>
                                internal readonly TextColumn vColourDescription14 = new TextColumn("v:Colour Description14", "UX9A");
                                
                                /// <summary>v:Colour Description15</summary>
                                internal readonly TextColumn vColourDescription15 = new TextColumn("v:Colour Description15", "UX9A");
                                
                                /// <summary>v:Colour Description16</summary>
                                internal readonly TextColumn vColourDescription16 = new TextColumn("v:Colour Description16", "UX9A");
                                
                                /// <summary>v:Colour Description17</summary>
                                internal readonly TextColumn vColourDescription17 = new TextColumn("v:Colour Description17", "UX9A");
                                
                                /// <summary>v:Colour Description18</summary>
                                internal readonly TextColumn vColourDescription18 = new TextColumn("v:Colour Description18", "UX9A");
                                
                                /// <summary>v:Colour Description19</summary>
                                internal readonly TextColumn vColourDescription19 = new TextColumn("v:Colour Description19", "UX9A");
                                
                                /// <summary>v:Colour Description20</summary>
                                internal readonly TextColumn vColourDescription20 = new TextColumn("v:Colour Description20", "UX9A");
                                
                                /// <summary>v:Colour Description21</summary>
                                internal readonly TextColumn vColourDescription21 = new TextColumn("v:Colour Description21", "UX9A");
                                
                                /// <summary>v:Colour Description22</summary>
                                internal readonly TextColumn vColourDescription22 = new TextColumn("v:Colour Description22", "UX9A");
                                
                                /// <summary>v:Colour Description23</summary>
                                internal readonly TextColumn vColourDescription23 = new TextColumn("v:Colour Description23", "UX9A");
                                
                                /// <summary>v:Colour Description24</summary>
                                internal readonly TextColumn vColourDescription24 = new TextColumn("v:Colour Description24", "UX9A");
                                
                                /// <summary>v:Colour Description25</summary>
                                internal readonly TextColumn vColourDescription25 = new TextColumn("v:Colour Description25", "UX9A");
                                
                                /// <summary>v:Colour Description26</summary>
                                internal readonly TextColumn vColourDescription26 = new TextColumn("v:Colour Description26", "UX9A");
                                
                                /// <summary>v:Colour Description27</summary>
                                internal readonly TextColumn vColourDescription27 = new TextColumn("v:Colour Description27", "UX9A");
                                
                                /// <summary>v:Colour Description28</summary>
                                internal readonly TextColumn vColourDescription28 = new TextColumn("v:Colour Description28", "UX9A");
                                
                                /// <summary>v:Colour Description29</summary>
                                internal readonly TextColumn vColourDescription29 = new TextColumn("v:Colour Description29", "UX9A");
                                
                                /// <summary>v:Colour Description30</summary>
                                internal readonly TextColumn vColourDescription30 = new TextColumn("v:Colour Description30", "UX9A");
                                
                                /// <summary>v:Colour Description31</summary>
                                internal readonly TextColumn vColourDescription31 = new TextColumn("v:Colour Description31", "UX9A");
                                
                                /// <summary>v:Colour Description32</summary>
                                internal readonly TextColumn vColourDescription32 = new TextColumn("v:Colour Description32", "UX9A");
                                
                                /// <summary>v:Colour Description33</summary>
                                internal readonly TextColumn vColourDescription33 = new TextColumn("v:Colour Description33", "UX9A");
                                
                                /// <summary>v:Colour Description34</summary>
                                internal readonly TextColumn vColourDescription34 = new TextColumn("v:Colour Description34", "UX9A");
                                
                                /// <summary>v:Colour Description35</summary>
                                internal readonly TextColumn vColourDescription35 = new TextColumn("v:Colour Description35", "UX9A");
                                
                                /// <summary>v:Colour Description36</summary>
                                internal readonly TextColumn vColourDescription36 = new TextColumn("v:Colour Description36", "UX9A");
                                
                                /// <summary>v:Colour Description37</summary>
                                internal readonly TextColumn vColourDescription37 = new TextColumn("v:Colour Description37", "UX9A");
                                
                                /// <summary>v:Colour Description38</summary>
                                internal readonly TextColumn vColourDescription38 = new TextColumn("v:Colour Description38", "UX9A");
                                
                                /// <summary>v:Colour Description39</summary>
                                internal readonly TextColumn vColourDescription39 = new TextColumn("v:Colour Description39", "UX9A");
                                
                                /// <summary>v:Colour Description40</summary>
                                internal readonly TextColumn vColourDescription40 = new TextColumn("v:Colour Description40", "UX9A");
                                
                                /// <summary>v:Colour Description41</summary>
                                internal readonly TextColumn vColourDescription41 = new TextColumn("v:Colour Description41", "UX9A");
                                
                                /// <summary>v:Colour Description42</summary>
                                internal readonly TextColumn vColourDescription42 = new TextColumn("v:Colour Description42", "UX9A");
                                
                                /// <summary>v:Colour Description43</summary>
                                internal readonly TextColumn vColourDescription43 = new TextColumn("v:Colour Description43", "UX9A");
                                
                                /// <summary>v:Colour Description44</summary>
                                internal readonly TextColumn vColourDescription44 = new TextColumn("v:Colour Description44", "UX9A");
                                
                                /// <summary>v:Colour Description45</summary>
                                internal readonly TextColumn vColourDescription45 = new TextColumn("v:Colour Description45", "UX9A");
                                
                                /// <summary>v:Colour Description46</summary>
                                internal readonly TextColumn vColourDescription46 = new TextColumn("v:Colour Description46", "UX9A");
                                
                                /// <summary>v:Colour Description47</summary>
                                internal readonly TextColumn vColourDescription47 = new TextColumn("v:Colour Description47", "UX9A");
                                
                                /// <summary>v:Colour Description48</summary>
                                internal readonly TextColumn vColourDescription48 = new TextColumn("v:Colour Description48", "UX9A");
                                
                                /// <summary>v:Colour Description49</summary>
                                internal readonly TextColumn vColourDescription49 = new TextColumn("v:Colour Description49", "UX9A");
                                
                                /// <summary>v:Colour Description50</summary>
                                internal readonly TextColumn vColourDescription50 = new TextColumn("v:Colour Description50", "UX9A");
                                
                                /// <summary>v:Colour Description51</summary>
                                internal readonly TextColumn vColourDescription51 = new TextColumn("v:Colour Description51", "UX9A");
                                
                                /// <summary>v:Colour Description52</summary>
                                internal readonly TextColumn vColourDescription52 = new TextColumn("v:Colour Description52", "UX9A");
                                
                                /// <summary>v:Colour Description53</summary>
                                internal readonly TextColumn vColourDescription53 = new TextColumn("v:Colour Description53", "UX9A");
                                
                                /// <summary>v:Colour Description54</summary>
                                internal readonly TextColumn vColourDescription54 = new TextColumn("v:Colour Description54", "UX9A");
                                
                                /// <summary>v:Colour Description55</summary>
                                internal readonly TextColumn vColourDescription55 = new TextColumn("v:Colour Description55", "UX9A");
                                
                                /// <summary>v:Colour Description56</summary>
                                internal readonly TextColumn vColourDescription56 = new TextColumn("v:Colour Description56", "UX9A");
                                
                                /// <summary>v:Colour Description57</summary>
                                internal readonly TextColumn vColourDescription57 = new TextColumn("v:Colour Description57", "UX9A");
                                
                                /// <summary>v:Colour Description58</summary>
                                internal readonly TextColumn vColourDescription58 = new TextColumn("v:Colour Description58", "UX9A");
                                
                                /// <summary>v:Colour Description59</summary>
                                internal readonly TextColumn vColourDescription59 = new TextColumn("v:Colour Description59", "UX9A");
                                
                                /// <summary>v:Colour Description60</summary>
                                internal readonly TextColumn vColourDescription60 = new TextColumn("v:Colour Description60", "UX9A");
                                #endregion
                                
                                #region Printing Layouts
                                Printing.OrderPrintPo1537SzColCst15Same _layout;
                                #endregion
                                
                                internal LotDetails _parent;
                                
                                
                                /// <summary>Sz Col Cst 1/5 Same(P#400.1.1.1.1.3.3)</summary>
                                public SzColCst15Same(LotDetails parent)
                                {
                                    _parent = parent;
                                    Title = "Sz Col Cst 1/5 Same";
                                    InitializeDataView();
                                    _layout = new Printing.OrderPrintPo1537SzColCst15Same(this);
                                    _layout.Layouts.Add(_parent._parent._parent._parent._parent._layout);
                                }
                                void InitializeDataView()
                                {
                                    From = TempPackGrid;
                                    Relations.Add(Size1, 
                                    		Size1.SizeCode.IsEqualTo(TempPackGrid.SizeCode), 
                                    	Size1.SortByREF_Size_X1);
                                    
                                    Relations.Add(OrderLotSizeCost, 
                                    		OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent._parent._parent.Orders.ORDER_NUMBER).And(
                                    		OrderLotSizeCost.SizeCode.IsEqualTo(TempPackGrid.SizeCode)).And(
                                    		OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1)), 
                                    	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                    
                                    Where.Add(TempPackGrid.User1.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                    Where.Add(TempPackGrid.ProductNumber.IsEqualTo(_parent._parent._parent._parent.Orders.PRODUCT_NUMBER));
                                    OrderBy = TempPackGrid.SortByPackGrid_X2;
                                    
                                    #region Columns
                                    
                                    Columns.Add(TempPackGrid.User1);
                                    Columns.Add(TempPackGrid.ProductNumber);
                                    Columns.Add(TempPackGrid.SizeCode);
                                    Columns.Add(TempPackGrid.SizeRelativePosition);
                                    Columns.Add(Size1.SizeCode);
                                    Columns.Add(Size1.SizeDescription);
                                    Columns.Add(Size1.FullDescription);
                                    // want cost for 1st Lot only. May need to check this. works just now
                                    // only because Table indexed on Order/Lot and Lot 1 is first record
                                    Columns.Add(OrderLotSizeCost.OrderNumber);
                                    Columns.Add(OrderLotSizeCost.LotNumber);
                                    Columns.Add(OrderLotSizeCost.ProductNumber);
                                    Columns.Add(OrderLotSizeCost.SizeCode);
                                    Columns.Add(OrderLotSizeCost.SizeCost);
                                    Columns.Add(OrderLotSizeCost.SizeQuantity);
                                    Columns.Add(TempPackGrid.Units01);
                                    Columns.Add(TempPackGrid.Units02);
                                    Columns.Add(TempPackGrid.Units03);
                                    Columns.Add(TempPackGrid.Units04);
                                    Columns.Add(TempPackGrid.Units05);
                                    // Total in Footer
                                    Columns.Add(vTotalColours01);
                                    Columns.Add(vTotalColours02);
                                    Columns.Add(vTotalColours03);
                                    Columns.Add(vTotalColours04);
                                    Columns.Add(vTotalColours05);
                                    // Total Sizes across each line of the Report
                                    Columns.Add(vLineTotalNumberSizes15);
                                    // Adds above sizes and outputs Total in Footer
                                    Columns.Add(vFooterTotalNoOfSizes15);
                                    // Header Virtuals updated from Subtask 'Get Header'
                                    Columns.Add(vColourDescription01);
                                    Columns.Add(vColourDescription02);
                                    Columns.Add(vColourDescription03);
                                    Columns.Add(vColourDescription04);
                                    Columns.Add(vColourDescription05);
                                    Columns.Add(vColourDescription06);
                                    Columns.Add(vColourDescription07);
                                    Columns.Add(vColourDescription08);
                                    Columns.Add(vColourDescription09);
                                    Columns.Add(vColourDescription10);
                                    Columns.Add(vColourDescription11);
                                    Columns.Add(vColourDescription12);
                                    Columns.Add(vColourDescription13);
                                    Columns.Add(vColourDescription14);
                                    Columns.Add(vColourDescription15);
                                    Columns.Add(vColourDescription16);
                                    Columns.Add(vColourDescription17);
                                    Columns.Add(vColourDescription18);
                                    Columns.Add(vColourDescription19);
                                    Columns.Add(vColourDescription20);
                                    Columns.Add(vColourDescription21);
                                    Columns.Add(vColourDescription22);
                                    Columns.Add(vColourDescription23);
                                    Columns.Add(vColourDescription24);
                                    Columns.Add(vColourDescription25);
                                    Columns.Add(vColourDescription26);
                                    Columns.Add(vColourDescription27);
                                    Columns.Add(vColourDescription28);
                                    Columns.Add(vColourDescription29);
                                    Columns.Add(vColourDescription30);
                                    Columns.Add(vColourDescription31);
                                    Columns.Add(vColourDescription32);
                                    Columns.Add(vColourDescription33);
                                    Columns.Add(vColourDescription34);
                                    Columns.Add(vColourDescription35);
                                    Columns.Add(vColourDescription36);
                                    Columns.Add(vColourDescription37);
                                    Columns.Add(vColourDescription38);
                                    Columns.Add(vColourDescription39);
                                    Columns.Add(vColourDescription40);
                                    Columns.Add(vColourDescription41);
                                    Columns.Add(vColourDescription42);
                                    Columns.Add(vColourDescription43);
                                    Columns.Add(vColourDescription44);
                                    Columns.Add(vColourDescription45);
                                    Columns.Add(vColourDescription46);
                                    Columns.Add(vColourDescription47);
                                    Columns.Add(vColourDescription48);
                                    Columns.Add(vColourDescription49);
                                    Columns.Add(vColourDescription50);
                                    Columns.Add(vColourDescription51);
                                    Columns.Add(vColourDescription52);
                                    Columns.Add(vColourDescription53);
                                    Columns.Add(vColourDescription54);
                                    Columns.Add(vColourDescription55);
                                    Columns.Add(vColourDescription56);
                                    Columns.Add(vColourDescription57);
                                    Columns.Add(vColourDescription58);
                                    Columns.Add(vColourDescription59);
                                    Columns.Add(vColourDescription60);
                                    #endregion
                                }
                                
                                /// <summary>Sz Col Cst 1/5 Same</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    RowLocking = LockingStrategy.OnRowLoading;
                                    TransactionScope = TransactionScopes.Task;
                                    _layout.Reset();
                                }
                                protected override void OnStart()
                                {
                                    Cached<GetHeaders>().Run();
                                    if(Exp_25())
                                    {
                                        _layout.SizeColourCost15Header.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                }
                                protected override void OnEnterRow()
                                {
                                    // initialise Count Number of sizes for each record in Temp Table
                                    vLineTotalNumberSizes15.Value = 0;
                                }
                                protected override void OnLeaveRow()
                                {
                                    vTotalColours01.Value += TempPackGrid.Units01;
                                    vTotalColours02.Value += TempPackGrid.Units02;
                                    vTotalColours03.Value += TempPackGrid.Units03;
                                    vTotalColours04.Value += TempPackGrid.Units04;
                                    vTotalColours05.Value += TempPackGrid.Units05;
                                    vLineTotalNumberSizes15.Value = TempPackGrid.Units01 + TempPackGrid.Units02 + TempPackGrid.Units03 + TempPackGrid.Units04 + TempPackGrid.Units05;
                                    vFooterTotalNoOfSizes15.Value += vLineTotalNumberSizes15;
                                    // Only Output the line if any of the 5 Colours has a Qty for the size
                                    if((TempPackGrid.Units01 != 0 || TempPackGrid.Units02 != 0 || TempPackGrid.Units03 != 0 || TempPackGrid.Units04 != 0 || TempPackGrid.Units05 != 0) && u.Not(_parent._parent._parent._parent._parent._parent.pCommitmentOrder))
                                    {
                                        _layout.SizeColourCostDetail1.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                }
                                protected override void OnEnd()
                                {
                                    if(Exp_25())
                                    {
                                        _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    Cached<SizeColCost610>().Run();
                                    Cached<SizeColCost1115>().Run();
                                    Cached<SizeColCost1620>().Run();
                                    Cached<SizeColCost2125>().Run();
                                    Cached<SizeColCost2630>().Run();
                                    Cached<SizeColCost3135>().Run();
                                    Cached<SizeColCost3640>().Run();
                                    Cached<SizeColCost4145>().Run();
                                    Cached<SizeColCost4650>().Run();
                                    Cached<SizeColCost5155>().Run();
                                    Cached<SizeColCost5660>().Run();
                                }
                                
                                #region Expressions
                                internal Text Exp_1()
                                {
                                    return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                }
                                internal Bool Exp_2()
                                {
                                    return TempPackGrid.Units05 > 0;
                                }
                                internal Bool Exp_3()
                                {
                                    return TempPackGrid.Units04 > 0;
                                }
                                internal Bool Exp_4()
                                {
                                    return TempPackGrid.Units03 > 0;
                                }
                                internal Bool Exp_5()
                                {
                                    return TempPackGrid.Units02 > 0;
                                }
                                internal Bool Exp_15()
                                {
                                    return vTotalColours01 != 0;
                                }
                                internal Bool Exp_16()
                                {
                                    return vTotalColours02 != 0;
                                }
                                internal Bool Exp_17()
                                {
                                    return vTotalColours03 != 0;
                                }
                                internal Bool Exp_18()
                                {
                                    return vTotalColours04 != 0;
                                }
                                internal Bool Exp_19()
                                {
                                    return vTotalColours05 != 0;
                                }
                                Bool Exp_25()
                                {
                                    return vColourDescription01 != "" || vColourDescription02 != "" || vColourDescription03 != "" || vColourDescription04 != "" || vColourDescription05 != "";
                                }
                                internal Bool Exp_27()
                                {
                                    return u.Not(_parent._parent._parent._parent._parent._parent.pCommitmentOrder);
                                }
                                internal Number Exp_29()
                                {
                                    return u.If(_parent._parent._parent._parent._parent._parent.pCommitmentOrder, 0.78, 0.05);
                                }
                                #endregion
                                
                                
                                
                                /// <summary>Size Col Cost 6/10(P#400.1.1.1.1.3.3.1)</summary>
                                // Last change before Migration: 07/02/2013 11:20:59
                                internal class SizeColCost610 : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>TempPackGrid</summary>
                                    internal readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
                                    
                                    /// <summary>Size</summary>
                                    readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                    
                                    /// <summary>Order Lot Size Cost</summary>
                                    internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { AllowRowLocking = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Total Units06</summary>
                                    internal readonly NumberColumn vTotalUnits06 = new NumberColumn("v:Total Units06", "7");
                                    
                                    /// <summary>v:Total Units07</summary>
                                    internal readonly NumberColumn vTotalUnits07 = new NumberColumn("v:Total Units07", "7");
                                    
                                    /// <summary>v:Total Units08</summary>
                                    internal readonly NumberColumn vTotalUnits08 = new NumberColumn("v:Total Units08", "7");
                                    
                                    /// <summary>v:Total Units09</summary>
                                    internal readonly NumberColumn vTotalUnits09 = new NumberColumn("v:Total Units09", "7");
                                    
                                    /// <summary>v:Total Units10</summary>
                                    internal readonly NumberColumn vTotalUnits10 = new NumberColumn("v:Total Units10", "7");
                                    
                                    /// <summary>v:Total No of Sizes per Line</summary>
                                    internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                    
                                    /// <summary>v:Total No Sizes Footer 6/10</summary>
                                    internal readonly NumberColumn vTotalNoSizesFooter610 = new NumberColumn("v:Total No Sizes Footer 6/10", "9");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537SizeColCost610 _layout;
                                    #endregion
                                    
                                    internal SzColCst15Same _parent;
                                    
                                    
                                    /// <summary>Size Col Cost 6/10(P#400.1.1.1.1.3.3.1)</summary>
                                    public SizeColCost610(SzColCst15Same parent)
                                    {
                                        _parent = parent;
                                        Title = "Size Col Cost 6/10";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537SizeColCost610(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = TempPackGrid;
                                        Relations.Add(Size1, 
                                        		Size1.SizeCode.IsEqualTo(TempPackGrid.SizeCode), 
                                        	Size1.SortByREF_Size_X1);
                                        
                                        Relations.Add(OrderLotSizeCost, 
                                        		OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.ORDER_NUMBER).And(
                                        		OrderLotSizeCost.SizeCode.IsEqualTo(TempPackGrid.SizeCode)).And(
                                        		OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1)), 
                                        	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                        
                                        Where.Add(TempPackGrid.User1.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                        Where.Add(TempPackGrid.ProductNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.PRODUCT_NUMBER));
                                        OrderBy = TempPackGrid.SortByPackGrid_X2;
                                        
                                        #region Columns
                                        
                                        Columns.Add(TempPackGrid.User1);
                                        Columns.Add(TempPackGrid.ProductNumber);
                                        Columns.Add(TempPackGrid.SizeCode);
                                        Columns.Add(TempPackGrid.SizeRelativePosition);
                                        Columns.Add(Size1.SizeCode);
                                        Columns.Add(Size1.SizeDescription);
                                        Columns.Add(Size1.FullDescription);
                                        // get cost from lot 1
                                        Columns.Add(OrderLotSizeCost.OrderNumber);
                                        Columns.Add(OrderLotSizeCost.LotNumber);
                                        Columns.Add(OrderLotSizeCost.ProductNumber);
                                        Columns.Add(OrderLotSizeCost.SizeCode);
                                        Columns.Add(OrderLotSizeCost.SizeCost);
                                        Columns.Add(OrderLotSizeCost.SizeQuantity);
                                        Columns.Add(TempPackGrid.Units06);
                                        Columns.Add(TempPackGrid.Units07);
                                        Columns.Add(TempPackGrid.Units08);
                                        Columns.Add(TempPackGrid.Units09);
                                        Columns.Add(TempPackGrid.Units10);
                                        
                                        Columns.Add(vTotalUnits06);
                                        Columns.Add(vTotalUnits07);
                                        Columns.Add(vTotalUnits08);
                                        Columns.Add(vTotalUnits09);
                                        Columns.Add(vTotalUnits10);
                                        // Total number of Sizes across each Line
                                        Columns.Add(vTotalNoOfSizesPerLine);
                                        // Total Number of Sizes in Footer Totals
                                        Columns.Add(vTotalNoSizesFooter610);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size Col Cost 6/10</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        // Only output if Colour decription 6 <>''. ie that there are more than 5
                                        // colours, checked in 'Get Header' task
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCost610Header1.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        vTotalUnits06.Value += TempPackGrid.Units06;
                                        vTotalUnits07.Value += TempPackGrid.Units07;
                                        vTotalUnits08.Value += TempPackGrid.Units08;
                                        vTotalUnits09.Value += TempPackGrid.Units09;
                                        vTotalUnits10.Value += TempPackGrid.Units10;
                                        vTotalNoOfSizesPerLine.Value = TempPackGrid.Units06 + TempPackGrid.Units07 + TempPackGrid.Units08 + TempPackGrid.Units09 + TempPackGrid.Units10;
                                        vTotalNoSizesFooter610.Value += vTotalNoOfSizesPerLine;
                                        // only output if Colour Description 6<>'' see Task Suffix and any of the
                                        // 5 colours has a size
                                        if(TempPackGrid.Units06 != 0 || TempPackGrid.Units07 != 0 || TempPackGrid.Units08 != 0 || TempPackGrid.Units09 != 0 || TempPackGrid.Units10 != 0)
                                        {
                                            _layout.SizeColourCostDetail1610.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnEnd()
                                    {
                                        // same condition as TS and RS
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    
                                    #region Expressions
                                    internal Bool Exp_4()
                                    {
                                        return TempPackGrid.Units10 > 0;
                                    }
                                    internal Bool Exp_5()
                                    {
                                        return TempPackGrid.Units09 > 0;
                                    }
                                    internal Bool Exp_6()
                                    {
                                        return TempPackGrid.Units08 > 0;
                                    }
                                    internal Bool Exp_7()
                                    {
                                        return TempPackGrid.Units07 > 0;
                                    }
                                    internal Bool Exp_8()
                                    {
                                        return TempPackGrid.Units06 > 0;
                                    }
                                    internal Bool Exp_9()
                                    {
                                        return vTotalUnits10 > 0;
                                    }
                                    internal Bool Exp_10()
                                    {
                                        return vTotalUnits09 > 0;
                                    }
                                    internal Bool Exp_11()
                                    {
                                        return vTotalUnits08 > 0;
                                    }
                                    internal Bool Exp_12()
                                    {
                                        return vTotalUnits07 > 0;
                                    }
                                    internal Bool Exp_13()
                                    {
                                        return vTotalUnits06 > 0;
                                    }
                                    Bool Exp_24()
                                    {
                                        return _parent.vColourDescription06 != "" || _parent.vColourDescription07 != "" || _parent.vColourDescription08 != "" || _parent.vColourDescription09 != "" || _parent.vColourDescription10 != "";
                                    }
                                    internal Text Exp_26()
                                    {
                                        return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                    }
                                    #endregion
                                    
                                    
                                }
                                
                                /// <summary>Size Col Cost 11/15(P#400.1.1.1.1.3.3.2)</summary>
                                // Last change before Migration: 07/02/2013 11:22:07
                                internal class SizeColCost1115 : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>TempPackGrid</summary>
                                    internal readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
                                    
                                    /// <summary>Size</summary>
                                    readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                    
                                    /// <summary>Order Lot Size Cost</summary>
                                    internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { AllowRowLocking = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Total Units11</summary>
                                    internal readonly NumberColumn vTotalUnits11 = new NumberColumn("v:Total Units11", "7");
                                    
                                    /// <summary>v:Total Units12</summary>
                                    internal readonly NumberColumn vTotalUnits12 = new NumberColumn("v:Total Units12", "7");
                                    
                                    /// <summary>v:Total Units13</summary>
                                    internal readonly NumberColumn vTotalUnits13 = new NumberColumn("v:Total Units13", "7");
                                    
                                    /// <summary>v:Total Units14</summary>
                                    internal readonly NumberColumn vTotalUnits14 = new NumberColumn("v:Total Units14", "7");
                                    
                                    /// <summary>v:Total Units15</summary>
                                    internal readonly NumberColumn vTotalUnits15 = new NumberColumn("v:Total Units15", "7");
                                    
                                    /// <summary>v:Total No of Sizes per Line</summary>
                                    internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                    
                                    /// <summary>v:Total No Sizes Footer 11/15</summary>
                                    internal readonly NumberColumn vTotalNoSizesFooter1115 = new NumberColumn("v:Total No Sizes Footer 11/15", "9");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537SizeColCost1115 _layout;
                                    #endregion
                                    
                                    internal SzColCst15Same _parent;
                                    
                                    
                                    /// <summary>Size Col Cost 11/15(P#400.1.1.1.1.3.3.2)</summary>
                                    public SizeColCost1115(SzColCst15Same parent)
                                    {
                                        _parent = parent;
                                        Title = "Size Col Cost 11/15";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537SizeColCost1115(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = TempPackGrid;
                                        Relations.Add(Size1, 
                                        		Size1.SizeCode.IsEqualTo(TempPackGrid.SizeCode), 
                                        	Size1.SortByREF_Size_X1);
                                        
                                        Relations.Add(OrderLotSizeCost, 
                                        		OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.ORDER_NUMBER).And(
                                        		OrderLotSizeCost.SizeCode.IsEqualTo(TempPackGrid.SizeCode)).And(
                                        		OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1)), 
                                        	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                        
                                        Where.Add(TempPackGrid.User1.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                        Where.Add(TempPackGrid.ProductNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.PRODUCT_NUMBER));
                                        OrderBy = TempPackGrid.SortByPackGrid_X2;
                                        
                                        #region Columns
                                        
                                        Columns.Add(TempPackGrid.User1);
                                        Columns.Add(TempPackGrid.ProductNumber);
                                        Columns.Add(TempPackGrid.SizeCode);
                                        Columns.Add(TempPackGrid.SizeRelativePosition);
                                        Columns.Add(Size1.SizeCode);
                                        Columns.Add(Size1.SizeDescription);
                                        Columns.Add(Size1.FullDescription);
                                        // get cost from lot 1
                                        Columns.Add(OrderLotSizeCost.OrderNumber);
                                        Columns.Add(OrderLotSizeCost.LotNumber);
                                        Columns.Add(OrderLotSizeCost.ProductNumber);
                                        Columns.Add(OrderLotSizeCost.SizeCode);
                                        Columns.Add(OrderLotSizeCost.SizeCost);
                                        Columns.Add(OrderLotSizeCost.SizeQuantity);
                                        Columns.Add(TempPackGrid.Units11);
                                        Columns.Add(TempPackGrid.Units12);
                                        Columns.Add(TempPackGrid.Units13);
                                        Columns.Add(TempPackGrid.Units14);
                                        Columns.Add(TempPackGrid.Units15);
                                        
                                        Columns.Add(vTotalUnits11);
                                        Columns.Add(vTotalUnits12);
                                        Columns.Add(vTotalUnits13);
                                        Columns.Add(vTotalUnits14);
                                        Columns.Add(vTotalUnits15);
                                        // Total number of Sizes across each Line
                                        Columns.Add(vTotalNoOfSizesPerLine);
                                        // Total Number of Sizes in Footer Totals
                                        Columns.Add(vTotalNoSizesFooter1115);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size Col Cost 11/15</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        // Only output if Colour decription 11 <>''. ie that there are more than 5
                                        // colours, checked in 'Get Header' task
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostHeader11115.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        vTotalUnits11.Value += TempPackGrid.Units11;
                                        vTotalUnits12.Value += TempPackGrid.Units12;
                                        vTotalUnits13.Value += TempPackGrid.Units13;
                                        vTotalUnits14.Value += TempPackGrid.Units14;
                                        vTotalUnits15.Value += TempPackGrid.Units15;
                                        vTotalNoOfSizesPerLine.Value = TempPackGrid.Units11 + TempPackGrid.Units12 + TempPackGrid.Units13 + TempPackGrid.Units14 + TempPackGrid.Units15;
                                        vTotalNoSizesFooter1115.Value += vTotalNoOfSizesPerLine;
                                        // only output if Colour Description 11 <>'' see Task Suffix and any of the
                                        // 5 colours has a size
                                        if(TempPackGrid.Units11 != 0 || TempPackGrid.Units12 != 0 || TempPackGrid.Units13 != 0 || TempPackGrid.Units14 != 0 || TempPackGrid.Units15 != 0)
                                        {
                                            _layout.SizeColourCostDetail11115.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnEnd()
                                    {
                                        // same condition as TS and RS
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    
                                    #region Expressions
                                    internal Bool Exp_4()
                                    {
                                        return TempPackGrid.Units15 > 0;
                                    }
                                    internal Bool Exp_5()
                                    {
                                        return TempPackGrid.Units14 > 0;
                                    }
                                    internal Bool Exp_6()
                                    {
                                        return TempPackGrid.Units13 > 0;
                                    }
                                    internal Bool Exp_7()
                                    {
                                        return TempPackGrid.Units12 > 0;
                                    }
                                    internal Bool Exp_8()
                                    {
                                        return TempPackGrid.Units11 > 0;
                                    }
                                    internal Bool Exp_9()
                                    {
                                        return vTotalUnits15 > 0;
                                    }
                                    internal Bool Exp_10()
                                    {
                                        return vTotalUnits14 > 0;
                                    }
                                    internal Bool Exp_11()
                                    {
                                        return vTotalUnits13 > 0;
                                    }
                                    internal Bool Exp_12()
                                    {
                                        return vTotalUnits12 > 0;
                                    }
                                    internal Bool Exp_13()
                                    {
                                        return vTotalUnits11 > 0;
                                    }
                                    Bool Exp_24()
                                    {
                                        return _parent.vColourDescription11 != "" || _parent.vColourDescription12 != "" || _parent.vColourDescription13 != "" || _parent.vColourDescription14 != "" || _parent.vColourDescription15 != "";
                                    }
                                    internal Text Exp_26()
                                    {
                                        return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                    }
                                    #endregion
                                    
                                    
                                }
                                
                                /// <summary>Size Col Cost 16/20(P#400.1.1.1.1.3.3.3)</summary>
                                // Last change before Migration: 07/02/2013 11:22:32
                                internal class SizeColCost1620 : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>TempPackGrid</summary>
                                    internal readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
                                    
                                    /// <summary>Size</summary>
                                    readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                    
                                    /// <summary>Order Lot Size Cost</summary>
                                    internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { AllowRowLocking = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Total Units16</summary>
                                    internal readonly NumberColumn vTotalUnits16 = new NumberColumn("v:Total Units16", "7");
                                    
                                    /// <summary>v:Total Units17</summary>
                                    internal readonly NumberColumn vTotalUnits17 = new NumberColumn("v:Total Units17", "7");
                                    
                                    /// <summary>v:Total Units18</summary>
                                    internal readonly NumberColumn vTotalUnits18 = new NumberColumn("v:Total Units18", "7");
                                    
                                    /// <summary>v:Total Units19</summary>
                                    internal readonly NumberColumn vTotalUnits19 = new NumberColumn("v:Total Units19", "7");
                                    
                                    /// <summary>v:Total Units20</summary>
                                    internal readonly NumberColumn vTotalUnits20 = new NumberColumn("v:Total Units20", "7");
                                    
                                    /// <summary>v:Total No of Sizes per Line</summary>
                                    internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                    
                                    /// <summary>v:Total No Sizes Footer 16/20</summary>
                                    internal readonly NumberColumn vTotalNoSizesFooter1620 = new NumberColumn("v:Total No Sizes Footer 16/20", "9");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537SizeColCost1620 _layout;
                                    #endregion
                                    
                                    internal SzColCst15Same _parent;
                                    
                                    
                                    /// <summary>Size Col Cost 16/20(P#400.1.1.1.1.3.3.3)</summary>
                                    public SizeColCost1620(SzColCst15Same parent)
                                    {
                                        _parent = parent;
                                        Title = "Size Col Cost 16/20";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537SizeColCost1620(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = TempPackGrid;
                                        Relations.Add(Size1, 
                                        		Size1.SizeCode.IsEqualTo(TempPackGrid.SizeCode), 
                                        	Size1.SortByREF_Size_X1);
                                        
                                        Relations.Add(OrderLotSizeCost, 
                                        		OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.ORDER_NUMBER).And(
                                        		OrderLotSizeCost.SizeCode.IsEqualTo(TempPackGrid.SizeCode)).And(
                                        		OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1)), 
                                        	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                        
                                        Where.Add(TempPackGrid.User1.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                        Where.Add(TempPackGrid.ProductNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.PRODUCT_NUMBER));
                                        OrderBy = TempPackGrid.SortByPackGrid_X2;
                                        
                                        #region Columns
                                        
                                        Columns.Add(TempPackGrid.User1);
                                        Columns.Add(TempPackGrid.ProductNumber);
                                        Columns.Add(TempPackGrid.SizeCode);
                                        Columns.Add(TempPackGrid.SizeRelativePosition);
                                        Columns.Add(Size1.SizeCode);
                                        Columns.Add(Size1.SizeDescription);
                                        Columns.Add(Size1.FullDescription);
                                        // get cost from lot 1
                                        Columns.Add(OrderLotSizeCost.OrderNumber);
                                        Columns.Add(OrderLotSizeCost.LotNumber);
                                        Columns.Add(OrderLotSizeCost.ProductNumber);
                                        Columns.Add(OrderLotSizeCost.SizeCode);
                                        Columns.Add(OrderLotSizeCost.SizeCost);
                                        Columns.Add(OrderLotSizeCost.SizeQuantity);
                                        Columns.Add(TempPackGrid.Units16);
                                        Columns.Add(TempPackGrid.Units17);
                                        Columns.Add(TempPackGrid.Units18);
                                        Columns.Add(TempPackGrid.Units19);
                                        Columns.Add(TempPackGrid.Units20);
                                        
                                        Columns.Add(vTotalUnits16);
                                        Columns.Add(vTotalUnits17);
                                        Columns.Add(vTotalUnits18);
                                        Columns.Add(vTotalUnits19);
                                        Columns.Add(vTotalUnits20);
                                        // Total number of Sizes across each Line
                                        Columns.Add(vTotalNoOfSizesPerLine);
                                        // Total Number of Sizes in Footer Totals
                                        Columns.Add(vTotalNoSizesFooter1620);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size Col Cost 16/20</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        // Only output if Colour decription 16 <>''. ie that there are more than 5
                                        // colours, checked in 'Get Header' task
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostHeader11620.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        vTotalUnits16.Value += TempPackGrid.Units16;
                                        vTotalUnits17.Value += TempPackGrid.Units17;
                                        vTotalUnits18.Value += TempPackGrid.Units18;
                                        vTotalUnits19.Value += TempPackGrid.Units19;
                                        vTotalUnits20.Value += TempPackGrid.Units20;
                                        vTotalNoOfSizesPerLine.Value = TempPackGrid.Units16 + TempPackGrid.Units17 + TempPackGrid.Units18 + TempPackGrid.Units19 + TempPackGrid.Units20;
                                        vTotalNoSizesFooter1620.Value += vTotalNoOfSizesPerLine;
                                        // only output if Colour Description 16 <>'' see Task Suffix and any of the
                                        // 5 colours has a size
                                        if(TempPackGrid.Units16 != 0 || TempPackGrid.Units17 != 0 || TempPackGrid.Units18 != 0 || TempPackGrid.Units19 != 0 || TempPackGrid.Units20 != 0)
                                        {
                                            _layout.SizeColourCostDetail11620.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnEnd()
                                    {
                                        // same condition as TS and RS
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    
                                    #region Expressions
                                    internal Bool Exp_4()
                                    {
                                        return TempPackGrid.Units20 > 0;
                                    }
                                    internal Bool Exp_5()
                                    {
                                        return TempPackGrid.Units19 > 0;
                                    }
                                    internal Bool Exp_6()
                                    {
                                        return TempPackGrid.Units18 > 0;
                                    }
                                    internal Bool Exp_7()
                                    {
                                        return TempPackGrid.Units17 > 0;
                                    }
                                    internal Bool Exp_8()
                                    {
                                        return TempPackGrid.Units16 > 0;
                                    }
                                    internal Bool Exp_9()
                                    {
                                        return vTotalUnits20 > 0;
                                    }
                                    internal Bool Exp_10()
                                    {
                                        return vTotalUnits19 > 0;
                                    }
                                    internal Bool Exp_11()
                                    {
                                        return vTotalUnits18 > 0;
                                    }
                                    internal Bool Exp_12()
                                    {
                                        return vTotalUnits17 > 0;
                                    }
                                    internal Bool Exp_13()
                                    {
                                        return vTotalUnits16 > 0;
                                    }
                                    Bool Exp_24()
                                    {
                                        return _parent.vColourDescription16 != "" || _parent.vColourDescription17 != "" || _parent.vColourDescription18 != "" || _parent.vColourDescription19 != "" || _parent.vColourDescription20 != "";
                                    }
                                    internal Text Exp_26()
                                    {
                                        return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                    }
                                    #endregion
                                    
                                    
                                }
                                
                                /// <summary>Size Col Cost 21/25(P#400.1.1.1.1.3.3.4)</summary>
                                // Last change before Migration: 07/02/2013 11:22:46
                                internal class SizeColCost2125 : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>TempPackGrid</summary>
                                    internal readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
                                    
                                    /// <summary>Size</summary>
                                    readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                    
                                    /// <summary>Order Lot Size Cost</summary>
                                    internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { AllowRowLocking = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Total Units21</summary>
                                    internal readonly NumberColumn vTotalUnits21 = new NumberColumn("v:Total Units21", "7");
                                    
                                    /// <summary>v:Total Units22</summary>
                                    internal readonly NumberColumn vTotalUnits22 = new NumberColumn("v:Total Units22", "7");
                                    
                                    /// <summary>v:Total Units23</summary>
                                    internal readonly NumberColumn vTotalUnits23 = new NumberColumn("v:Total Units23", "7");
                                    
                                    /// <summary>v:Total Units24</summary>
                                    internal readonly NumberColumn vTotalUnits24 = new NumberColumn("v:Total Units24", "7");
                                    
                                    /// <summary>v:Total Units25</summary>
                                    internal readonly NumberColumn vTotalUnits25 = new NumberColumn("v:Total Units25", "7");
                                    
                                    /// <summary>v:Total No of Sizes per Line</summary>
                                    internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                    
                                    /// <summary>v:Total No Sizes Footer 21/25</summary>
                                    internal readonly NumberColumn vTotalNoSizesFooter2125 = new NumberColumn("v:Total No Sizes Footer 21/25", "9");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537SizeColCost2125 _layout;
                                    #endregion
                                    
                                    internal SzColCst15Same _parent;
                                    
                                    
                                    /// <summary>Size Col Cost 21/25(P#400.1.1.1.1.3.3.4)</summary>
                                    public SizeColCost2125(SzColCst15Same parent)
                                    {
                                        _parent = parent;
                                        Title = "Size Col Cost 21/25";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537SizeColCost2125(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = TempPackGrid;
                                        Relations.Add(Size1, 
                                        		Size1.SizeCode.IsEqualTo(TempPackGrid.SizeCode), 
                                        	Size1.SortByREF_Size_X1);
                                        
                                        Relations.Add(OrderLotSizeCost, 
                                        		OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.ORDER_NUMBER).And(
                                        		OrderLotSizeCost.SizeCode.IsEqualTo(TempPackGrid.SizeCode)).And(
                                        		OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1)), 
                                        	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                        
                                        Where.Add(TempPackGrid.User1.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                        Where.Add(TempPackGrid.ProductNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.PRODUCT_NUMBER));
                                        OrderBy = TempPackGrid.SortByPackGrid_X2;
                                        
                                        #region Columns
                                        
                                        Columns.Add(TempPackGrid.User1);
                                        Columns.Add(TempPackGrid.ProductNumber);
                                        Columns.Add(TempPackGrid.SizeCode);
                                        Columns.Add(TempPackGrid.SizeRelativePosition);
                                        Columns.Add(Size1.SizeCode);
                                        Columns.Add(Size1.SizeDescription);
                                        Columns.Add(Size1.FullDescription);
                                        // get cost from lot 1
                                        Columns.Add(OrderLotSizeCost.OrderNumber);
                                        Columns.Add(OrderLotSizeCost.LotNumber);
                                        Columns.Add(OrderLotSizeCost.ProductNumber);
                                        Columns.Add(OrderLotSizeCost.SizeCode);
                                        Columns.Add(OrderLotSizeCost.SizeCost);
                                        Columns.Add(OrderLotSizeCost.SizeQuantity);
                                        Columns.Add(TempPackGrid.Units21);
                                        Columns.Add(TempPackGrid.Units22);
                                        Columns.Add(TempPackGrid.Units23);
                                        Columns.Add(TempPackGrid.Units24);
                                        Columns.Add(TempPackGrid.Units25);
                                        
                                        Columns.Add(vTotalUnits21);
                                        Columns.Add(vTotalUnits22);
                                        Columns.Add(vTotalUnits23);
                                        Columns.Add(vTotalUnits24);
                                        Columns.Add(vTotalUnits25);
                                        // Total number of Sizes across each Line
                                        Columns.Add(vTotalNoOfSizesPerLine);
                                        // Total Number of Sizes in Footer Totals
                                        Columns.Add(vTotalNoSizesFooter2125);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size Col Cost 21/25</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        // Only output if Colour decription 21 <>''. ie that there are more than 5
                                        // colours, checked in 'Get Header' task
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostHeader12125.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        vTotalUnits21.Value += TempPackGrid.Units21;
                                        vTotalUnits22.Value += TempPackGrid.Units22;
                                        vTotalUnits23.Value += TempPackGrid.Units23;
                                        vTotalUnits24.Value += TempPackGrid.Units24;
                                        vTotalUnits25.Value += TempPackGrid.Units25;
                                        vTotalNoOfSizesPerLine.Value = TempPackGrid.Units21 + TempPackGrid.Units22 + TempPackGrid.Units23 + TempPackGrid.Units24 + TempPackGrid.Units25;
                                        vTotalNoSizesFooter2125.Value += vTotalNoOfSizesPerLine;
                                        // only output if Colour Description 21 <>'' see Task Suffix and any of the
                                        // 5 colours has a size
                                        if(TempPackGrid.Units21 != 0 || TempPackGrid.Units22 != 0 || TempPackGrid.Units23 != 0 || TempPackGrid.Units24 != 0 || TempPackGrid.Units25 != 0)
                                        {
                                            _layout.SizeColourCostDetail12125.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnEnd()
                                    {
                                        // same condition as TS and RS
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    
                                    #region Expressions
                                    internal Bool Exp_4()
                                    {
                                        return TempPackGrid.Units25 > 0;
                                    }
                                    internal Bool Exp_5()
                                    {
                                        return TempPackGrid.Units24 > 0;
                                    }
                                    internal Bool Exp_6()
                                    {
                                        return TempPackGrid.Units23 > 0;
                                    }
                                    internal Bool Exp_7()
                                    {
                                        return TempPackGrid.Units22 > 0;
                                    }
                                    internal Bool Exp_8()
                                    {
                                        return TempPackGrid.Units21 > 0;
                                    }
                                    internal Bool Exp_9()
                                    {
                                        return vTotalUnits25 > 0;
                                    }
                                    internal Bool Exp_10()
                                    {
                                        return vTotalUnits24 > 0;
                                    }
                                    internal Bool Exp_11()
                                    {
                                        return vTotalUnits23 > 0;
                                    }
                                    internal Bool Exp_12()
                                    {
                                        return vTotalUnits22 > 0;
                                    }
                                    internal Bool Exp_13()
                                    {
                                        return vTotalUnits21 > 0;
                                    }
                                    Bool Exp_24()
                                    {
                                        return _parent.vColourDescription21 != "" || _parent.vColourDescription22 != "" || _parent.vColourDescription23 != "" || _parent.vColourDescription24 != "" || _parent.vColourDescription25 != "";
                                    }
                                    internal Text Exp_26()
                                    {
                                        return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                    }
                                    #endregion
                                    
                                    
                                }
                                
                                /// <summary>Size Col Cost 26/30(P#400.1.1.1.1.3.3.5)</summary>
                                // Last change before Migration: 07/02/2013 11:22:59
                                internal class SizeColCost2630 : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>TempPackGrid</summary>
                                    internal readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
                                    
                                    /// <summary>Size</summary>
                                    readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                    
                                    /// <summary>Order Lot Size Cost</summary>
                                    internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { AllowRowLocking = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Total Units26</summary>
                                    internal readonly NumberColumn vTotalUnits26 = new NumberColumn("v:Total Units26", "7");
                                    
                                    /// <summary>v:Total Units27</summary>
                                    internal readonly NumberColumn vTotalUnits27 = new NumberColumn("v:Total Units27", "7");
                                    
                                    /// <summary>v:Total Units28</summary>
                                    internal readonly NumberColumn vTotalUnits28 = new NumberColumn("v:Total Units28", "7");
                                    
                                    /// <summary>v:Total Units29</summary>
                                    internal readonly NumberColumn vTotalUnits29 = new NumberColumn("v:Total Units29", "7");
                                    
                                    /// <summary>v:Total Units30</summary>
                                    internal readonly NumberColumn vTotalUnits30 = new NumberColumn("v:Total Units30", "7");
                                    
                                    /// <summary>v:Total No of Sizes per Line</summary>
                                    internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                    
                                    /// <summary>v:Total No Sizes Footer 26/30</summary>
                                    internal readonly NumberColumn vTotalNoSizesFooter2630 = new NumberColumn("v:Total No Sizes Footer 26/30", "9");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537SizeColCost2630 _layout;
                                    #endregion
                                    
                                    internal SzColCst15Same _parent;
                                    
                                    
                                    /// <summary>Size Col Cost 26/30(P#400.1.1.1.1.3.3.5)</summary>
                                    public SizeColCost2630(SzColCst15Same parent)
                                    {
                                        _parent = parent;
                                        Title = "Size Col Cost 26/30";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537SizeColCost2630(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = TempPackGrid;
                                        Relations.Add(Size1, 
                                        		Size1.SizeCode.IsEqualTo(TempPackGrid.SizeCode), 
                                        	Size1.SortByREF_Size_X1);
                                        
                                        Relations.Add(OrderLotSizeCost, 
                                        		OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.ORDER_NUMBER).And(
                                        		OrderLotSizeCost.SizeCode.IsEqualTo(TempPackGrid.SizeCode)).And(
                                        		OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1)), 
                                        	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                        
                                        Where.Add(TempPackGrid.User1.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                        Where.Add(TempPackGrid.ProductNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.PRODUCT_NUMBER));
                                        OrderBy = TempPackGrid.SortByPackGrid_X2;
                                        
                                        #region Columns
                                        
                                        Columns.Add(TempPackGrid.User1);
                                        Columns.Add(TempPackGrid.ProductNumber);
                                        Columns.Add(TempPackGrid.SizeCode);
                                        Columns.Add(TempPackGrid.SizeRelativePosition);
                                        Columns.Add(Size1.SizeCode);
                                        Columns.Add(Size1.SizeDescription);
                                        Columns.Add(Size1.FullDescription);
                                        // get cost from lot 1
                                        Columns.Add(OrderLotSizeCost.OrderNumber);
                                        Columns.Add(OrderLotSizeCost.LotNumber);
                                        Columns.Add(OrderLotSizeCost.ProductNumber);
                                        Columns.Add(OrderLotSizeCost.SizeCode);
                                        Columns.Add(OrderLotSizeCost.SizeCost);
                                        Columns.Add(OrderLotSizeCost.SizeQuantity);
                                        Columns.Add(TempPackGrid.Units26);
                                        Columns.Add(TempPackGrid.Units27);
                                        Columns.Add(TempPackGrid.Units28);
                                        Columns.Add(TempPackGrid.Units29);
                                        Columns.Add(TempPackGrid.Units30);
                                        
                                        Columns.Add(vTotalUnits26);
                                        Columns.Add(vTotalUnits27);
                                        Columns.Add(vTotalUnits28);
                                        Columns.Add(vTotalUnits29);
                                        Columns.Add(vTotalUnits30);
                                        // Total number of Sizes across each Line
                                        Columns.Add(vTotalNoOfSizesPerLine);
                                        // Total Number of Sizes in Footer Totals
                                        Columns.Add(vTotalNoSizesFooter2630);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size Col Cost 26/30</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        // Only output if Colour decription 26 <>''. ie that there are more than 5
                                        // colours, checked in 'Get Header' task
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostHeader12630.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        vTotalUnits26.Value += TempPackGrid.Units26;
                                        vTotalUnits27.Value += TempPackGrid.Units27;
                                        vTotalUnits28.Value += TempPackGrid.Units28;
                                        vTotalUnits29.Value += TempPackGrid.Units29;
                                        vTotalUnits30.Value += TempPackGrid.Units30;
                                        vTotalNoOfSizesPerLine.Value = TempPackGrid.Units26 + TempPackGrid.Units27 + TempPackGrid.Units28 + TempPackGrid.Units29 + TempPackGrid.Units30;
                                        vTotalNoSizesFooter2630.Value += vTotalNoOfSizesPerLine;
                                        // only output if Colour Description 26 <>'' see Task Suffix and any of the
                                        // 5 colours has a size
                                        if(TempPackGrid.Units26 != 0 || TempPackGrid.Units27 != 0 || TempPackGrid.Units28 != 0 || TempPackGrid.Units29 != 0 || TempPackGrid.Units30 != 0)
                                        {
                                            _layout.SizeColourCostDetail12630.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnEnd()
                                    {
                                        // same condition as TS and RS
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    
                                    #region Expressions
                                    internal Bool Exp_4()
                                    {
                                        return TempPackGrid.Units30 > 0;
                                    }
                                    internal Bool Exp_5()
                                    {
                                        return TempPackGrid.Units29 > 0;
                                    }
                                    internal Bool Exp_6()
                                    {
                                        return TempPackGrid.Units28 > 0;
                                    }
                                    internal Bool Exp_7()
                                    {
                                        return TempPackGrid.Units27 > 0;
                                    }
                                    internal Bool Exp_8()
                                    {
                                        return TempPackGrid.Units26 > 0;
                                    }
                                    internal Bool Exp_9()
                                    {
                                        return vTotalUnits30 > 0;
                                    }
                                    internal Bool Exp_10()
                                    {
                                        return vTotalUnits29 > 0;
                                    }
                                    internal Bool Exp_11()
                                    {
                                        return vTotalUnits28 > 0;
                                    }
                                    internal Bool Exp_12()
                                    {
                                        return vTotalUnits27 > 0;
                                    }
                                    internal Bool Exp_13()
                                    {
                                        return vTotalUnits26 > 0;
                                    }
                                    Bool Exp_24()
                                    {
                                        return _parent.vColourDescription26 != "" || _parent.vColourDescription27 != "" || _parent.vColourDescription28 != "" || _parent.vColourDescription29 != "" || _parent.vColourDescription30 != "";
                                    }
                                    internal Text Exp_26()
                                    {
                                        return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                    }
                                    #endregion
                                    
                                    
                                }
                                
                                /// <summary>Size Col Cost 31/35(P#400.1.1.1.1.3.3.6)</summary>
                                // Last change before Migration: 07/02/2013 11:23:11
                                internal class SizeColCost3135 : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>TempPackGrid</summary>
                                    internal readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
                                    
                                    /// <summary>Size</summary>
                                    readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                    
                                    /// <summary>Order Lot Size Cost</summary>
                                    internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { AllowRowLocking = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Total Units31</summary>
                                    internal readonly NumberColumn vTotalUnits31 = new NumberColumn("v:Total Units31", "7");
                                    
                                    /// <summary>v:Total Units32</summary>
                                    internal readonly NumberColumn vTotalUnits32 = new NumberColumn("v:Total Units32", "7");
                                    
                                    /// <summary>v:Total Units33</summary>
                                    internal readonly NumberColumn vTotalUnits33 = new NumberColumn("v:Total Units33", "7");
                                    
                                    /// <summary>v:Total Units34</summary>
                                    internal readonly NumberColumn vTotalUnits34 = new NumberColumn("v:Total Units34", "7");
                                    
                                    /// <summary>v:Total Units35</summary>
                                    internal readonly NumberColumn vTotalUnits35 = new NumberColumn("v:Total Units35", "7");
                                    
                                    /// <summary>v:Total No of Sizes per Line</summary>
                                    internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                    
                                    /// <summary>v:Total No Sizes Footer 31/35</summary>
                                    internal readonly NumberColumn vTotalNoSizesFooter3135 = new NumberColumn("v:Total No Sizes Footer 31/35", "9");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537SizeColCost3135 _layout;
                                    #endregion
                                    
                                    internal SzColCst15Same _parent;
                                    
                                    
                                    /// <summary>Size Col Cost 31/35(P#400.1.1.1.1.3.3.6)</summary>
                                    public SizeColCost3135(SzColCst15Same parent)
                                    {
                                        _parent = parent;
                                        Title = "Size Col Cost 31/35";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537SizeColCost3135(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = TempPackGrid;
                                        Relations.Add(Size1, 
                                        		Size1.SizeCode.IsEqualTo(TempPackGrid.SizeCode), 
                                        	Size1.SortByREF_Size_X1);
                                        
                                        Relations.Add(OrderLotSizeCost, 
                                        		OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.ORDER_NUMBER).And(
                                        		OrderLotSizeCost.SizeCode.IsEqualTo(TempPackGrid.SizeCode)).And(
                                        		OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1)), 
                                        	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                        
                                        Where.Add(TempPackGrid.User1.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                        Where.Add(TempPackGrid.ProductNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.PRODUCT_NUMBER));
                                        OrderBy = TempPackGrid.SortByPackGrid_X2;
                                        
                                        #region Columns
                                        
                                        Columns.Add(TempPackGrid.User1);
                                        Columns.Add(TempPackGrid.ProductNumber);
                                        Columns.Add(TempPackGrid.SizeCode);
                                        Columns.Add(TempPackGrid.SizeRelativePosition);
                                        Columns.Add(Size1.SizeCode);
                                        Columns.Add(Size1.SizeDescription);
                                        Columns.Add(Size1.FullDescription);
                                        // get cost from lot 1
                                        Columns.Add(OrderLotSizeCost.OrderNumber);
                                        Columns.Add(OrderLotSizeCost.LotNumber);
                                        Columns.Add(OrderLotSizeCost.ProductNumber);
                                        Columns.Add(OrderLotSizeCost.SizeCode);
                                        Columns.Add(OrderLotSizeCost.SizeCost);
                                        Columns.Add(OrderLotSizeCost.SizeQuantity);
                                        Columns.Add(TempPackGrid.Units31);
                                        Columns.Add(TempPackGrid.Units32);
                                        Columns.Add(TempPackGrid.Units33);
                                        Columns.Add(TempPackGrid.Units34);
                                        Columns.Add(TempPackGrid.Units35);
                                        
                                        Columns.Add(vTotalUnits31);
                                        Columns.Add(vTotalUnits32);
                                        Columns.Add(vTotalUnits33);
                                        Columns.Add(vTotalUnits34);
                                        Columns.Add(vTotalUnits35);
                                        // Total number of Sizes across each Line
                                        Columns.Add(vTotalNoOfSizesPerLine);
                                        // Total Number of Sizes in Footer Totals
                                        Columns.Add(vTotalNoSizesFooter3135);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size Col Cost 31/35</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        // Only output if Colour decription 31 <>''. ie that there are more than 5
                                        // colours, checked in 'Get Header' task
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostHeader13135.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        vTotalUnits31.Value += TempPackGrid.Units31;
                                        vTotalUnits32.Value += TempPackGrid.Units32;
                                        vTotalUnits33.Value += TempPackGrid.Units33;
                                        vTotalUnits34.Value += TempPackGrid.Units34;
                                        vTotalUnits35.Value += TempPackGrid.Units35;
                                        vTotalNoOfSizesPerLine.Value = TempPackGrid.Units31 + TempPackGrid.Units32 + TempPackGrid.Units33 + TempPackGrid.Units34 + TempPackGrid.Units35;
                                        vTotalNoSizesFooter3135.Value += vTotalNoOfSizesPerLine;
                                        // only output if Colour Description 31 <>'' see Task Suffix and any of the
                                        // 5 colours has a size
                                        if(TempPackGrid.Units31 != 0 || TempPackGrid.Units32 != 0 || TempPackGrid.Units33 != 0 || TempPackGrid.Units34 != 0 || TempPackGrid.Units35 != 0)
                                        {
                                            _layout.SizeColourCostDetail13135.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnEnd()
                                    {
                                        // same condition as TS and RS
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    
                                    #region Expressions
                                    internal Bool Exp_4()
                                    {
                                        return TempPackGrid.Units35 > 0;
                                    }
                                    internal Bool Exp_5()
                                    {
                                        return TempPackGrid.Units34 > 0;
                                    }
                                    internal Bool Exp_6()
                                    {
                                        return TempPackGrid.Units33 > 0;
                                    }
                                    internal Bool Exp_7()
                                    {
                                        return TempPackGrid.Units32 > 0;
                                    }
                                    internal Bool Exp_8()
                                    {
                                        return TempPackGrid.Units31 > 0;
                                    }
                                    internal Bool Exp_9()
                                    {
                                        return vTotalUnits35 > 0;
                                    }
                                    internal Bool Exp_10()
                                    {
                                        return vTotalUnits34 > 0;
                                    }
                                    internal Bool Exp_11()
                                    {
                                        return vTotalUnits33 > 0;
                                    }
                                    internal Bool Exp_12()
                                    {
                                        return vTotalUnits32 > 0;
                                    }
                                    internal Bool Exp_13()
                                    {
                                        return vTotalUnits31 > 0;
                                    }
                                    Bool Exp_24()
                                    {
                                        return _parent.vColourDescription31 != "" || _parent.vColourDescription32 != "" || _parent.vColourDescription32 != "" || _parent.vColourDescription34 != "" || _parent.vColourDescription35 != "";
                                    }
                                    internal Text Exp_26()
                                    {
                                        return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                    }
                                    #endregion
                                    
                                    
                                }
                                
                                /// <summary>Size Col Cost 36/40(P#400.1.1.1.1.3.3.7)</summary>
                                // Last change before Migration: 07/02/2013 11:23:21
                                internal class SizeColCost3640 : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>TempPackGrid</summary>
                                    internal readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
                                    
                                    /// <summary>Size</summary>
                                    readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                    
                                    /// <summary>Order Lot Size Cost</summary>
                                    internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { AllowRowLocking = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Total Units36</summary>
                                    internal readonly NumberColumn vTotalUnits36 = new NumberColumn("v:Total Units36", "7");
                                    
                                    /// <summary>v:Total Units37</summary>
                                    internal readonly NumberColumn vTotalUnits37 = new NumberColumn("v:Total Units37", "7");
                                    
                                    /// <summary>v:Total Units38</summary>
                                    internal readonly NumberColumn vTotalUnits38 = new NumberColumn("v:Total Units38", "7");
                                    
                                    /// <summary>v:Total Units39</summary>
                                    internal readonly NumberColumn vTotalUnits39 = new NumberColumn("v:Total Units39", "7");
                                    
                                    /// <summary>v:Total Units40</summary>
                                    internal readonly NumberColumn vTotalUnits40 = new NumberColumn("v:Total Units40", "7");
                                    
                                    /// <summary>v:Total No of Sizes per Line</summary>
                                    internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                    
                                    /// <summary>v:Total No Sizes Footer 36/40</summary>
                                    internal readonly NumberColumn vTotalNoSizesFooter3640 = new NumberColumn("v:Total No Sizes Footer 36/40", "9");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537SizeColCost3640 _layout;
                                    #endregion
                                    
                                    internal SzColCst15Same _parent;
                                    
                                    
                                    /// <summary>Size Col Cost 36/40(P#400.1.1.1.1.3.3.7)</summary>
                                    public SizeColCost3640(SzColCst15Same parent)
                                    {
                                        _parent = parent;
                                        Title = "Size Col Cost 36/40";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537SizeColCost3640(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = TempPackGrid;
                                        Relations.Add(Size1, 
                                        		Size1.SizeCode.IsEqualTo(TempPackGrid.SizeCode), 
                                        	Size1.SortByREF_Size_X1);
                                        
                                        Relations.Add(OrderLotSizeCost, 
                                        		OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.ORDER_NUMBER).And(
                                        		OrderLotSizeCost.SizeCode.IsEqualTo(TempPackGrid.SizeCode)).And(
                                        		OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1)), 
                                        	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                        
                                        Where.Add(TempPackGrid.User1.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                        Where.Add(TempPackGrid.ProductNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.PRODUCT_NUMBER));
                                        OrderBy = TempPackGrid.SortByPackGrid_X2;
                                        
                                        #region Columns
                                        
                                        Columns.Add(TempPackGrid.User1);
                                        Columns.Add(TempPackGrid.ProductNumber);
                                        Columns.Add(TempPackGrid.SizeCode);
                                        Columns.Add(TempPackGrid.SizeRelativePosition);
                                        Columns.Add(Size1.SizeCode);
                                        Columns.Add(Size1.SizeDescription);
                                        Columns.Add(Size1.FullDescription);
                                        // get cost from lot 1
                                        Columns.Add(OrderLotSizeCost.OrderNumber);
                                        Columns.Add(OrderLotSizeCost.LotNumber);
                                        Columns.Add(OrderLotSizeCost.ProductNumber);
                                        Columns.Add(OrderLotSizeCost.SizeCode);
                                        Columns.Add(OrderLotSizeCost.SizeCost);
                                        Columns.Add(OrderLotSizeCost.SizeQuantity);
                                        Columns.Add(TempPackGrid.Units36);
                                        Columns.Add(TempPackGrid.Units37);
                                        Columns.Add(TempPackGrid.Units38);
                                        Columns.Add(TempPackGrid.Units39);
                                        Columns.Add(TempPackGrid.Units40);
                                        
                                        Columns.Add(vTotalUnits36);
                                        Columns.Add(vTotalUnits37);
                                        Columns.Add(vTotalUnits38);
                                        Columns.Add(vTotalUnits39);
                                        Columns.Add(vTotalUnits40);
                                        // Total number of Sizes across each Line
                                        Columns.Add(vTotalNoOfSizesPerLine);
                                        // Total Number of Sizes in Footer Totals
                                        Columns.Add(vTotalNoSizesFooter3640);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size Col Cost 36/40</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        // Only output if Colour decription 36 <>''. ie that there are more than 5
                                        // colours, checked in 'Get Header' task
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostHeader13640.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        vTotalUnits36.Value += TempPackGrid.Units36;
                                        vTotalUnits37.Value += TempPackGrid.Units37;
                                        vTotalUnits38.Value += TempPackGrid.Units38;
                                        vTotalUnits39.Value += TempPackGrid.Units39;
                                        vTotalUnits40.Value += TempPackGrid.Units40;
                                        vTotalNoOfSizesPerLine.Value = TempPackGrid.Units36 + TempPackGrid.Units37 + TempPackGrid.Units38 + TempPackGrid.Units39 + TempPackGrid.Units40;
                                        vTotalNoSizesFooter3640.Value += vTotalNoOfSizesPerLine;
                                        // only output if Colour Description 36 <>'' see Task Suffix and any of the
                                        // 5 colours has a size
                                        if(TempPackGrid.Units36 != 0 || TempPackGrid.Units37 != 0 || TempPackGrid.Units38 != 0 || TempPackGrid.Units39 != 0 || TempPackGrid.Units40 != 0)
                                        {
                                            _layout.SizeColourCostDetail13640.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnEnd()
                                    {
                                        // same condition as TS and RS
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    
                                    #region Expressions
                                    internal Bool Exp_4()
                                    {
                                        return TempPackGrid.Units40 > 0;
                                    }
                                    internal Bool Exp_5()
                                    {
                                        return TempPackGrid.Units39 > 0;
                                    }
                                    internal Bool Exp_6()
                                    {
                                        return TempPackGrid.Units38 > 0;
                                    }
                                    internal Bool Exp_7()
                                    {
                                        return TempPackGrid.Units37 > 0;
                                    }
                                    internal Bool Exp_8()
                                    {
                                        return TempPackGrid.Units36 > 0;
                                    }
                                    internal Bool Exp_9()
                                    {
                                        return vTotalUnits40 > 0;
                                    }
                                    internal Bool Exp_10()
                                    {
                                        return vTotalUnits39 > 0;
                                    }
                                    internal Bool Exp_11()
                                    {
                                        return vTotalUnits38 > 0;
                                    }
                                    internal Bool Exp_12()
                                    {
                                        return vTotalUnits37 > 0;
                                    }
                                    internal Bool Exp_13()
                                    {
                                        return vTotalUnits36 > 0;
                                    }
                                    Bool Exp_24()
                                    {
                                        return _parent.vColourDescription36 != "" || _parent.vColourDescription37 != "" || _parent.vColourDescription38 != "" || _parent.vColourDescription39 != "" || _parent.vColourDescription40 != "";
                                    }
                                    internal Text Exp_26()
                                    {
                                        return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                    }
                                    #endregion
                                    
                                    
                                }
                                
                                /// <summary>Size Col Cost 41/45(P#400.1.1.1.1.3.3.8)</summary>
                                // Last change before Migration: 07/02/2013 11:23:33
                                internal class SizeColCost4145 : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>TempPackGrid</summary>
                                    internal readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
                                    
                                    /// <summary>Size</summary>
                                    readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                    
                                    /// <summary>Order Lot Size Cost</summary>
                                    internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { AllowRowLocking = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Total Units41</summary>
                                    internal readonly NumberColumn vTotalUnits41 = new NumberColumn("v:Total Units41", "7");
                                    
                                    /// <summary>v:Total Units42</summary>
                                    internal readonly NumberColumn vTotalUnits42 = new NumberColumn("v:Total Units42", "7");
                                    
                                    /// <summary>v:Total Units43</summary>
                                    internal readonly NumberColumn vTotalUnits43 = new NumberColumn("v:Total Units43", "7");
                                    
                                    /// <summary>v:Total Units44</summary>
                                    internal readonly NumberColumn vTotalUnits44 = new NumberColumn("v:Total Units44", "7");
                                    
                                    /// <summary>v:Total Units45</summary>
                                    internal readonly NumberColumn vTotalUnits45 = new NumberColumn("v:Total Units45", "7");
                                    
                                    /// <summary>v:Total No of Sizes per Line</summary>
                                    internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                    
                                    /// <summary>v:Total No Sizes Footer 41/45</summary>
                                    internal readonly NumberColumn vTotalNoSizesFooter4145 = new NumberColumn("v:Total No Sizes Footer 41/45", "9");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537SizeColCost4145 _layout;
                                    #endregion
                                    
                                    internal SzColCst15Same _parent;
                                    
                                    
                                    /// <summary>Size Col Cost 41/45(P#400.1.1.1.1.3.3.8)</summary>
                                    public SizeColCost4145(SzColCst15Same parent)
                                    {
                                        _parent = parent;
                                        Title = "Size Col Cost 41/45";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537SizeColCost4145(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = TempPackGrid;
                                        Relations.Add(Size1, 
                                        		Size1.SizeCode.IsEqualTo(TempPackGrid.SizeCode), 
                                        	Size1.SortByREF_Size_X1);
                                        
                                        Relations.Add(OrderLotSizeCost, 
                                        		OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.ORDER_NUMBER).And(
                                        		OrderLotSizeCost.SizeCode.IsEqualTo(TempPackGrid.SizeCode)).And(
                                        		OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1)), 
                                        	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                        
                                        Where.Add(TempPackGrid.User1.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                        Where.Add(TempPackGrid.ProductNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.PRODUCT_NUMBER));
                                        OrderBy = TempPackGrid.SortByPackGrid_X2;
                                        
                                        #region Columns
                                        
                                        Columns.Add(TempPackGrid.User1);
                                        Columns.Add(TempPackGrid.ProductNumber);
                                        Columns.Add(TempPackGrid.SizeCode);
                                        Columns.Add(TempPackGrid.SizeRelativePosition);
                                        Columns.Add(Size1.SizeCode);
                                        Columns.Add(Size1.SizeDescription);
                                        Columns.Add(Size1.FullDescription);
                                        // get cost from lot 1
                                        Columns.Add(OrderLotSizeCost.OrderNumber);
                                        Columns.Add(OrderLotSizeCost.LotNumber);
                                        Columns.Add(OrderLotSizeCost.ProductNumber);
                                        Columns.Add(OrderLotSizeCost.SizeCode);
                                        Columns.Add(OrderLotSizeCost.SizeCost);
                                        Columns.Add(OrderLotSizeCost.SizeQuantity);
                                        Columns.Add(TempPackGrid.Units41);
                                        Columns.Add(TempPackGrid.Units42);
                                        Columns.Add(TempPackGrid.Units43);
                                        Columns.Add(TempPackGrid.Units44);
                                        Columns.Add(TempPackGrid.Units45);
                                        
                                        Columns.Add(vTotalUnits41);
                                        Columns.Add(vTotalUnits42);
                                        Columns.Add(vTotalUnits43);
                                        Columns.Add(vTotalUnits44);
                                        Columns.Add(vTotalUnits45);
                                        // Total number of Sizes across each Line
                                        Columns.Add(vTotalNoOfSizesPerLine);
                                        // Total Number of Sizes in Footer Totals
                                        Columns.Add(vTotalNoSizesFooter4145);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size Col Cost 41/45</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        // Only output if Colour decription 41 <>''. ie that there are more than 5
                                        // colours, checked in 'Get Header' task
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostHeader14145.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        vTotalUnits41.Value += TempPackGrid.Units41;
                                        vTotalUnits42.Value += TempPackGrid.Units42;
                                        vTotalUnits43.Value += TempPackGrid.Units43;
                                        vTotalUnits44.Value += TempPackGrid.Units44;
                                        vTotalUnits45.Value += TempPackGrid.Units45;
                                        vTotalNoOfSizesPerLine.Value = TempPackGrid.Units41 + TempPackGrid.Units42 + TempPackGrid.Units43 + TempPackGrid.Units44 + TempPackGrid.Units45;
                                        vTotalNoSizesFooter4145.Value += vTotalNoOfSizesPerLine;
                                        // only output if Colour Description 41 <>'' see Task Suffix and any of the
                                        // 5 colours has a size
                                        if(TempPackGrid.Units41 != 0 || TempPackGrid.Units42 != 0 || TempPackGrid.Units43 != 0 || TempPackGrid.Units44 != 0 || TempPackGrid.Units45 != 0)
                                        {
                                            _layout.SizeColourCostDetail14145.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnEnd()
                                    {
                                        // same condition as TS and RS
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    
                                    #region Expressions
                                    internal Bool Exp_4()
                                    {
                                        return TempPackGrid.Units45 > 0;
                                    }
                                    internal Bool Exp_5()
                                    {
                                        return TempPackGrid.Units44 > 0;
                                    }
                                    internal Bool Exp_6()
                                    {
                                        return TempPackGrid.Units43 > 0;
                                    }
                                    internal Bool Exp_7()
                                    {
                                        return TempPackGrid.Units42 > 0;
                                    }
                                    internal Bool Exp_8()
                                    {
                                        return TempPackGrid.Units41 > 0;
                                    }
                                    internal Bool Exp_9()
                                    {
                                        return vTotalUnits45 > 0;
                                    }
                                    internal Bool Exp_10()
                                    {
                                        return vTotalUnits44 > 0;
                                    }
                                    internal Bool Exp_11()
                                    {
                                        return vTotalUnits43 > 0;
                                    }
                                    internal Bool Exp_12()
                                    {
                                        return vTotalUnits42 > 0;
                                    }
                                    internal Bool Exp_13()
                                    {
                                        return vTotalUnits41 > 0;
                                    }
                                    Bool Exp_24()
                                    {
                                        return _parent.vColourDescription41 != "" || _parent.vColourDescription42 != "" || _parent.vColourDescription43 != "" || _parent.vColourDescription44 != "" || _parent.vColourDescription45 != "";
                                    }
                                    internal Text Exp_26()
                                    {
                                        return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                    }
                                    #endregion
                                    
                                    
                                }
                                
                                /// <summary>Size Col Cost 46/50(P#400.1.1.1.1.3.3.9)</summary>
                                // Last change before Migration: 07/02/2013 11:23:45
                                internal class SizeColCost4650 : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>TempPackGrid</summary>
                                    internal readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
                                    
                                    /// <summary>Size</summary>
                                    readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                    
                                    /// <summary>Order Lot Size Cost</summary>
                                    internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { AllowRowLocking = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Total Units46</summary>
                                    internal readonly NumberColumn vTotalUnits46 = new NumberColumn("v:Total Units46", "7");
                                    
                                    /// <summary>v:Total Units47</summary>
                                    internal readonly NumberColumn vTotalUnits47 = new NumberColumn("v:Total Units47", "7");
                                    
                                    /// <summary>v:Total Units48</summary>
                                    internal readonly NumberColumn vTotalUnits48 = new NumberColumn("v:Total Units48", "7");
                                    
                                    /// <summary>v:Total Units49</summary>
                                    internal readonly NumberColumn vTotalUnits49 = new NumberColumn("v:Total Units49", "7");
                                    
                                    /// <summary>v:Total Units50</summary>
                                    internal readonly NumberColumn vTotalUnits50 = new NumberColumn("v:Total Units50", "7");
                                    
                                    /// <summary>v:Total No of Sizes per Line</summary>
                                    internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                    
                                    /// <summary>v:Total No Sizes Footer 46/50</summary>
                                    internal readonly NumberColumn vTotalNoSizesFooter4650 = new NumberColumn("v:Total No Sizes Footer 46/50", "9");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537SizeColCost4650 _layout;
                                    #endregion
                                    
                                    internal SzColCst15Same _parent;
                                    
                                    
                                    /// <summary>Size Col Cost 46/50(P#400.1.1.1.1.3.3.9)</summary>
                                    public SizeColCost4650(SzColCst15Same parent)
                                    {
                                        _parent = parent;
                                        Title = "Size Col Cost 46/50";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537SizeColCost4650(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = TempPackGrid;
                                        Relations.Add(Size1, 
                                        		Size1.SizeCode.IsEqualTo(TempPackGrid.SizeCode), 
                                        	Size1.SortByREF_Size_X1);
                                        
                                        Relations.Add(OrderLotSizeCost, 
                                        		OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.ORDER_NUMBER).And(
                                        		OrderLotSizeCost.SizeCode.IsEqualTo(TempPackGrid.SizeCode)).And(
                                        		OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1)), 
                                        	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                        
                                        Where.Add(TempPackGrid.User1.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                        Where.Add(TempPackGrid.ProductNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.PRODUCT_NUMBER));
                                        OrderBy = TempPackGrid.SortByPackGrid_X2;
                                        
                                        #region Columns
                                        
                                        Columns.Add(TempPackGrid.User1);
                                        Columns.Add(TempPackGrid.ProductNumber);
                                        Columns.Add(TempPackGrid.SizeCode);
                                        Columns.Add(TempPackGrid.SizeRelativePosition);
                                        Columns.Add(Size1.SizeCode);
                                        Columns.Add(Size1.SizeDescription);
                                        Columns.Add(Size1.FullDescription);
                                        // get cost from lot 1
                                        Columns.Add(OrderLotSizeCost.OrderNumber);
                                        Columns.Add(OrderLotSizeCost.LotNumber);
                                        Columns.Add(OrderLotSizeCost.ProductNumber);
                                        Columns.Add(OrderLotSizeCost.SizeCode);
                                        Columns.Add(OrderLotSizeCost.SizeCost);
                                        Columns.Add(OrderLotSizeCost.SizeQuantity);
                                        Columns.Add(TempPackGrid.Units46);
                                        Columns.Add(TempPackGrid.Units47);
                                        Columns.Add(TempPackGrid.Units48);
                                        Columns.Add(TempPackGrid.Units49);
                                        Columns.Add(TempPackGrid.Units50);
                                        
                                        Columns.Add(vTotalUnits46);
                                        Columns.Add(vTotalUnits47);
                                        Columns.Add(vTotalUnits48);
                                        Columns.Add(vTotalUnits49);
                                        Columns.Add(vTotalUnits50);
                                        // Total number of Sizes across each Line
                                        Columns.Add(vTotalNoOfSizesPerLine);
                                        // Total Number of Sizes in Footer Totals
                                        Columns.Add(vTotalNoSizesFooter4650);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size Col Cost 46/50</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        // Only output if Colour decription 46 <>''. ie that there are more than 5
                                        // colours, checked in 'Get Header' task
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostHeader14650.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        vTotalUnits46.Value += TempPackGrid.Units46;
                                        vTotalUnits47.Value += TempPackGrid.Units47;
                                        vTotalUnits48.Value += TempPackGrid.Units48;
                                        vTotalUnits49.Value += TempPackGrid.Units49;
                                        vTotalUnits50.Value += TempPackGrid.Units50;
                                        vTotalNoOfSizesPerLine.Value = TempPackGrid.Units46 + TempPackGrid.Units47 + TempPackGrid.Units48 + TempPackGrid.Units49 + TempPackGrid.Units50;
                                        vTotalNoSizesFooter4650.Value += vTotalNoOfSizesPerLine;
                                        // only output if Colour Description 46 <>'' see Task Suffix and any of the
                                        // 5 colours has a size
                                        if(TempPackGrid.Units46 != 0 || TempPackGrid.Units47 != 0 || TempPackGrid.Units48 != 0 || TempPackGrid.Units49 != 0 || TempPackGrid.Units50 != 0)
                                        {
                                            _layout.SizeColourCostDetail14650.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnEnd()
                                    {
                                        // same condition as TS and RS
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    
                                    #region Expressions
                                    internal Bool Exp_4()
                                    {
                                        return TempPackGrid.Units50 > 0;
                                    }
                                    internal Bool Exp_5()
                                    {
                                        return TempPackGrid.Units49 > 0;
                                    }
                                    internal Bool Exp_6()
                                    {
                                        return TempPackGrid.Units48 > 0;
                                    }
                                    internal Bool Exp_7()
                                    {
                                        return TempPackGrid.Units47 > 0;
                                    }
                                    internal Bool Exp_8()
                                    {
                                        return TempPackGrid.Units46 > 0;
                                    }
                                    internal Bool Exp_9()
                                    {
                                        return vTotalUnits50 > 0;
                                    }
                                    internal Bool Exp_10()
                                    {
                                        return vTotalUnits49 > 0;
                                    }
                                    internal Bool Exp_11()
                                    {
                                        return vTotalUnits48 > 0;
                                    }
                                    internal Bool Exp_12()
                                    {
                                        return vTotalUnits47 > 0;
                                    }
                                    internal Bool Exp_13()
                                    {
                                        return vTotalUnits46 > 0;
                                    }
                                    Bool Exp_24()
                                    {
                                        return _parent.vColourDescription46 != "" || _parent.vColourDescription47 != "" || _parent.vColourDescription48 != "" || _parent.vColourDescription49 != "" || _parent.vColourDescription50 != "";
                                    }
                                    internal Text Exp_26()
                                    {
                                        return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                    }
                                    #endregion
                                    
                                    
                                }
                                
                                /// <summary>Size Col Cost 51/55(P#400.1.1.1.1.3.3.10)</summary>
                                // Last change before Migration: 07/02/2013 11:23:55
                                internal class SizeColCost5155 : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>TempPackGrid</summary>
                                    internal readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
                                    
                                    /// <summary>Size</summary>
                                    readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                    
                                    /// <summary>Order Lot Size Cost</summary>
                                    internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { AllowRowLocking = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Total Units51</summary>
                                    internal readonly NumberColumn vTotalUnits51 = new NumberColumn("v:Total Units51", "7");
                                    
                                    /// <summary>v:Total Units52</summary>
                                    internal readonly NumberColumn vTotalUnits52 = new NumberColumn("v:Total Units52", "7");
                                    
                                    /// <summary>v:Total Units53</summary>
                                    internal readonly NumberColumn vTotalUnits53 = new NumberColumn("v:Total Units53", "7");
                                    
                                    /// <summary>v:Total Units54</summary>
                                    internal readonly NumberColumn vTotalUnits54 = new NumberColumn("v:Total Units54", "7");
                                    
                                    /// <summary>v:Total Units55</summary>
                                    internal readonly NumberColumn vTotalUnits55 = new NumberColumn("v:Total Units55", "7");
                                    
                                    /// <summary>v:Total No of Sizes per Line</summary>
                                    internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                    
                                    /// <summary>v:Total No Sizes Footer 51/55</summary>
                                    internal readonly NumberColumn vTotalNoSizesFooter5155 = new NumberColumn("v:Total No Sizes Footer 51/55", "9");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537SizeColCost5155 _layout;
                                    #endregion
                                    
                                    internal SzColCst15Same _parent;
                                    
                                    
                                    /// <summary>Size Col Cost 51/55(P#400.1.1.1.1.3.3.10)</summary>
                                    public SizeColCost5155(SzColCst15Same parent)
                                    {
                                        _parent = parent;
                                        Title = "Size Col Cost 51/55";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537SizeColCost5155(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = TempPackGrid;
                                        Relations.Add(Size1, 
                                        		Size1.SizeCode.IsEqualTo(TempPackGrid.SizeCode), 
                                        	Size1.SortByREF_Size_X1);
                                        
                                        Relations.Add(OrderLotSizeCost, 
                                        		OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.ORDER_NUMBER).And(
                                        		OrderLotSizeCost.SizeCode.IsEqualTo(TempPackGrid.SizeCode)).And(
                                        		OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1)), 
                                        	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                        
                                        Where.Add(TempPackGrid.User1.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                        Where.Add(TempPackGrid.ProductNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.PRODUCT_NUMBER));
                                        OrderBy = TempPackGrid.SortByPackGrid_X2;
                                        
                                        #region Columns
                                        
                                        Columns.Add(TempPackGrid.User1);
                                        Columns.Add(TempPackGrid.ProductNumber);
                                        Columns.Add(TempPackGrid.SizeCode);
                                        Columns.Add(TempPackGrid.SizeRelativePosition);
                                        Columns.Add(Size1.SizeCode);
                                        Columns.Add(Size1.SizeDescription);
                                        Columns.Add(Size1.FullDescription);
                                        // get cost from lot 1
                                        Columns.Add(OrderLotSizeCost.OrderNumber);
                                        Columns.Add(OrderLotSizeCost.LotNumber);
                                        Columns.Add(OrderLotSizeCost.ProductNumber);
                                        Columns.Add(OrderLotSizeCost.SizeCode);
                                        Columns.Add(OrderLotSizeCost.SizeCost);
                                        Columns.Add(OrderLotSizeCost.SizeQuantity);
                                        Columns.Add(TempPackGrid.Units51);
                                        Columns.Add(TempPackGrid.Units52);
                                        Columns.Add(TempPackGrid.Units53);
                                        Columns.Add(TempPackGrid.Units54);
                                        Columns.Add(TempPackGrid.Units55);
                                        
                                        Columns.Add(vTotalUnits51);
                                        Columns.Add(vTotalUnits52);
                                        Columns.Add(vTotalUnits53);
                                        Columns.Add(vTotalUnits54);
                                        Columns.Add(vTotalUnits55);
                                        // Total number of Sizes across each Line
                                        Columns.Add(vTotalNoOfSizesPerLine);
                                        // Total Number of Sizes in Footer Totals
                                        Columns.Add(vTotalNoSizesFooter5155);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size Col Cost 51/55</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        // Only output if Colour decription 51 <>''. ie that there are more than 5
                                        // colours, checked in 'Get Header' task
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostHeader15155.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        vTotalUnits51.Value += TempPackGrid.Units51;
                                        vTotalUnits52.Value += TempPackGrid.Units52;
                                        vTotalUnits53.Value += TempPackGrid.Units53;
                                        vTotalUnits54.Value += TempPackGrid.Units54;
                                        vTotalUnits55.Value += TempPackGrid.Units55;
                                        vTotalNoOfSizesPerLine.Value = TempPackGrid.Units51 + TempPackGrid.Units52 + TempPackGrid.Units53 + TempPackGrid.Units54 + TempPackGrid.Units55;
                                        vTotalNoSizesFooter5155.Value += vTotalNoOfSizesPerLine;
                                        // only output if Colour Description 51 <>'' see Task Suffix and any of the
                                        // 5 colours has a size
                                        if(TempPackGrid.Units51 != 0 || TempPackGrid.Units52 != 0 || TempPackGrid.Units53 != 0 || TempPackGrid.Units54 != 0 || TempPackGrid.Units55 != 0)
                                        {
                                            _layout.SizeColourCostDetail15155.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnEnd()
                                    {
                                        // same condition as TS and RS
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    
                                    #region Expressions
                                    internal Bool Exp_4()
                                    {
                                        return TempPackGrid.Units55 > 0;
                                    }
                                    internal Bool Exp_5()
                                    {
                                        return TempPackGrid.Units54 > 0;
                                    }
                                    internal Bool Exp_6()
                                    {
                                        return TempPackGrid.Units53 > 0;
                                    }
                                    internal Bool Exp_7()
                                    {
                                        return TempPackGrid.Units52 > 0;
                                    }
                                    internal Bool Exp_8()
                                    {
                                        return TempPackGrid.Units51 > 0;
                                    }
                                    internal Bool Exp_9()
                                    {
                                        return vTotalUnits55 > 0;
                                    }
                                    internal Bool Exp_10()
                                    {
                                        return vTotalUnits54 > 0;
                                    }
                                    internal Bool Exp_11()
                                    {
                                        return vTotalUnits53 > 0;
                                    }
                                    internal Bool Exp_12()
                                    {
                                        return vTotalUnits52 > 0;
                                    }
                                    internal Bool Exp_13()
                                    {
                                        return vTotalUnits51 > 0;
                                    }
                                    Bool Exp_24()
                                    {
                                        return _parent.vColourDescription51 != "" || _parent.vColourDescription52 != "" || _parent.vColourDescription53 != "" || _parent.vColourDescription54 != "" || _parent.vColourDescription55 != "";
                                    }
                                    internal Text Exp_26()
                                    {
                                        return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                    }
                                    #endregion
                                    
                                    
                                }
                                
                                /// <summary>Size Col Cost 56/60(P#400.1.1.1.1.3.3.11)</summary>
                                // Last change before Migration: 07/02/2013 11:24:09
                                internal class SizeColCost5660 : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>TempPackGrid</summary>
                                    internal readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
                                    
                                    /// <summary>Size</summary>
                                    readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                    
                                    /// <summary>Order Lot Size Cost</summary>
                                    internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { AllowRowLocking = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Total Units56</summary>
                                    internal readonly NumberColumn vTotalUnits56 = new NumberColumn("v:Total Units56", "7");
                                    
                                    /// <summary>v:Total Units57</summary>
                                    internal readonly NumberColumn vTotalUnits57 = new NumberColumn("v:Total Units57", "7");
                                    
                                    /// <summary>v:Total Units58</summary>
                                    internal readonly NumberColumn vTotalUnits58 = new NumberColumn("v:Total Units58", "7");
                                    
                                    /// <summary>v:Total Units59</summary>
                                    internal readonly NumberColumn vTotalUnits59 = new NumberColumn("v:Total Units59", "7");
                                    
                                    /// <summary>v:Total Units60</summary>
                                    internal readonly NumberColumn vTotalUnits60 = new NumberColumn("v:Total Units60", "7");
                                    
                                    /// <summary>v:Total No of Sizes per Line</summary>
                                    internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                    
                                    /// <summary>v:Total No Sizes Footer 55/60</summary>
                                    internal readonly NumberColumn vTotalNoSizesFooter5560 = new NumberColumn("v:Total No Sizes Footer 55/60", "9");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537SizeColCost5660 _layout;
                                    #endregion
                                    
                                    internal SzColCst15Same _parent;
                                    
                                    
                                    /// <summary>Size Col Cost 56/60(P#400.1.1.1.1.3.3.11)</summary>
                                    public SizeColCost5660(SzColCst15Same parent)
                                    {
                                        _parent = parent;
                                        Title = "Size Col Cost 56/60";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537SizeColCost5660(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = TempPackGrid;
                                        Relations.Add(Size1, 
                                        		Size1.SizeCode.IsEqualTo(TempPackGrid.SizeCode), 
                                        	Size1.SortByREF_Size_X1);
                                        
                                        Relations.Add(OrderLotSizeCost, 
                                        		OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.ORDER_NUMBER).And(
                                        		OrderLotSizeCost.SizeCode.IsEqualTo(TempPackGrid.SizeCode)).And(
                                        		OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1)), 
                                        	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                        
                                        Where.Add(TempPackGrid.User1.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                        Where.Add(TempPackGrid.ProductNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.PRODUCT_NUMBER));
                                        OrderBy = TempPackGrid.SortByPackGrid_X2;
                                        
                                        #region Columns
                                        
                                        Columns.Add(TempPackGrid.User1);
                                        Columns.Add(TempPackGrid.ProductNumber);
                                        Columns.Add(TempPackGrid.SizeCode);
                                        Columns.Add(TempPackGrid.SizeRelativePosition);
                                        Columns.Add(Size1.SizeCode);
                                        Columns.Add(Size1.SizeDescription);
                                        Columns.Add(Size1.FullDescription);
                                        // get cost from lot 1
                                        Columns.Add(OrderLotSizeCost.OrderNumber);
                                        Columns.Add(OrderLotSizeCost.LotNumber);
                                        Columns.Add(OrderLotSizeCost.ProductNumber);
                                        Columns.Add(OrderLotSizeCost.SizeCode);
                                        Columns.Add(OrderLotSizeCost.SizeCost);
                                        Columns.Add(OrderLotSizeCost.SizeQuantity);
                                        Columns.Add(TempPackGrid.Units56);
                                        Columns.Add(TempPackGrid.Units57);
                                        Columns.Add(TempPackGrid.Units58);
                                        Columns.Add(TempPackGrid.Units59);
                                        Columns.Add(TempPackGrid.Units60);
                                        
                                        Columns.Add(vTotalUnits56);
                                        Columns.Add(vTotalUnits57);
                                        Columns.Add(vTotalUnits58);
                                        Columns.Add(vTotalUnits59);
                                        Columns.Add(vTotalUnits60);
                                        // Total number of Sizes across each Line
                                        Columns.Add(vTotalNoOfSizesPerLine);
                                        // Total Number of Sizes in Footer Totals
                                        Columns.Add(vTotalNoSizesFooter5560);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size Col Cost 56/60</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        // Only output if Colour decription 56 <>''. ie that there are more than 5
                                        // colours, checked in 'Get Header' task
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostHeader15560.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        vTotalUnits56.Value += TempPackGrid.Units56;
                                        vTotalUnits57.Value += TempPackGrid.Units57;
                                        vTotalUnits58.Value += TempPackGrid.Units58;
                                        vTotalUnits59.Value += TempPackGrid.Units59;
                                        vTotalUnits60.Value += TempPackGrid.Units60;
                                        vTotalNoOfSizesPerLine.Value = TempPackGrid.Units56 + TempPackGrid.Units57 + TempPackGrid.Units58 + TempPackGrid.Units59 + TempPackGrid.Units60;
                                        vTotalNoSizesFooter5560.Value += vTotalNoOfSizesPerLine;
                                        // only output if Colour Description 56 <>'' see Task Suffix and any of the
                                        // 5 colours has a size
                                        if(TempPackGrid.Units56 != 0 || TempPackGrid.Units57 != 0 || TempPackGrid.Units58 != 0 || TempPackGrid.Units59 != 0 || TempPackGrid.Units60 != 0)
                                        {
                                            _layout.SizeColourCostDetail15560.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnEnd()
                                    {
                                        // same condition as TS and RS
                                        if(Exp_24())
                                        {
                                            _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    
                                    #region Expressions
                                    internal Bool Exp_4()
                                    {
                                        return TempPackGrid.Units60 > 0;
                                    }
                                    internal Bool Exp_5()
                                    {
                                        return TempPackGrid.Units59 > 0;
                                    }
                                    internal Bool Exp_6()
                                    {
                                        return TempPackGrid.Units58 > 0;
                                    }
                                    internal Bool Exp_7()
                                    {
                                        return TempPackGrid.Units57 > 0;
                                    }
                                    internal Bool Exp_8()
                                    {
                                        return TempPackGrid.Units56 > 0;
                                    }
                                    internal Bool Exp_9()
                                    {
                                        return vTotalUnits60 > 0;
                                    }
                                    internal Bool Exp_10()
                                    {
                                        return vTotalUnits59 > 0;
                                    }
                                    internal Bool Exp_11()
                                    {
                                        return vTotalUnits58 > 0;
                                    }
                                    internal Bool Exp_12()
                                    {
                                        return vTotalUnits57 > 0;
                                    }
                                    internal Bool Exp_13()
                                    {
                                        return vTotalUnits56 > 0;
                                    }
                                    Bool Exp_24()
                                    {
                                        return _parent.vColourDescription56 != "" || _parent.vColourDescription57 != "" || _parent.vColourDescription58 != "" || _parent.vColourDescription59 != "" || _parent.vColourDescription60 != "";
                                    }
                                    internal Text Exp_26()
                                    {
                                        return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                    }
                                    #endregion
                                    
                                    
                                }
                                
                                /// <summary>Get Headers(P#400.1.1.1.1.3.3.12)</summary>
                                // Last change before Migration: 24/10/2011 10:38:07
                                class GetHeaders : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>TempPackGrid</summary>
                                    readonly Models.TempPackGrid TempPackGrid = new Models.TempPackGrid { AllowRowLocking = true };
                                    #endregion
                                    
                                    SzColCst15Same _parent;
                                    
                                    
                                    /// <summary>Get Headers(P#400.1.1.1.1.3.3.12)</summary>
                                    public GetHeaders(SzColCst15Same parent)
                                    {
                                        _parent = parent;
                                        Title = "Get Headers";
                                        InitializeDataView();
                                    }
                                    void InitializeDataView()
                                    {
                                        From = TempPackGrid;
                                        Where.Add(TempPackGrid.User1.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                        Where.Add(TempPackGrid.ProductNumber.IsEqualTo(_parent._parent._parent._parent._parent.Product.ProductNumber));
                                        OrderBy = TempPackGrid.SortByPackGrid_X1;
                                        
                                        #region Columns
                                        
                                        Columns.Add(TempPackGrid.User1);
                                        Columns.Add(TempPackGrid.ProductNumber);
                                        Columns.Add(TempPackGrid.SizeCode);
                                        Columns.Add(TempPackGrid.ColourDesc01);
                                        Columns.Add(TempPackGrid.ColourDesc02);
                                        Columns.Add(TempPackGrid.ColourDesc03);
                                        Columns.Add(TempPackGrid.ColourDesc04);
                                        Columns.Add(TempPackGrid.ColourDesc05);
                                        Columns.Add(TempPackGrid.ColourDesc06);
                                        Columns.Add(TempPackGrid.ColourDesc07);
                                        Columns.Add(TempPackGrid.ColourDesc08);
                                        Columns.Add(TempPackGrid.ColourDesc09);
                                        Columns.Add(TempPackGrid.ColourDesc10);
                                        Columns.Add(TempPackGrid.ColourDesc11);
                                        Columns.Add(TempPackGrid.ColourDesc12);
                                        Columns.Add(TempPackGrid.ColourDesc13);
                                        Columns.Add(TempPackGrid.ColourDesc14);
                                        Columns.Add(TempPackGrid.ColourDesc15);
                                        Columns.Add(TempPackGrid.ColourDesc16);
                                        Columns.Add(TempPackGrid.ColourDesc17);
                                        Columns.Add(TempPackGrid.ColourDesc18);
                                        Columns.Add(TempPackGrid.ColourDesc19);
                                        Columns.Add(TempPackGrid.ColourDesc20);
                                        Columns.Add(TempPackGrid.ColourDesc21);
                                        Columns.Add(TempPackGrid.ColourDesc22);
                                        Columns.Add(TempPackGrid.ColourDesc23);
                                        Columns.Add(TempPackGrid.ColourDesc24);
                                        Columns.Add(TempPackGrid.ColourDesc25);
                                        Columns.Add(TempPackGrid.ColourDesc26);
                                        Columns.Add(TempPackGrid.ColourDesc27);
                                        Columns.Add(TempPackGrid.ColourDesc28);
                                        Columns.Add(TempPackGrid.ColourDesc29);
                                        Columns.Add(TempPackGrid.ColourDesc30);
                                        Columns.Add(TempPackGrid.ColourDesc31);
                                        Columns.Add(TempPackGrid.ColourDesc32);
                                        Columns.Add(TempPackGrid.ColourDesc33);
                                        Columns.Add(TempPackGrid.ColourDesc34);
                                        Columns.Add(TempPackGrid.ColourDesc35);
                                        Columns.Add(TempPackGrid.ColourDesc36);
                                        Columns.Add(TempPackGrid.ColourDesc37);
                                        Columns.Add(TempPackGrid.ColourDesc38);
                                        Columns.Add(TempPackGrid.ColourDesc39);
                                        Columns.Add(TempPackGrid.ColourDesc40);
                                        Columns.Add(TempPackGrid.ColourDesc41);
                                        Columns.Add(TempPackGrid.ColourDesc42);
                                        Columns.Add(TempPackGrid.ColourDesc43);
                                        Columns.Add(TempPackGrid.ColourDesc44);
                                        Columns.Add(TempPackGrid.ColourDesc45);
                                        Columns.Add(TempPackGrid.ColourDesc46);
                                        Columns.Add(TempPackGrid.ColourDesc47);
                                        Columns.Add(TempPackGrid.ColourDesc48);
                                        Columns.Add(TempPackGrid.ColourDesc49);
                                        Columns.Add(TempPackGrid.ColourDesc50);
                                        Columns.Add(TempPackGrid.ColourDesc51);
                                        Columns.Add(TempPackGrid.ColourDesc52);
                                        Columns.Add(TempPackGrid.ColourDesc53);
                                        Columns.Add(TempPackGrid.ColourDesc54);
                                        Columns.Add(TempPackGrid.ColourDesc55);
                                        Columns.Add(TempPackGrid.ColourDesc56);
                                        Columns.Add(TempPackGrid.ColourDesc57);
                                        Columns.Add(TempPackGrid.ColourDesc58);
                                        Columns.Add(TempPackGrid.ColourDesc59);
                                        Columns.Add(TempPackGrid.ColourDesc60);
                                        #endregion
                                    }
                                    
                                    /// <summary>Get Headers</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        Exit(ExitTiming.AfterRow);
                                        TransactionScope = TransactionScopes.Task;
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        _parent.vColourDescription01.Value = TempPackGrid.ColourDesc01;
                                        _parent.vColourDescription02.Value = TempPackGrid.ColourDesc02;
                                        _parent.vColourDescription03.Value = TempPackGrid.ColourDesc03;
                                        _parent.vColourDescription04.Value = TempPackGrid.ColourDesc04;
                                        _parent.vColourDescription05.Value = TempPackGrid.ColourDesc05;
                                        _parent.vColourDescription06.Value = TempPackGrid.ColourDesc06;
                                        _parent.vColourDescription07.Value = TempPackGrid.ColourDesc07;
                                        _parent.vColourDescription08.Value = TempPackGrid.ColourDesc08;
                                        _parent.vColourDescription09.Value = TempPackGrid.ColourDesc09;
                                        _parent.vColourDescription10.Value = TempPackGrid.ColourDesc10;
                                        _parent.vColourDescription11.Value = TempPackGrid.ColourDesc11;
                                        _parent.vColourDescription12.Value = TempPackGrid.ColourDesc12;
                                        _parent.vColourDescription13.Value = TempPackGrid.ColourDesc13;
                                        _parent.vColourDescription14.Value = TempPackGrid.ColourDesc14;
                                        _parent.vColourDescription15.Value = TempPackGrid.ColourDesc15;
                                        _parent.vColourDescription16.Value = TempPackGrid.ColourDesc16;
                                        _parent.vColourDescription17.Value = TempPackGrid.ColourDesc17;
                                        _parent.vColourDescription18.Value = TempPackGrid.ColourDesc18;
                                        _parent.vColourDescription19.Value = TempPackGrid.ColourDesc19;
                                        _parent.vColourDescription20.Value = TempPackGrid.ColourDesc20;
                                        _parent.vColourDescription21.Value = TempPackGrid.ColourDesc21;
                                        _parent.vColourDescription22.Value = TempPackGrid.ColourDesc22;
                                        _parent.vColourDescription23.Value = TempPackGrid.ColourDesc23;
                                        _parent.vColourDescription24.Value = TempPackGrid.ColourDesc24;
                                        _parent.vColourDescription25.Value = TempPackGrid.ColourDesc25;
                                        _parent.vColourDescription26.Value = TempPackGrid.ColourDesc26;
                                        _parent.vColourDescription27.Value = TempPackGrid.ColourDesc27;
                                        _parent.vColourDescription28.Value = TempPackGrid.ColourDesc28;
                                        _parent.vColourDescription29.Value = TempPackGrid.ColourDesc29;
                                        _parent.vColourDescription30.Value = TempPackGrid.ColourDesc30;
                                        _parent.vColourDescription31.Value = TempPackGrid.ColourDesc31;
                                        _parent.vColourDescription32.Value = TempPackGrid.ColourDesc32;
                                        _parent.vColourDescription33.Value = TempPackGrid.ColourDesc33;
                                        _parent.vColourDescription34.Value = TempPackGrid.ColourDesc34;
                                        _parent.vColourDescription35.Value = TempPackGrid.ColourDesc35;
                                        _parent.vColourDescription36.Value = TempPackGrid.ColourDesc36;
                                        _parent.vColourDescription37.Value = TempPackGrid.ColourDesc37;
                                        _parent.vColourDescription38.Value = TempPackGrid.ColourDesc38;
                                        _parent.vColourDescription39.Value = TempPackGrid.ColourDesc39;
                                        _parent.vColourDescription40.Value = TempPackGrid.ColourDesc40;
                                        _parent.vColourDescription41.Value = TempPackGrid.ColourDesc41;
                                        _parent.vColourDescription42.Value = TempPackGrid.ColourDesc42;
                                        _parent.vColourDescription43.Value = TempPackGrid.ColourDesc43;
                                        _parent.vColourDescription44.Value = TempPackGrid.ColourDesc44;
                                        _parent.vColourDescription45.Value = TempPackGrid.ColourDesc45;
                                        _parent.vColourDescription46.Value = TempPackGrid.ColourDesc46;
                                        _parent.vColourDescription47.Value = TempPackGrid.ColourDesc47;
                                        _parent.vColourDescription48.Value = TempPackGrid.ColourDesc48;
                                        _parent.vColourDescription49.Value = TempPackGrid.ColourDesc49;
                                        _parent.vColourDescription50.Value = TempPackGrid.ColourDesc50;
                                        _parent.vColourDescription51.Value = TempPackGrid.ColourDesc51;
                                        _parent.vColourDescription52.Value = TempPackGrid.ColourDesc52;
                                        _parent.vColourDescription53.Value = TempPackGrid.ColourDesc53;
                                        _parent.vColourDescription54.Value = TempPackGrid.ColourDesc54;
                                        _parent.vColourDescription55.Value = TempPackGrid.ColourDesc55;
                                        _parent.vColourDescription56.Value = TempPackGrid.ColourDesc56;
                                        _parent.vColourDescription57.Value = TempPackGrid.ColourDesc57;
                                        _parent.vColourDescription58.Value = TempPackGrid.ColourDesc58;
                                        _parent.vColourDescription59.Value = TempPackGrid.ColourDesc59;
                                        _parent.vColourDescription60.Value = TempPackGrid.ColourDesc60;
                                    }
                                    
                                    
                                }
                            }
                            
                            /// <summary>Size Cost Diffs(P#400.1.1.1.1.3.4)</summary>
                            // Last change before Migration: 08/11/2012 14:12:43
                            internal class SizeCostDiffs : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>Lot</summary>
                                internal readonly Models.Lot Lot = new Models.Lot { ReadOnly = true };
                                #endregion
                                
                                #region Printing Layouts
                                Printing.OrderPrintPo1537SizeCostDiffs _layout;
                                #endregion
                                
                                LotDetails _parent;
                                
                                
                                /// <summary>Size Cost Diffs(P#400.1.1.1.1.3.4)</summary>
                                public SizeCostDiffs(LotDetails parent)
                                {
                                    _parent = parent;
                                    Title = "Size Cost Diffs";
                                    InitializeDataView();
                                    _layout = new Printing.OrderPrintPo1537SizeCostDiffs(this);
                                    _layout.Layouts.Add(_parent._parent._parent._parent._parent._layout);
                                }
                                void InitializeDataView()
                                {
                                    From = Lot;
                                    Where.Add(Lot.ORDER_NUMBER.IsEqualTo(_parent.Lot.ORDER_NUMBER));
                                    OrderBy = Lot.SortBySHP_LOTS_X1;
                                    
                                    #region Columns
                                    
                                    Columns.Add(Lot.ORDER_NUMBER);
                                    Columns.Add(Lot.LOT_NUMBER);
                                    #endregion
                                }
                                
                                /// <summary>Size Cost Diffs</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    KeepChildRelationCacheAlive = true;
                                    KeepViewVisibleAfterExit = true;
                                    _layout.Reset();
                                }
                                protected override void OnLeaveRow()
                                {
                                    _layout.LotNumber1.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    
                                    Cached<SizeColCost15>().Run();
                                }
                                
                                
                                
                                /// <summary>Size Col Cost 1/5(P#400.1.1.1.1.3.4.1)</summary>
                                // Last change before Migration: 08/11/2012 14:12:43
                                internal class SizeColCost15 : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>Work Cols Sizes by Lot</summary>
                                    internal readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                    
                                    /// <summary>Size</summary>
                                    readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                    
                                    /// <summary>Order Lot Size Cost</summary>
                                    internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Total Colours01</summary>
                                    internal readonly NumberColumn vTotalColours01 = new NumberColumn("v:Total Colours01", "7");
                                    
                                    /// <summary>v:Total Colours02</summary>
                                    internal readonly NumberColumn vTotalColours02 = new NumberColumn("v:Total Colours02", "7");
                                    
                                    /// <summary>v:Total Colours03</summary>
                                    internal readonly NumberColumn vTotalColours03 = new NumberColumn("v:Total Colours03", "7");
                                    
                                    /// <summary>v:Total Colours04</summary>
                                    internal readonly NumberColumn vTotalColours04 = new NumberColumn("v:Total Colours04", "7");
                                    
                                    /// <summary>v:Total Colours05</summary>
                                    internal readonly NumberColumn vTotalColours05 = new NumberColumn("v:Total Colours05", "7");
                                    
                                    /// <summary>v:Line Total Number Sizes 1/5</summary>
                                    internal readonly NumberColumn vLineTotalNumberSizes15 = new NumberColumn("v:Line Total Number Sizes 1/5", "9");
                                    
                                    /// <summary>v:Footer Total No of Sizes 1/5</summary>
                                    internal readonly NumberColumn vFooterTotalNoOfSizes15 = new NumberColumn("v:Footer Total No of Sizes 1/5", "9");
                                    
                                    /// <summary>v:Colour Description01</summary>
                                    internal readonly TextColumn vColourDescription01 = new TextColumn("v:Colour Description01", "UX9A");
                                    
                                    /// <summary>v:Colour Description02</summary>
                                    internal readonly TextColumn vColourDescription02 = new TextColumn("v:Colour Description02", "UX9A");
                                    
                                    /// <summary>v:Colour Description03</summary>
                                    internal readonly TextColumn vColourDescription03 = new TextColumn("v:Colour Description03", "UX9A");
                                    
                                    /// <summary>v:Colour Description04</summary>
                                    internal readonly TextColumn vColourDescription04 = new TextColumn("v:Colour Description04", "UX9A");
                                    
                                    /// <summary>v:Colour Description05</summary>
                                    internal readonly TextColumn vColourDescription05 = new TextColumn("v:Colour Description05", "UX9A");
                                    
                                    /// <summary>v:Colour Description06</summary>
                                    internal readonly TextColumn vColourDescription06 = new TextColumn("v:Colour Description06", "UX9A");
                                    
                                    /// <summary>v:Colour Description07</summary>
                                    internal readonly TextColumn vColourDescription07 = new TextColumn("v:Colour Description07", "UX9A");
                                    
                                    /// <summary>v:Colour Description08</summary>
                                    internal readonly TextColumn vColourDescription08 = new TextColumn("v:Colour Description08", "UX9A");
                                    
                                    /// <summary>v:Colour Description09</summary>
                                    internal readonly TextColumn vColourDescription09 = new TextColumn("v:Colour Description09", "UX9A");
                                    
                                    /// <summary>v:Colour Description10</summary>
                                    internal readonly TextColumn vColourDescription10 = new TextColumn("v:Colour Description10", "UX9A");
                                    
                                    /// <summary>v:Colour Description11</summary>
                                    internal readonly TextColumn vColourDescription11 = new TextColumn("v:Colour Description11", "UX9A");
                                    
                                    /// <summary>v:Colour Description12</summary>
                                    internal readonly TextColumn vColourDescription12 = new TextColumn("v:Colour Description12", "UX9A");
                                    
                                    /// <summary>v:Colour Description13</summary>
                                    internal readonly TextColumn vColourDescription13 = new TextColumn("v:Colour Description13", "UX9A");
                                    
                                    /// <summary>v:Colour Description14</summary>
                                    internal readonly TextColumn vColourDescription14 = new TextColumn("v:Colour Description14", "UX9A");
                                    
                                    /// <summary>v:Colour Description15</summary>
                                    internal readonly TextColumn vColourDescription15 = new TextColumn("v:Colour Description15", "UX9A");
                                    
                                    /// <summary>v:Colour Description16</summary>
                                    internal readonly TextColumn vColourDescription16 = new TextColumn("v:Colour Description16", "UX9A");
                                    
                                    /// <summary>v:Colour Description17</summary>
                                    internal readonly TextColumn vColourDescription17 = new TextColumn("v:Colour Description17", "UX9A");
                                    
                                    /// <summary>v:Colour Description18</summary>
                                    internal readonly TextColumn vColourDescription18 = new TextColumn("v:Colour Description18", "UX9A");
                                    
                                    /// <summary>v:Colour Description19</summary>
                                    internal readonly TextColumn vColourDescription19 = new TextColumn("v:Colour Description19", "UX9A");
                                    
                                    /// <summary>v:Colour Description20</summary>
                                    internal readonly TextColumn vColourDescription20 = new TextColumn("v:Colour Description20", "UX9A");
                                    
                                    /// <summary>v:Colour Description21</summary>
                                    internal readonly TextColumn vColourDescription21 = new TextColumn("v:Colour Description21", "UX9A");
                                    
                                    /// <summary>v:Colour Description22</summary>
                                    internal readonly TextColumn vColourDescription22 = new TextColumn("v:Colour Description22", "UX9A");
                                    
                                    /// <summary>v:Colour Description23</summary>
                                    internal readonly TextColumn vColourDescription23 = new TextColumn("v:Colour Description23", "UX9A");
                                    
                                    /// <summary>v:Colour Description24</summary>
                                    internal readonly TextColumn vColourDescription24 = new TextColumn("v:Colour Description24", "UX9A");
                                    
                                    /// <summary>v:Colour Description25</summary>
                                    internal readonly TextColumn vColourDescription25 = new TextColumn("v:Colour Description25", "UX9A");
                                    
                                    /// <summary>v:Colour Description26</summary>
                                    internal readonly TextColumn vColourDescription26 = new TextColumn("v:Colour Description26", "UX9A");
                                    
                                    /// <summary>v:Colour Description27</summary>
                                    internal readonly TextColumn vColourDescription27 = new TextColumn("v:Colour Description27", "UX9A");
                                    
                                    /// <summary>v:Colour Description28</summary>
                                    internal readonly TextColumn vColourDescription28 = new TextColumn("v:Colour Description28", "UX9A");
                                    
                                    /// <summary>v:Colour Description29</summary>
                                    internal readonly TextColumn vColourDescription29 = new TextColumn("v:Colour Description29", "UX9A");
                                    
                                    /// <summary>v:Colour Description30</summary>
                                    internal readonly TextColumn vColourDescription30 = new TextColumn("v:Colour Description30", "UX9A");
                                    
                                    /// <summary>v:Colour Description31</summary>
                                    internal readonly TextColumn vColourDescription31 = new TextColumn("v:Colour Description31", "UX9A");
                                    
                                    /// <summary>v:Colour Description32</summary>
                                    internal readonly TextColumn vColourDescription32 = new TextColumn("v:Colour Description32", "UX9A");
                                    
                                    /// <summary>v:Colour Description33</summary>
                                    internal readonly TextColumn vColourDescription33 = new TextColumn("v:Colour Description33", "UX9A");
                                    
                                    /// <summary>v:Colour Description34</summary>
                                    internal readonly TextColumn vColourDescription34 = new TextColumn("v:Colour Description34", "UX9A");
                                    
                                    /// <summary>v:Colour Description35</summary>
                                    internal readonly TextColumn vColourDescription35 = new TextColumn("v:Colour Description35", "UX9A");
                                    
                                    /// <summary>v:Colour Description36</summary>
                                    internal readonly TextColumn vColourDescription36 = new TextColumn("v:Colour Description36", "UX9A");
                                    
                                    /// <summary>v:Colour Description37</summary>
                                    internal readonly TextColumn vColourDescription37 = new TextColumn("v:Colour Description37", "UX9A");
                                    
                                    /// <summary>v:Colour Description38</summary>
                                    internal readonly TextColumn vColourDescription38 = new TextColumn("v:Colour Description38", "UX9A");
                                    
                                    /// <summary>v:Colour Description39</summary>
                                    internal readonly TextColumn vColourDescription39 = new TextColumn("v:Colour Description39", "UX9A");
                                    
                                    /// <summary>v:Colour Description40</summary>
                                    internal readonly TextColumn vColourDescription40 = new TextColumn("v:Colour Description40", "UX9A");
                                    
                                    /// <summary>v:Colour Description41</summary>
                                    internal readonly TextColumn vColourDescription41 = new TextColumn("v:Colour Description41", "UX9A");
                                    
                                    /// <summary>v:Colour Description42</summary>
                                    internal readonly TextColumn vColourDescription42 = new TextColumn("v:Colour Description42", "UX9A");
                                    
                                    /// <summary>v:Colour Description43</summary>
                                    internal readonly TextColumn vColourDescription43 = new TextColumn("v:Colour Description43", "UX9A");
                                    
                                    /// <summary>v:Colour Description44</summary>
                                    internal readonly TextColumn vColourDescription44 = new TextColumn("v:Colour Description44", "UX9A");
                                    
                                    /// <summary>v:Colour Description45</summary>
                                    internal readonly TextColumn vColourDescription45 = new TextColumn("v:Colour Description45", "UX9A");
                                    
                                    /// <summary>v:Colour Description46</summary>
                                    internal readonly TextColumn vColourDescription46 = new TextColumn("v:Colour Description46", "UX9A");
                                    
                                    /// <summary>v:Colour Description47</summary>
                                    internal readonly TextColumn vColourDescription47 = new TextColumn("v:Colour Description47", "UX9A");
                                    
                                    /// <summary>v:Colour Description48</summary>
                                    internal readonly TextColumn vColourDescription48 = new TextColumn("v:Colour Description48", "UX9A");
                                    
                                    /// <summary>v:Colour Description49</summary>
                                    internal readonly TextColumn vColourDescription49 = new TextColumn("v:Colour Description49", "UX9A");
                                    
                                    /// <summary>v:Colour Description50</summary>
                                    internal readonly TextColumn vColourDescription50 = new TextColumn("v:Colour Description50", "UX9A");
                                    
                                    /// <summary>v:Colour Description51</summary>
                                    internal readonly TextColumn vColourDescription51 = new TextColumn("v:Colour Description51", "UX9A");
                                    
                                    /// <summary>v:Colour Description52</summary>
                                    internal readonly TextColumn vColourDescription52 = new TextColumn("v:Colour Description52", "UX9A");
                                    
                                    /// <summary>v:Colour Description53</summary>
                                    internal readonly TextColumn vColourDescription53 = new TextColumn("v:Colour Description53", "UX9A");
                                    
                                    /// <summary>v:Colour Description54</summary>
                                    internal readonly TextColumn vColourDescription54 = new TextColumn("v:Colour Description54", "UX9A");
                                    
                                    /// <summary>v:Colour Description55</summary>
                                    internal readonly TextColumn vColourDescription55 = new TextColumn("v:Colour Description55", "UX9A");
                                    
                                    /// <summary>v:Colour Description56</summary>
                                    internal readonly TextColumn vColourDescription56 = new TextColumn("v:Colour Description56", "UX9A");
                                    
                                    /// <summary>v:Colour Description57</summary>
                                    internal readonly TextColumn vColourDescription57 = new TextColumn("v:Colour Description57", "UX9A");
                                    
                                    /// <summary>v:Colour Description58</summary>
                                    internal readonly TextColumn vColourDescription58 = new TextColumn("v:Colour Description58", "UX9A");
                                    
                                    /// <summary>v:Colour Description59</summary>
                                    internal readonly TextColumn vColourDescription59 = new TextColumn("v:Colour Description59", "UX9A");
                                    
                                    /// <summary>v:Colour Description60</summary>
                                    internal readonly TextColumn vColourDescription60 = new TextColumn("v:Colour Description60", "UX9A");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537SizeColCost15 _layout;
                                    #endregion
                                    
                                    SizeCostDiffs _parent;
                                    
                                    
                                    /// <summary>Size Col Cost 1/5(P#400.1.1.1.1.3.4.1)</summary>
                                    public SizeColCost15(SizeCostDiffs parent)
                                    {
                                        _parent = parent;
                                        Title = "Size Col Cost 1/5";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537SizeColCost15(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = WorkColsSizesByLot;
                                        Relations.Add(Size1, 
                                        		Size1.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode), 
                                        	Size1.SortByREF_Size_X1);
                                        
                                        Relations.Add(OrderLotSizeCost, 
                                        		OrderLotSizeCost.OrderNumber.IsEqualTo(WorkColsSizesByLot.OrderNumber).And(
                                        		OrderLotSizeCost.LotNumber.IsEqualTo(WorkColsSizesByLot.LotNumber)).And(
                                        		OrderLotSizeCost.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode)), 
                                        	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                        
                                        Where.Add(WorkColsSizesByLot.OrderNumber.IsEqualTo(_parent.Lot.ORDER_NUMBER));
                                        Where.Add(WorkColsSizesByLot.LotNumber.IsEqualTo(_parent.Lot.LOT_NUMBER));
                                        OrderBy = WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X2;
                                        
                                        #region Columns
                                        
                                        Columns.Add(WorkColsSizesByLot.OrderNumber);
                                        Columns.Add(WorkColsSizesByLot.LotNumber);
                                        Columns.Add(WorkColsSizesByLot.ProductNumber);
                                        Columns.Add(WorkColsSizesByLot.SizeCode);
                                        Columns.Add(WorkColsSizesByLot.SizeRelativePosition);
                                        Columns.Add(WorkColsSizesByLot.Units01);
                                        Columns.Add(WorkColsSizesByLot.Units02);
                                        Columns.Add(WorkColsSizesByLot.Units03);
                                        Columns.Add(WorkColsSizesByLot.Units04);
                                        Columns.Add(WorkColsSizesByLot.Units05);
                                        Columns.Add(Size1.SizeCode);
                                        Columns.Add(Size1.SizeDescription);
                                        Columns.Add(Size1.FullDescription);
                                        Columns.Add(OrderLotSizeCost.OrderNumber);
                                        Columns.Add(OrderLotSizeCost.LotNumber);
                                        Columns.Add(OrderLotSizeCost.ProductNumber);
                                        Columns.Add(OrderLotSizeCost.SizeCode);
                                        Columns.Add(OrderLotSizeCost.SizeCost);
                                        // Total in Footer
                                        Columns.Add(vTotalColours01);
                                        Columns.Add(vTotalColours02);
                                        Columns.Add(vTotalColours03);
                                        Columns.Add(vTotalColours04);
                                        Columns.Add(vTotalColours05);
                                        // Total Sizes across each line of the Report
                                        Columns.Add(vLineTotalNumberSizes15);
                                        // Adds above sizes and outputs Total in Footer
                                        Columns.Add(vFooterTotalNoOfSizes15);
                                        // Header Virtuals updated from Subtask 'Get Header'
                                        Columns.Add(vColourDescription01);
                                        Columns.Add(vColourDescription02);
                                        Columns.Add(vColourDescription03);
                                        Columns.Add(vColourDescription04);
                                        Columns.Add(vColourDescription05);
                                        Columns.Add(vColourDescription06);
                                        Columns.Add(vColourDescription07);
                                        Columns.Add(vColourDescription08);
                                        Columns.Add(vColourDescription09);
                                        Columns.Add(vColourDescription10);
                                        Columns.Add(vColourDescription11);
                                        Columns.Add(vColourDescription12);
                                        Columns.Add(vColourDescription13);
                                        Columns.Add(vColourDescription14);
                                        Columns.Add(vColourDescription15);
                                        Columns.Add(vColourDescription16);
                                        Columns.Add(vColourDescription17);
                                        Columns.Add(vColourDescription18);
                                        Columns.Add(vColourDescription19);
                                        Columns.Add(vColourDescription20);
                                        Columns.Add(vColourDescription21);
                                        Columns.Add(vColourDescription22);
                                        Columns.Add(vColourDescription23);
                                        Columns.Add(vColourDescription24);
                                        Columns.Add(vColourDescription25);
                                        Columns.Add(vColourDescription26);
                                        Columns.Add(vColourDescription27);
                                        Columns.Add(vColourDescription28);
                                        Columns.Add(vColourDescription29);
                                        Columns.Add(vColourDescription30);
                                        Columns.Add(vColourDescription31);
                                        Columns.Add(vColourDescription32);
                                        Columns.Add(vColourDescription33);
                                        Columns.Add(vColourDescription34);
                                        Columns.Add(vColourDescription35);
                                        Columns.Add(vColourDescription36);
                                        Columns.Add(vColourDescription37);
                                        Columns.Add(vColourDescription38);
                                        Columns.Add(vColourDescription39);
                                        Columns.Add(vColourDescription40);
                                        Columns.Add(vColourDescription41);
                                        Columns.Add(vColourDescription42);
                                        Columns.Add(vColourDescription43);
                                        Columns.Add(vColourDescription44);
                                        Columns.Add(vColourDescription45);
                                        Columns.Add(vColourDescription46);
                                        Columns.Add(vColourDescription47);
                                        Columns.Add(vColourDescription48);
                                        Columns.Add(vColourDescription49);
                                        Columns.Add(vColourDescription50);
                                        Columns.Add(vColourDescription51);
                                        Columns.Add(vColourDescription52);
                                        Columns.Add(vColourDescription53);
                                        Columns.Add(vColourDescription54);
                                        Columns.Add(vColourDescription55);
                                        Columns.Add(vColourDescription56);
                                        Columns.Add(vColourDescription57);
                                        Columns.Add(vColourDescription58);
                                        Columns.Add(vColourDescription59);
                                        Columns.Add(vColourDescription60);
                                        #endregion
                                    }
                                    
                                    /// <summary>Size Col Cost 1/5</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        Cached<GetHeaders>().Run();
                                        if(Exp_25())
                                        {
                                            _layout.SizeColourCost15Header.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnEnterRow()
                                    {
                                        // initialise Count Number of sizes for each record in Temp Table
                                        vLineTotalNumberSizes15.Value = 0;
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        vTotalColours01.Value += WorkColsSizesByLot.Units01;
                                        vTotalColours02.Value += WorkColsSizesByLot.Units02;
                                        vTotalColours03.Value += WorkColsSizesByLot.Units03;
                                        vTotalColours04.Value += WorkColsSizesByLot.Units04;
                                        vTotalColours05.Value += WorkColsSizesByLot.Units05;
                                        vLineTotalNumberSizes15.Value = WorkColsSizesByLot.Units01 + WorkColsSizesByLot.Units02 + WorkColsSizesByLot.Units03 + WorkColsSizesByLot.Units04 + WorkColsSizesByLot.Units05;
                                        vFooterTotalNoOfSizes15.Value += vLineTotalNumberSizes15;
                                        // Only Output the line if any of the 5 Colours has a Qty for the size
                                        if(WorkColsSizesByLot.Units01 != 0 || WorkColsSizesByLot.Units02 != 0 || WorkColsSizesByLot.Units03 != 0 || WorkColsSizesByLot.Units04 != 0 || WorkColsSizesByLot.Units05 != 0)
                                        {
                                            _layout.SizeColourCostDetail1.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnEnd()
                                    {
                                        if(Exp_25())
                                        {
                                            _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                        Cached<SizeColCost610>().Run();
                                        Cached<SizeColCost1115>().Run();
                                        Cached<SizeColCost1620>().Run();
                                        Cached<SizeColCost2125>().Run();
                                        Cached<SizeColCost2630>().Run();
                                        Cached<SizeColCost3135>().Run();
                                        Cached<SizeColCost3640>().Run();
                                        Cached<SizeColCost4145>().Run();
                                        Cached<SizeColCost4650>().Run();
                                        Cached<SizeColCost5155>().Run();
                                        Cached<SizeColCost5660>().Run();
                                        
                                    }
                                    
                                    #region Expressions
                                    internal Bool Exp_1()
                                    {
                                        return WorkColsSizesByLot.Units05 > 0;
                                    }
                                    internal Bool Exp_2()
                                    {
                                        return WorkColsSizesByLot.Units04 > 0;
                                    }
                                    internal Bool Exp_3()
                                    {
                                        return WorkColsSizesByLot.Units03 > 0;
                                    }
                                    internal Bool Exp_4()
                                    {
                                        return WorkColsSizesByLot.Units02 > 0;
                                    }
                                    internal Bool Exp_14()
                                    {
                                        return vTotalColours01 != 0;
                                    }
                                    internal Bool Exp_15()
                                    {
                                        return vTotalColours02 != 0;
                                    }
                                    internal Bool Exp_16()
                                    {
                                        return vTotalColours03 != 0;
                                    }
                                    internal Bool Exp_17()
                                    {
                                        return vTotalColours04 != 0;
                                    }
                                    internal Bool Exp_18()
                                    {
                                        return vTotalColours05 != 0;
                                    }
                                    Bool Exp_25()
                                    {
                                        return vColourDescription01 != "" || vColourDescription02 != "" || vColourDescription03 != "" || vColourDescription04 != "" || vColourDescription05 != "";
                                    }
                                    internal Text Exp_26()
                                    {
                                        return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                    }
                                    #endregion
                                    
                                    
                                    
                                    /// <summary>Size Col Cost 6/10(P#400.1.1.1.1.3.4.1.1)</summary>
                                    // Last change before Migration: 08/11/2012 12:49:44
                                    internal class SizeColCost610 : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Cols Sizes by Lot</summary>
                                        internal readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Order Lot Size Cost</summary>
                                        internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Units06</summary>
                                        internal readonly NumberColumn vTotalUnits06 = new NumberColumn("v:Total Units06", "7");
                                        
                                        /// <summary>v:Total Units07</summary>
                                        internal readonly NumberColumn vTotalUnits07 = new NumberColumn("v:Total Units07", "7");
                                        
                                        /// <summary>v:Total Units08</summary>
                                        internal readonly NumberColumn vTotalUnits08 = new NumberColumn("v:Total Units08", "7");
                                        
                                        /// <summary>v:Total Units09</summary>
                                        internal readonly NumberColumn vTotalUnits09 = new NumberColumn("v:Total Units09", "7");
                                        
                                        /// <summary>v:Total Units10</summary>
                                        internal readonly NumberColumn vTotalUnits10 = new NumberColumn("v:Total Units10", "7");
                                        
                                        /// <summary>v:Total No of Sizes per Line</summary>
                                        internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                        
                                        /// <summary>v:Total No Sizes Footer 6/10</summary>
                                        internal readonly NumberColumn vTotalNoSizesFooter610 = new NumberColumn("v:Total No Sizes Footer 6/10", "9");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537SizeColCost6101 _layout;
                                        #endregion
                                        
                                        internal SizeColCost15 _parent;
                                        
                                        
                                        /// <summary>Size Col Cost 6/10(P#400.1.1.1.1.3.4.1.1)</summary>
                                        public SizeColCost610(SizeColCost15 parent)
                                        {
                                            _parent = parent;
                                            Title = "Size Col Cost 6/10";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537SizeColCost6101(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkColsSizesByLot;
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(OrderLotSizeCost, 
                                            		OrderLotSizeCost.OrderNumber.IsEqualTo(WorkColsSizesByLot.OrderNumber).And(
                                            		OrderLotSizeCost.LotNumber.IsEqualTo(WorkColsSizesByLot.LotNumber)).And(
                                            		OrderLotSizeCost.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode)), 
                                            	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                            
                                            Where.Add(WorkColsSizesByLot.OrderNumber.IsEqualTo(_parent._parent.Lot.ORDER_NUMBER));
                                            Where.Add(WorkColsSizesByLot.LotNumber.IsEqualTo(_parent._parent.Lot.LOT_NUMBER));
                                            OrderBy = WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X2;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkColsSizesByLot.OrderNumber);
                                            Columns.Add(WorkColsSizesByLot.LotNumber);
                                            Columns.Add(WorkColsSizesByLot.ProductNumber);
                                            Columns.Add(WorkColsSizesByLot.SizeCode);
                                            Columns.Add(WorkColsSizesByLot.SizeRelativePosition);
                                            Columns.Add(WorkColsSizesByLot.Units06);
                                            Columns.Add(WorkColsSizesByLot.Units07);
                                            Columns.Add(WorkColsSizesByLot.Units08);
                                            Columns.Add(WorkColsSizesByLot.Units09);
                                            Columns.Add(WorkColsSizesByLot.Units10);
                                            
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            
                                            Columns.Add(OrderLotSizeCost.OrderNumber);
                                            Columns.Add(OrderLotSizeCost.LotNumber);
                                            Columns.Add(OrderLotSizeCost.ProductNumber);
                                            Columns.Add(OrderLotSizeCost.SizeCode);
                                            Columns.Add(OrderLotSizeCost.SizeCost);
                                            
                                            Columns.Add(vTotalUnits06);
                                            Columns.Add(vTotalUnits07);
                                            Columns.Add(vTotalUnits08);
                                            Columns.Add(vTotalUnits09);
                                            Columns.Add(vTotalUnits10);
                                            // Total number of Sizes across each Line
                                            Columns.Add(vTotalNoOfSizesPerLine);
                                            // Total Number of Sizes in Footer Totals
                                            Columns.Add(vTotalNoSizesFooter610);
                                            #endregion
                                        }
                                        
                                        /// <summary>Size Col Cost 6/10</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnStart()
                                        {
                                            // Only output if Colour decription 6 <>''. ie that there are more than 5
                                            // colours, checked in 'Get Header' task
                                            if(_parent.vColourDescription06 != "")
                                            {
                                                _layout.SizeColourCost610Header1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalUnits06.Value += WorkColsSizesByLot.Units06;
                                            vTotalUnits07.Value += WorkColsSizesByLot.Units07;
                                            vTotalUnits08.Value += WorkColsSizesByLot.Units08;
                                            vTotalUnits09.Value += WorkColsSizesByLot.Units09;
                                            vTotalUnits10.Value += WorkColsSizesByLot.Units10;
                                            vTotalNoOfSizesPerLine.Value = WorkColsSizesByLot.Units06 + WorkColsSizesByLot.Units07 + WorkColsSizesByLot.Units08 + WorkColsSizesByLot.Units09 + WorkColsSizesByLot.Units10;
                                            vTotalNoSizesFooter610.Value += vTotalNoOfSizesPerLine;
                                            // only output if Colour Description 6<>'' see Task Suffix and any of the
                                            // 5 colours has a size
                                            if(WorkColsSizesByLot.Units06 != 0 || WorkColsSizesByLot.Units07 != 0 || WorkColsSizesByLot.Units08 != 0 || WorkColsSizesByLot.Units09 != 0 || WorkColsSizesByLot.Units10 != 0)
                                            {
                                                _layout.SizeColourCostDetail1610.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnEnd()
                                        {
                                            if(_parent.vColourDescription06 != "")
                                            {
                                                _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_4()
                                        {
                                            return WorkColsSizesByLot.Units10 > 0;
                                        }
                                        internal Bool Exp_5()
                                        {
                                            return WorkColsSizesByLot.Units09 > 0;
                                        }
                                        internal Bool Exp_6()
                                        {
                                            return WorkColsSizesByLot.Units08 > 0;
                                        }
                                        internal Bool Exp_7()
                                        {
                                            return WorkColsSizesByLot.Units07 > 0;
                                        }
                                        internal Bool Exp_8()
                                        {
                                            return WorkColsSizesByLot.Units06 > 0;
                                        }
                                        internal Bool Exp_9()
                                        {
                                            return vTotalUnits10 > 0;
                                        }
                                        internal Bool Exp_10()
                                        {
                                            return vTotalUnits09 > 0;
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return vTotalUnits08 > 0;
                                        }
                                        internal Bool Exp_12()
                                        {
                                            return vTotalUnits07 > 0;
                                        }
                                        internal Bool Exp_13()
                                        {
                                            return vTotalUnits06 > 0;
                                        }
                                        internal Text Exp_26()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        #endregion
                                        
                                        
                                    }
                                    
                                    /// <summary>Size Col Cost 11/15(P#400.1.1.1.1.3.4.1.2)</summary>
                                    // Last change before Migration: 08/11/2012 12:52:39
                                    internal class SizeColCost1115 : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Cols Sizes by Lot</summary>
                                        internal readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Order Lot Size Cost</summary>
                                        internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Units11</summary>
                                        internal readonly NumberColumn vTotalUnits11 = new NumberColumn("v:Total Units11", "7");
                                        
                                        /// <summary>v:Total Units12</summary>
                                        internal readonly NumberColumn vTotalUnits12 = new NumberColumn("v:Total Units12", "7");
                                        
                                        /// <summary>v:Total Units13</summary>
                                        internal readonly NumberColumn vTotalUnits13 = new NumberColumn("v:Total Units13", "7");
                                        
                                        /// <summary>v:Total Units14</summary>
                                        internal readonly NumberColumn vTotalUnits14 = new NumberColumn("v:Total Units14", "7");
                                        
                                        /// <summary>v:Total Units15</summary>
                                        internal readonly NumberColumn vTotalUnits15 = new NumberColumn("v:Total Units15", "7");
                                        
                                        /// <summary>v:Total No of Sizes per Line</summary>
                                        internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                        
                                        /// <summary>v:Total No Sizes Footer 11/15</summary>
                                        internal readonly NumberColumn vTotalNoSizesFooter1115 = new NumberColumn("v:Total No Sizes Footer 11/15", "9");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537SizeColCost11151 _layout;
                                        #endregion
                                        
                                        internal SizeColCost15 _parent;
                                        
                                        
                                        /// <summary>Size Col Cost 11/15(P#400.1.1.1.1.3.4.1.2)</summary>
                                        public SizeColCost1115(SizeColCost15 parent)
                                        {
                                            _parent = parent;
                                            Title = "Size Col Cost 11/15";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537SizeColCost11151(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkColsSizesByLot;
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(OrderLotSizeCost, 
                                            		OrderLotSizeCost.OrderNumber.IsEqualTo(WorkColsSizesByLot.OrderNumber).And(
                                            		OrderLotSizeCost.LotNumber.IsEqualTo(WorkColsSizesByLot.LotNumber)).And(
                                            		OrderLotSizeCost.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode)), 
                                            	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                            
                                            Where.Add(WorkColsSizesByLot.OrderNumber.IsEqualTo(_parent._parent.Lot.ORDER_NUMBER));
                                            Where.Add(WorkColsSizesByLot.LotNumber.IsEqualTo(_parent._parent.Lot.LOT_NUMBER));
                                            OrderBy = WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X2;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkColsSizesByLot.OrderNumber);
                                            Columns.Add(WorkColsSizesByLot.LotNumber);
                                            Columns.Add(WorkColsSizesByLot.ProductNumber);
                                            Columns.Add(WorkColsSizesByLot.SizeCode);
                                            Columns.Add(WorkColsSizesByLot.SizeRelativePosition);
                                            Columns.Add(WorkColsSizesByLot.Units11);
                                            Columns.Add(WorkColsSizesByLot.Units12);
                                            Columns.Add(WorkColsSizesByLot.Units13);
                                            Columns.Add(WorkColsSizesByLot.Units14);
                                            Columns.Add(WorkColsSizesByLot.Units15);
                                            
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            
                                            Columns.Add(OrderLotSizeCost.OrderNumber);
                                            Columns.Add(OrderLotSizeCost.LotNumber);
                                            Columns.Add(OrderLotSizeCost.ProductNumber);
                                            Columns.Add(OrderLotSizeCost.SizeCode);
                                            Columns.Add(OrderLotSizeCost.SizeCost);
                                            
                                            Columns.Add(vTotalUnits11);
                                            Columns.Add(vTotalUnits12);
                                            Columns.Add(vTotalUnits13);
                                            Columns.Add(vTotalUnits14);
                                            Columns.Add(vTotalUnits15);
                                            // Total number of Sizes across each Line
                                            Columns.Add(vTotalNoOfSizesPerLine);
                                            // Total Number of Sizes in Footer Totals
                                            Columns.Add(vTotalNoSizesFooter1115);
                                            #endregion
                                        }
                                        
                                        /// <summary>Size Col Cost 11/15</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnStart()
                                        {
                                            // Only output if Colour decription 11<>''. ie that there are more than 5
                                            // colours, checked in 'Get Header' task
                                            if(_parent.vColourDescription11 != "")
                                            {
                                                _layout.SizeColourCost1115Header1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalUnits11.Value += WorkColsSizesByLot.Units11;
                                            vTotalUnits12.Value += WorkColsSizesByLot.Units12;
                                            vTotalUnits13.Value += WorkColsSizesByLot.Units13;
                                            vTotalUnits14.Value += WorkColsSizesByLot.Units14;
                                            vTotalUnits15.Value += WorkColsSizesByLot.Units15;
                                            vTotalNoOfSizesPerLine.Value = WorkColsSizesByLot.Units11 + WorkColsSizesByLot.Units12 + WorkColsSizesByLot.Units13 + WorkColsSizesByLot.Units14 + WorkColsSizesByLot.Units15;
                                            vTotalNoSizesFooter1115.Value += vTotalNoOfSizesPerLine;
                                            // only output if Colour Description 11<>'' see Task Suffix and any of the
                                            // 5 colours has a size
                                            if(WorkColsSizesByLot.Units11 != 0 || WorkColsSizesByLot.Units12 != 0 || WorkColsSizesByLot.Units13 != 0 || WorkColsSizesByLot.Units14 != 0 || WorkColsSizesByLot.Units15 != 0)
                                            {
                                                _layout.SizeColourCostDetail1115.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnEnd()
                                        {
                                            if(_parent.vColourDescription11 != "")
                                            {
                                                _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_4()
                                        {
                                            return WorkColsSizesByLot.Units15 > 0;
                                        }
                                        internal Bool Exp_5()
                                        {
                                            return WorkColsSizesByLot.Units14 > 0;
                                        }
                                        internal Bool Exp_6()
                                        {
                                            return WorkColsSizesByLot.Units13 > 0;
                                        }
                                        internal Bool Exp_7()
                                        {
                                            return WorkColsSizesByLot.Units12 > 0;
                                        }
                                        internal Bool Exp_8()
                                        {
                                            return WorkColsSizesByLot.Units11 > 0;
                                        }
                                        internal Bool Exp_9()
                                        {
                                            return vTotalUnits15 > 0;
                                        }
                                        internal Bool Exp_10()
                                        {
                                            return vTotalUnits14 > 0;
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return vTotalUnits13 > 0;
                                        }
                                        internal Bool Exp_12()
                                        {
                                            return vTotalUnits12 > 0;
                                        }
                                        internal Bool Exp_13()
                                        {
                                            return vTotalUnits11 > 0;
                                        }
                                        internal Text Exp_26()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        #endregion
                                        
                                        
                                    }
                                    
                                    /// <summary>Size Col Cost 16/20(P#400.1.1.1.1.3.4.1.3)</summary>
                                    // Last change before Migration: 08/11/2012 12:54:53
                                    internal class SizeColCost1620 : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Cols Sizes by Lot</summary>
                                        internal readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Order Lot Size Cost</summary>
                                        internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Units16</summary>
                                        internal readonly NumberColumn vTotalUnits16 = new NumberColumn("v:Total Units16", "7");
                                        
                                        /// <summary>v:Total Units17</summary>
                                        internal readonly NumberColumn vTotalUnits17 = new NumberColumn("v:Total Units17", "7");
                                        
                                        /// <summary>v:Total Units18</summary>
                                        internal readonly NumberColumn vTotalUnits18 = new NumberColumn("v:Total Units18", "7");
                                        
                                        /// <summary>v:Total Units19</summary>
                                        internal readonly NumberColumn vTotalUnits19 = new NumberColumn("v:Total Units19", "7");
                                        
                                        /// <summary>v:Total Units20</summary>
                                        internal readonly NumberColumn vTotalUnits20 = new NumberColumn("v:Total Units20", "7");
                                        
                                        /// <summary>v:Total No of Sizes per Line</summary>
                                        internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                        
                                        /// <summary>v:Total No Sizes Footer 16/20</summary>
                                        internal readonly NumberColumn vTotalNoSizesFooter1620 = new NumberColumn("v:Total No Sizes Footer 16/20", "9");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537SizeColCost16201 _layout;
                                        #endregion
                                        
                                        internal SizeColCost15 _parent;
                                        
                                        
                                        /// <summary>Size Col Cost 16/20(P#400.1.1.1.1.3.4.1.3)</summary>
                                        public SizeColCost1620(SizeColCost15 parent)
                                        {
                                            _parent = parent;
                                            Title = "Size Col Cost 16/20";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537SizeColCost16201(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkColsSizesByLot;
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(OrderLotSizeCost, 
                                            		OrderLotSizeCost.OrderNumber.IsEqualTo(WorkColsSizesByLot.OrderNumber).And(
                                            		OrderLotSizeCost.LotNumber.IsEqualTo(WorkColsSizesByLot.LotNumber)).And(
                                            		OrderLotSizeCost.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode)), 
                                            	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                            
                                            Where.Add(WorkColsSizesByLot.OrderNumber.IsEqualTo(_parent._parent.Lot.ORDER_NUMBER));
                                            Where.Add(WorkColsSizesByLot.LotNumber.IsEqualTo(_parent._parent.Lot.LOT_NUMBER));
                                            OrderBy = WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X2;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkColsSizesByLot.OrderNumber);
                                            Columns.Add(WorkColsSizesByLot.LotNumber);
                                            Columns.Add(WorkColsSizesByLot.ProductNumber);
                                            Columns.Add(WorkColsSizesByLot.SizeCode);
                                            Columns.Add(WorkColsSizesByLot.SizeRelativePosition);
                                            Columns.Add(WorkColsSizesByLot.Units16);
                                            Columns.Add(WorkColsSizesByLot.Units17);
                                            Columns.Add(WorkColsSizesByLot.Units18);
                                            Columns.Add(WorkColsSizesByLot.Units19);
                                            Columns.Add(WorkColsSizesByLot.Units20);
                                            
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            
                                            Columns.Add(OrderLotSizeCost.OrderNumber);
                                            Columns.Add(OrderLotSizeCost.LotNumber);
                                            Columns.Add(OrderLotSizeCost.ProductNumber);
                                            Columns.Add(OrderLotSizeCost.SizeCode);
                                            Columns.Add(OrderLotSizeCost.SizeCost);
                                            
                                            Columns.Add(vTotalUnits16);
                                            Columns.Add(vTotalUnits17);
                                            Columns.Add(vTotalUnits18);
                                            Columns.Add(vTotalUnits19);
                                            Columns.Add(vTotalUnits20);
                                            // Total number of Sizes across each Line
                                            Columns.Add(vTotalNoOfSizesPerLine);
                                            // Total Number of Sizes in Footer Totals
                                            Columns.Add(vTotalNoSizesFooter1620);
                                            #endregion
                                        }
                                        
                                        /// <summary>Size Col Cost 16/20</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnStart()
                                        {
                                            // Only output if Colour decription 16<>''. ie that there are more than 5
                                            // colours, checked in 'Get Header' task
                                            if(_parent.vColourDescription16 != "")
                                            {
                                                _layout.SizeColourCost1620Header1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalUnits16.Value += WorkColsSizesByLot.Units16;
                                            vTotalUnits17.Value += WorkColsSizesByLot.Units17;
                                            vTotalUnits18.Value += WorkColsSizesByLot.Units18;
                                            vTotalUnits19.Value += WorkColsSizesByLot.Units19;
                                            vTotalUnits20.Value += WorkColsSizesByLot.Units20;
                                            vTotalNoOfSizesPerLine.Value = WorkColsSizesByLot.Units16 + WorkColsSizesByLot.Units17 + WorkColsSizesByLot.Units18 + WorkColsSizesByLot.Units19 + WorkColsSizesByLot.Units20;
                                            vTotalNoSizesFooter1620.Value += vTotalNoOfSizesPerLine;
                                            // only output if Colour Description 16<>'' see Task Suffix and any of the
                                            // 5 colours has a size
                                            if(WorkColsSizesByLot.Units16 != 0 || WorkColsSizesByLot.Units17 != 0 || WorkColsSizesByLot.Units18 != 0 || WorkColsSizesByLot.Units19 != 0 || WorkColsSizesByLot.Units20 != 0)
                                            {
                                                _layout.SizeColourCostDetail111620.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnEnd()
                                        {
                                            if(_parent.vColourDescription16 != "")
                                            {
                                                _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_4()
                                        {
                                            return WorkColsSizesByLot.Units20 > 0;
                                        }
                                        internal Bool Exp_5()
                                        {
                                            return WorkColsSizesByLot.Units19 > 0;
                                        }
                                        internal Bool Exp_6()
                                        {
                                            return WorkColsSizesByLot.Units18 > 0;
                                        }
                                        internal Bool Exp_7()
                                        {
                                            return WorkColsSizesByLot.Units17 > 0;
                                        }
                                        internal Bool Exp_8()
                                        {
                                            return WorkColsSizesByLot.Units16 > 0;
                                        }
                                        internal Bool Exp_9()
                                        {
                                            return vTotalUnits20 > 0;
                                        }
                                        internal Bool Exp_10()
                                        {
                                            return vTotalUnits19 > 0;
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return vTotalUnits18 > 0;
                                        }
                                        internal Bool Exp_12()
                                        {
                                            return vTotalUnits17 > 0;
                                        }
                                        internal Bool Exp_13()
                                        {
                                            return vTotalUnits16 > 0;
                                        }
                                        internal Text Exp_26()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        #endregion
                                        
                                        
                                    }
                                    
                                    /// <summary>Size Col Cost 21/25(P#400.1.1.1.1.3.4.1.4)</summary>
                                    // Last change before Migration: 08/11/2012 12:59:01
                                    internal class SizeColCost2125 : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Cols Sizes by Lot</summary>
                                        internal readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Order Lot Size Cost</summary>
                                        internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Units21</summary>
                                        internal readonly NumberColumn vTotalUnits21 = new NumberColumn("v:Total Units21", "7");
                                        
                                        /// <summary>v:Total Units22</summary>
                                        internal readonly NumberColumn vTotalUnits22 = new NumberColumn("v:Total Units22", "7");
                                        
                                        /// <summary>v:Total Units23</summary>
                                        internal readonly NumberColumn vTotalUnits23 = new NumberColumn("v:Total Units23", "7");
                                        
                                        /// <summary>v:Total Units24</summary>
                                        internal readonly NumberColumn vTotalUnits24 = new NumberColumn("v:Total Units24", "7");
                                        
                                        /// <summary>v:Total Units25</summary>
                                        internal readonly NumberColumn vTotalUnits25 = new NumberColumn("v:Total Units25", "7");
                                        
                                        /// <summary>v:Total No of Sizes per Line</summary>
                                        internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                        
                                        /// <summary>v:Total No Sizes Footer 21/25</summary>
                                        internal readonly NumberColumn vTotalNoSizesFooter2125 = new NumberColumn("v:Total No Sizes Footer 21/25", "9");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537SizeColCost21251 _layout;
                                        #endregion
                                        
                                        internal SizeColCost15 _parent;
                                        
                                        
                                        /// <summary>Size Col Cost 21/25(P#400.1.1.1.1.3.4.1.4)</summary>
                                        public SizeColCost2125(SizeColCost15 parent)
                                        {
                                            _parent = parent;
                                            Title = "Size Col Cost 21/25";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537SizeColCost21251(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkColsSizesByLot;
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(OrderLotSizeCost, 
                                            		OrderLotSizeCost.OrderNumber.IsEqualTo(WorkColsSizesByLot.OrderNumber).And(
                                            		OrderLotSizeCost.LotNumber.IsEqualTo(WorkColsSizesByLot.LotNumber)).And(
                                            		OrderLotSizeCost.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode)), 
                                            	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                            
                                            Where.Add(WorkColsSizesByLot.OrderNumber.IsEqualTo(_parent._parent.Lot.ORDER_NUMBER));
                                            Where.Add(WorkColsSizesByLot.LotNumber.IsEqualTo(_parent._parent.Lot.LOT_NUMBER));
                                            OrderBy = WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X2;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkColsSizesByLot.OrderNumber);
                                            Columns.Add(WorkColsSizesByLot.LotNumber);
                                            Columns.Add(WorkColsSizesByLot.ProductNumber);
                                            Columns.Add(WorkColsSizesByLot.SizeCode);
                                            Columns.Add(WorkColsSizesByLot.SizeRelativePosition);
                                            Columns.Add(WorkColsSizesByLot.Units21);
                                            Columns.Add(WorkColsSizesByLot.Units22);
                                            Columns.Add(WorkColsSizesByLot.Units23);
                                            Columns.Add(WorkColsSizesByLot.Units24);
                                            Columns.Add(WorkColsSizesByLot.Units25);
                                            
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            
                                            Columns.Add(OrderLotSizeCost.OrderNumber);
                                            Columns.Add(OrderLotSizeCost.LotNumber);
                                            Columns.Add(OrderLotSizeCost.ProductNumber);
                                            Columns.Add(OrderLotSizeCost.SizeCode);
                                            Columns.Add(OrderLotSizeCost.SizeCost);
                                            
                                            Columns.Add(vTotalUnits21);
                                            Columns.Add(vTotalUnits22);
                                            Columns.Add(vTotalUnits23);
                                            Columns.Add(vTotalUnits24);
                                            Columns.Add(vTotalUnits25);
                                            // Total number of Sizes across each Line
                                            Columns.Add(vTotalNoOfSizesPerLine);
                                            // Total Number of Sizes in Footer Totals
                                            Columns.Add(vTotalNoSizesFooter2125);
                                            #endregion
                                        }
                                        
                                        /// <summary>Size Col Cost 21/25</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnStart()
                                        {
                                            // Only output if Colour decription 21<>''. ie that there are more than 5
                                            // colours, checked in 'Get Header' task
                                            if(_parent.vColourDescription21 != "")
                                            {
                                                _layout.SizeColourCost2125Header1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalUnits21.Value += WorkColsSizesByLot.Units21;
                                            vTotalUnits22.Value += WorkColsSizesByLot.Units22;
                                            vTotalUnits23.Value += WorkColsSizesByLot.Units23;
                                            vTotalUnits24.Value += WorkColsSizesByLot.Units24;
                                            vTotalUnits25.Value += WorkColsSizesByLot.Units25;
                                            vTotalNoOfSizesPerLine.Value = WorkColsSizesByLot.Units21 + WorkColsSizesByLot.Units22 + WorkColsSizesByLot.Units23 + WorkColsSizesByLot.Units24 + WorkColsSizesByLot.Units25;
                                            vTotalNoSizesFooter2125.Value += vTotalNoOfSizesPerLine;
                                            // only output if Colour Description 21<>'' see Task Suffix and any of the
                                            // 5 colours has a size
                                            if(WorkColsSizesByLot.Units21 != 0 || WorkColsSizesByLot.Units22 != 0 || WorkColsSizesByLot.Units23 != 0 || WorkColsSizesByLot.Units24 != 0 || WorkColsSizesByLot.Units25 != 0)
                                            {
                                                _layout.SizeColourCostDetail112125.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnEnd()
                                        {
                                            if(_parent.vColourDescription21 != "")
                                            {
                                                _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_4()
                                        {
                                            return WorkColsSizesByLot.Units25 > 0;
                                        }
                                        internal Bool Exp_5()
                                        {
                                            return WorkColsSizesByLot.Units24 > 0;
                                        }
                                        internal Bool Exp_6()
                                        {
                                            return WorkColsSizesByLot.Units23 > 0;
                                        }
                                        internal Bool Exp_7()
                                        {
                                            return WorkColsSizesByLot.Units22 > 0;
                                        }
                                        internal Bool Exp_8()
                                        {
                                            return WorkColsSizesByLot.Units21 > 0;
                                        }
                                        internal Bool Exp_9()
                                        {
                                            return vTotalUnits25 > 0;
                                        }
                                        internal Bool Exp_10()
                                        {
                                            return vTotalUnits24 > 0;
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return vTotalUnits23 > 0;
                                        }
                                        internal Bool Exp_12()
                                        {
                                            return vTotalUnits22 > 0;
                                        }
                                        internal Bool Exp_13()
                                        {
                                            return vTotalUnits21 > 0;
                                        }
                                        internal Text Exp_26()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        #endregion
                                        
                                        
                                    }
                                    
                                    /// <summary>Size Col Cost 26/30(P#400.1.1.1.1.3.4.1.5)</summary>
                                    // Last change before Migration: 08/11/2012 14:03:10
                                    internal class SizeColCost2630 : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Cols Sizes by Lot</summary>
                                        internal readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Order Lot Size Cost</summary>
                                        internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Units26</summary>
                                        internal readonly NumberColumn vTotalUnits26 = new NumberColumn("v:Total Units26", "7");
                                        
                                        /// <summary>v:Total Units27</summary>
                                        internal readonly NumberColumn vTotalUnits27 = new NumberColumn("v:Total Units27", "7");
                                        
                                        /// <summary>v:Total Units28</summary>
                                        internal readonly NumberColumn vTotalUnits28 = new NumberColumn("v:Total Units28", "7");
                                        
                                        /// <summary>v:Total Units29</summary>
                                        internal readonly NumberColumn vTotalUnits29 = new NumberColumn("v:Total Units29", "7");
                                        
                                        /// <summary>v:Total Units30</summary>
                                        internal readonly NumberColumn vTotalUnits30 = new NumberColumn("v:Total Units30", "7");
                                        
                                        /// <summary>v:Total No of Sizes per Line</summary>
                                        internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                        
                                        /// <summary>v:Total No Sizes Footer 26/30</summary>
                                        internal readonly NumberColumn vTotalNoSizesFooter2630 = new NumberColumn("v:Total No Sizes Footer 26/30", "9");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537SizeColCost26301 _layout;
                                        #endregion
                                        
                                        internal SizeColCost15 _parent;
                                        
                                        
                                        /// <summary>Size Col Cost 26/30(P#400.1.1.1.1.3.4.1.5)</summary>
                                        public SizeColCost2630(SizeColCost15 parent)
                                        {
                                            _parent = parent;
                                            Title = "Size Col Cost 26/30";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537SizeColCost26301(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkColsSizesByLot;
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(OrderLotSizeCost, 
                                            		OrderLotSizeCost.OrderNumber.IsEqualTo(WorkColsSizesByLot.OrderNumber).And(
                                            		OrderLotSizeCost.LotNumber.IsEqualTo(WorkColsSizesByLot.LotNumber)).And(
                                            		OrderLotSizeCost.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode)), 
                                            	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                            
                                            Where.Add(WorkColsSizesByLot.OrderNumber.IsEqualTo(_parent._parent.Lot.ORDER_NUMBER));
                                            Where.Add(WorkColsSizesByLot.LotNumber.IsEqualTo(_parent._parent.Lot.LOT_NUMBER));
                                            OrderBy = WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X2;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkColsSizesByLot.OrderNumber);
                                            Columns.Add(WorkColsSizesByLot.LotNumber);
                                            Columns.Add(WorkColsSizesByLot.ProductNumber);
                                            Columns.Add(WorkColsSizesByLot.SizeCode);
                                            Columns.Add(WorkColsSizesByLot.SizeRelativePosition);
                                            Columns.Add(WorkColsSizesByLot.Units26);
                                            Columns.Add(WorkColsSizesByLot.Units27);
                                            Columns.Add(WorkColsSizesByLot.Units28);
                                            Columns.Add(WorkColsSizesByLot.Units29);
                                            Columns.Add(WorkColsSizesByLot.Units30);
                                            
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            
                                            Columns.Add(OrderLotSizeCost.OrderNumber);
                                            Columns.Add(OrderLotSizeCost.LotNumber);
                                            Columns.Add(OrderLotSizeCost.ProductNumber);
                                            Columns.Add(OrderLotSizeCost.SizeCode);
                                            Columns.Add(OrderLotSizeCost.SizeCost);
                                            
                                            Columns.Add(vTotalUnits26);
                                            Columns.Add(vTotalUnits27);
                                            Columns.Add(vTotalUnits28);
                                            Columns.Add(vTotalUnits29);
                                            Columns.Add(vTotalUnits30);
                                            // Total number of Sizes across each Line
                                            Columns.Add(vTotalNoOfSizesPerLine);
                                            // Total Number of Sizes in Footer Totals
                                            Columns.Add(vTotalNoSizesFooter2630);
                                            #endregion
                                        }
                                        
                                        /// <summary>Size Col Cost 26/30</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnStart()
                                        {
                                            // Only output if Colour decription 26<>''. ie that there are more than 5
                                            // colours, checked in 'Get Header' task
                                            if(_parent.vColourDescription26 != "")
                                            {
                                                _layout.SizeColourCost2630Header1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalUnits26.Value += WorkColsSizesByLot.Units26;
                                            vTotalUnits27.Value += WorkColsSizesByLot.Units27;
                                            vTotalUnits28.Value += WorkColsSizesByLot.Units28;
                                            vTotalUnits29.Value += WorkColsSizesByLot.Units29;
                                            vTotalUnits30.Value += WorkColsSizesByLot.Units30;
                                            vTotalNoOfSizesPerLine.Value = WorkColsSizesByLot.Units26 + WorkColsSizesByLot.Units27 + WorkColsSizesByLot.Units28 + WorkColsSizesByLot.Units29 + WorkColsSizesByLot.Units30;
                                            vTotalNoSizesFooter2630.Value += vTotalNoOfSizesPerLine;
                                            // only output if Colour Description 26<>'' see Task Suffix and any of the
                                            // 5 colours has a size
                                            if(WorkColsSizesByLot.Units26 != 0 || WorkColsSizesByLot.Units27 != 0 || WorkColsSizesByLot.Units28 != 0 || WorkColsSizesByLot.Units29 != 0 || WorkColsSizesByLot.Units30 != 0)
                                            {
                                                _layout.SizeColourCostDetail112630.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnEnd()
                                        {
                                            if(_parent.vColourDescription26 != "")
                                            {
                                                _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_4()
                                        {
                                            return WorkColsSizesByLot.Units30 > 0;
                                        }
                                        internal Bool Exp_5()
                                        {
                                            return WorkColsSizesByLot.Units29 > 0;
                                        }
                                        internal Bool Exp_6()
                                        {
                                            return WorkColsSizesByLot.Units28 > 0;
                                        }
                                        internal Bool Exp_7()
                                        {
                                            return WorkColsSizesByLot.Units27 > 0;
                                        }
                                        internal Bool Exp_8()
                                        {
                                            return WorkColsSizesByLot.Units26 > 0;
                                        }
                                        internal Bool Exp_9()
                                        {
                                            return vTotalUnits30 > 0;
                                        }
                                        internal Bool Exp_10()
                                        {
                                            return vTotalUnits29 > 0;
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return vTotalUnits28 > 0;
                                        }
                                        internal Bool Exp_12()
                                        {
                                            return vTotalUnits27 > 0;
                                        }
                                        internal Bool Exp_13()
                                        {
                                            return vTotalUnits26 > 0;
                                        }
                                        internal Text Exp_26()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        #endregion
                                        
                                        
                                    }
                                    
                                    /// <summary>Size Col Cost 31/35(P#400.1.1.1.1.3.4.1.6)</summary>
                                    // Last change before Migration: 08/11/2012 14:05:08
                                    internal class SizeColCost3135 : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Cols Sizes by Lot</summary>
                                        internal readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Order Lot Size Cost</summary>
                                        internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Units31</summary>
                                        internal readonly NumberColumn vTotalUnits31 = new NumberColumn("v:Total Units31", "7");
                                        
                                        /// <summary>v:Total Units32</summary>
                                        internal readonly NumberColumn vTotalUnits32 = new NumberColumn("v:Total Units32", "7");
                                        
                                        /// <summary>v:Total Units33</summary>
                                        internal readonly NumberColumn vTotalUnits33 = new NumberColumn("v:Total Units33", "7");
                                        
                                        /// <summary>v:Total Units34</summary>
                                        internal readonly NumberColumn vTotalUnits34 = new NumberColumn("v:Total Units34", "7");
                                        
                                        /// <summary>v:Total Units35</summary>
                                        internal readonly NumberColumn vTotalUnits35 = new NumberColumn("v:Total Units35", "7");
                                        
                                        /// <summary>v:Total No of Sizes per Line</summary>
                                        internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                        
                                        /// <summary>v:Total No Sizes Footer 31/35</summary>
                                        internal readonly NumberColumn vTotalNoSizesFooter3135 = new NumberColumn("v:Total No Sizes Footer 31/35", "9");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537SizeColCost31351 _layout;
                                        #endregion
                                        
                                        internal SizeColCost15 _parent;
                                        
                                        
                                        /// <summary>Size Col Cost 31/35(P#400.1.1.1.1.3.4.1.6)</summary>
                                        public SizeColCost3135(SizeColCost15 parent)
                                        {
                                            _parent = parent;
                                            Title = "Size Col Cost 31/35";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537SizeColCost31351(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkColsSizesByLot;
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(OrderLotSizeCost, 
                                            		OrderLotSizeCost.OrderNumber.IsEqualTo(WorkColsSizesByLot.OrderNumber).And(
                                            		OrderLotSizeCost.LotNumber.IsEqualTo(WorkColsSizesByLot.LotNumber)).And(
                                            		OrderLotSizeCost.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode)), 
                                            	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                            
                                            Where.Add(WorkColsSizesByLot.OrderNumber.IsEqualTo(_parent._parent.Lot.ORDER_NUMBER));
                                            Where.Add(WorkColsSizesByLot.LotNumber.IsEqualTo(_parent._parent.Lot.LOT_NUMBER));
                                            OrderBy = WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X2;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkColsSizesByLot.OrderNumber);
                                            Columns.Add(WorkColsSizesByLot.LotNumber);
                                            Columns.Add(WorkColsSizesByLot.ProductNumber);
                                            Columns.Add(WorkColsSizesByLot.SizeCode);
                                            Columns.Add(WorkColsSizesByLot.SizeRelativePosition);
                                            Columns.Add(WorkColsSizesByLot.Units31);
                                            Columns.Add(WorkColsSizesByLot.Units32);
                                            Columns.Add(WorkColsSizesByLot.Units33);
                                            Columns.Add(WorkColsSizesByLot.Units34);
                                            Columns.Add(WorkColsSizesByLot.Units35);
                                            
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            
                                            Columns.Add(OrderLotSizeCost.OrderNumber);
                                            Columns.Add(OrderLotSizeCost.LotNumber);
                                            Columns.Add(OrderLotSizeCost.ProductNumber);
                                            Columns.Add(OrderLotSizeCost.SizeCode);
                                            Columns.Add(OrderLotSizeCost.SizeCost);
                                            
                                            Columns.Add(vTotalUnits31);
                                            Columns.Add(vTotalUnits32);
                                            Columns.Add(vTotalUnits33);
                                            Columns.Add(vTotalUnits34);
                                            Columns.Add(vTotalUnits35);
                                            // Total number of Sizes across each Line
                                            Columns.Add(vTotalNoOfSizesPerLine);
                                            // Total Number of Sizes in Footer Totals
                                            Columns.Add(vTotalNoSizesFooter3135);
                                            #endregion
                                        }
                                        
                                        /// <summary>Size Col Cost 31/35</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnStart()
                                        {
                                            // Only output if Colour decription 31<>''. ie that there are more than 5
                                            // colours, checked in 'Get Header' task
                                            if(_parent.vColourDescription31 != "")
                                            {
                                                _layout.SizeColourCost3135Header1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalUnits31.Value += WorkColsSizesByLot.Units31;
                                            vTotalUnits32.Value += WorkColsSizesByLot.Units32;
                                            vTotalUnits33.Value += WorkColsSizesByLot.Units33;
                                            vTotalUnits34.Value += WorkColsSizesByLot.Units34;
                                            vTotalUnits35.Value += WorkColsSizesByLot.Units35;
                                            vTotalNoOfSizesPerLine.Value = WorkColsSizesByLot.Units31 + WorkColsSizesByLot.Units32 + WorkColsSizesByLot.Units33 + WorkColsSizesByLot.Units34 + WorkColsSizesByLot.Units35;
                                            vTotalNoSizesFooter3135.Value += vTotalNoOfSizesPerLine;
                                            // only output if Colour Description 31<>'' see Task Suffix and any of the
                                            // 5 colours has a size
                                            if(WorkColsSizesByLot.Units31 != 0 || WorkColsSizesByLot.Units32 != 0 || WorkColsSizesByLot.Units33 != 0 || WorkColsSizesByLot.Units34 != 0 || WorkColsSizesByLot.Units35 != 0)
                                            {
                                                _layout.SizeColourCostDetail113135.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnEnd()
                                        {
                                            if(_parent.vColourDescription31 != "")
                                            {
                                                _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_4()
                                        {
                                            return WorkColsSizesByLot.Units35 > 0;
                                        }
                                        internal Bool Exp_5()
                                        {
                                            return WorkColsSizesByLot.Units34 > 0;
                                        }
                                        internal Bool Exp_6()
                                        {
                                            return WorkColsSizesByLot.Units33 > 0;
                                        }
                                        internal Bool Exp_7()
                                        {
                                            return WorkColsSizesByLot.Units32 > 0;
                                        }
                                        internal Bool Exp_8()
                                        {
                                            return WorkColsSizesByLot.Units31 > 0;
                                        }
                                        internal Bool Exp_9()
                                        {
                                            return vTotalUnits35 > 0;
                                        }
                                        internal Bool Exp_10()
                                        {
                                            return vTotalUnits34 > 0;
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return vTotalUnits33 > 0;
                                        }
                                        internal Bool Exp_12()
                                        {
                                            return vTotalUnits32 > 0;
                                        }
                                        internal Bool Exp_13()
                                        {
                                            return vTotalUnits31 > 0;
                                        }
                                        internal Text Exp_26()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        #endregion
                                        
                                        
                                    }
                                    
                                    /// <summary>Size Col Cost 36/40(P#400.1.1.1.1.3.4.1.7)</summary>
                                    // Last change before Migration: 08/11/2012 14:07:17
                                    internal class SizeColCost3640 : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Cols Sizes by Lot</summary>
                                        internal readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Order Lot Size Cost</summary>
                                        internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Units36</summary>
                                        internal readonly NumberColumn vTotalUnits36 = new NumberColumn("v:Total Units36", "7");
                                        
                                        /// <summary>v:Total Units37</summary>
                                        internal readonly NumberColumn vTotalUnits37 = new NumberColumn("v:Total Units37", "7");
                                        
                                        /// <summary>v:Total Units38</summary>
                                        internal readonly NumberColumn vTotalUnits38 = new NumberColumn("v:Total Units38", "7");
                                        
                                        /// <summary>v:Total Units39</summary>
                                        internal readonly NumberColumn vTotalUnits39 = new NumberColumn("v:Total Units39", "7");
                                        
                                        /// <summary>v:Total Units40</summary>
                                        internal readonly NumberColumn vTotalUnits40 = new NumberColumn("v:Total Units40", "7");
                                        
                                        /// <summary>v:Total No of Sizes per Line</summary>
                                        internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                        
                                        /// <summary>v:Total No Sizes Footer 36/40</summary>
                                        internal readonly NumberColumn vTotalNoSizesFooter3640 = new NumberColumn("v:Total No Sizes Footer 36/40", "9");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537SizeColCost36401 _layout;
                                        #endregion
                                        
                                        internal SizeColCost15 _parent;
                                        
                                        
                                        /// <summary>Size Col Cost 36/40(P#400.1.1.1.1.3.4.1.7)</summary>
                                        public SizeColCost3640(SizeColCost15 parent)
                                        {
                                            _parent = parent;
                                            Title = "Size Col Cost 36/40";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537SizeColCost36401(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkColsSizesByLot;
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(OrderLotSizeCost, 
                                            		OrderLotSizeCost.OrderNumber.IsEqualTo(WorkColsSizesByLot.OrderNumber).And(
                                            		OrderLotSizeCost.LotNumber.IsEqualTo(WorkColsSizesByLot.LotNumber)).And(
                                            		OrderLotSizeCost.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode)), 
                                            	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                            
                                            Where.Add(WorkColsSizesByLot.OrderNumber.IsEqualTo(_parent._parent.Lot.ORDER_NUMBER));
                                            Where.Add(WorkColsSizesByLot.LotNumber.IsEqualTo(_parent._parent.Lot.LOT_NUMBER));
                                            OrderBy = WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X2;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkColsSizesByLot.OrderNumber);
                                            Columns.Add(WorkColsSizesByLot.LotNumber);
                                            Columns.Add(WorkColsSizesByLot.ProductNumber);
                                            Columns.Add(WorkColsSizesByLot.SizeCode);
                                            Columns.Add(WorkColsSizesByLot.SizeRelativePosition);
                                            Columns.Add(WorkColsSizesByLot.Units36);
                                            Columns.Add(WorkColsSizesByLot.Units37);
                                            Columns.Add(WorkColsSizesByLot.Units38);
                                            Columns.Add(WorkColsSizesByLot.Units39);
                                            Columns.Add(WorkColsSizesByLot.Units40);
                                            
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            
                                            Columns.Add(OrderLotSizeCost.OrderNumber);
                                            Columns.Add(OrderLotSizeCost.LotNumber);
                                            Columns.Add(OrderLotSizeCost.ProductNumber);
                                            Columns.Add(OrderLotSizeCost.SizeCode);
                                            Columns.Add(OrderLotSizeCost.SizeCost);
                                            
                                            Columns.Add(vTotalUnits36);
                                            Columns.Add(vTotalUnits37);
                                            Columns.Add(vTotalUnits38);
                                            Columns.Add(vTotalUnits39);
                                            Columns.Add(vTotalUnits40);
                                            // Total number of Sizes across each Line
                                            Columns.Add(vTotalNoOfSizesPerLine);
                                            // Total Number of Sizes in Footer Totals
                                            Columns.Add(vTotalNoSizesFooter3640);
                                            #endregion
                                        }
                                        
                                        /// <summary>Size Col Cost 36/40</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnStart()
                                        {
                                            // Only output if Colour decription 36<>''. ie that there are more than 5
                                            // colours, checked in 'Get Header' task
                                            if(_parent.vColourDescription36 != "")
                                            {
                                                _layout.SizeColourCost3640Header1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalUnits36.Value += WorkColsSizesByLot.Units36;
                                            vTotalUnits37.Value += WorkColsSizesByLot.Units37;
                                            vTotalUnits38.Value += WorkColsSizesByLot.Units38;
                                            vTotalUnits39.Value += WorkColsSizesByLot.Units39;
                                            vTotalUnits40.Value += WorkColsSizesByLot.Units40;
                                            vTotalNoOfSizesPerLine.Value = WorkColsSizesByLot.Units36 + WorkColsSizesByLot.Units37 + WorkColsSizesByLot.Units38 + WorkColsSizesByLot.Units39 + WorkColsSizesByLot.Units40;
                                            vTotalNoSizesFooter3640.Value += vTotalNoOfSizesPerLine;
                                            // only output if Colour Description 36<>'' see Task Suffix and any of the
                                            // 5 colours has a size
                                            if(WorkColsSizesByLot.Units36 != 0 || WorkColsSizesByLot.Units37 != 0 || WorkColsSizesByLot.Units38 != 0 || WorkColsSizesByLot.Units39 != 0 || WorkColsSizesByLot.Units40 != 0)
                                            {
                                                _layout.SizeColourCostDetail113640.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnEnd()
                                        {
                                            if(_parent.vColourDescription36 != "")
                                            {
                                                _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_4()
                                        {
                                            return WorkColsSizesByLot.Units40 > 0;
                                        }
                                        internal Bool Exp_5()
                                        {
                                            return WorkColsSizesByLot.Units39 > 0;
                                        }
                                        internal Bool Exp_6()
                                        {
                                            return WorkColsSizesByLot.Units38 > 0;
                                        }
                                        internal Bool Exp_7()
                                        {
                                            return WorkColsSizesByLot.Units37 > 0;
                                        }
                                        internal Bool Exp_8()
                                        {
                                            return WorkColsSizesByLot.Units36 > 0;
                                        }
                                        internal Bool Exp_9()
                                        {
                                            return vTotalUnits40 > 0;
                                        }
                                        internal Bool Exp_10()
                                        {
                                            return vTotalUnits39 > 0;
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return vTotalUnits38 > 0;
                                        }
                                        internal Bool Exp_12()
                                        {
                                            return vTotalUnits37 > 0;
                                        }
                                        internal Bool Exp_13()
                                        {
                                            return vTotalUnits36 > 0;
                                        }
                                        internal Text Exp_26()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        #endregion
                                        
                                        
                                    }
                                    
                                    /// <summary>Size Col Cost 41/45(P#400.1.1.1.1.3.4.1.8)</summary>
                                    // Last change before Migration: 08/11/2012 14:09:20
                                    internal class SizeColCost4145 : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Cols Sizes by Lot</summary>
                                        internal readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Order Lot Size Cost</summary>
                                        internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Units41</summary>
                                        internal readonly NumberColumn vTotalUnits41 = new NumberColumn("v:Total Units41", "7");
                                        
                                        /// <summary>v:Total Units42</summary>
                                        internal readonly NumberColumn vTotalUnits42 = new NumberColumn("v:Total Units42", "7");
                                        
                                        /// <summary>v:Total Units43</summary>
                                        internal readonly NumberColumn vTotalUnits43 = new NumberColumn("v:Total Units43", "7");
                                        
                                        /// <summary>v:Total Units44</summary>
                                        internal readonly NumberColumn vTotalUnits44 = new NumberColumn("v:Total Units44", "7");
                                        
                                        /// <summary>v:Total Units45</summary>
                                        internal readonly NumberColumn vTotalUnits45 = new NumberColumn("v:Total Units45", "7");
                                        
                                        /// <summary>v:Total No of Sizes per Line</summary>
                                        internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                        
                                        /// <summary>v:Total No Sizes Footer 41/45</summary>
                                        internal readonly NumberColumn vTotalNoSizesFooter4145 = new NumberColumn("v:Total No Sizes Footer 41/45", "9");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537SizeColCost41451 _layout;
                                        #endregion
                                        
                                        internal SizeColCost15 _parent;
                                        
                                        
                                        /// <summary>Size Col Cost 41/45(P#400.1.1.1.1.3.4.1.8)</summary>
                                        public SizeColCost4145(SizeColCost15 parent)
                                        {
                                            _parent = parent;
                                            Title = "Size Col Cost 41/45";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537SizeColCost41451(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkColsSizesByLot;
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(OrderLotSizeCost, 
                                            		OrderLotSizeCost.OrderNumber.IsEqualTo(WorkColsSizesByLot.OrderNumber).And(
                                            		OrderLotSizeCost.LotNumber.IsEqualTo(WorkColsSizesByLot.LotNumber)).And(
                                            		OrderLotSizeCost.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode)), 
                                            	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                            
                                            Where.Add(WorkColsSizesByLot.OrderNumber.IsEqualTo(_parent._parent.Lot.ORDER_NUMBER));
                                            Where.Add(WorkColsSizesByLot.LotNumber.IsEqualTo(_parent._parent.Lot.LOT_NUMBER));
                                            OrderBy = WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X2;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkColsSizesByLot.OrderNumber);
                                            Columns.Add(WorkColsSizesByLot.LotNumber);
                                            Columns.Add(WorkColsSizesByLot.ProductNumber);
                                            Columns.Add(WorkColsSizesByLot.SizeCode);
                                            Columns.Add(WorkColsSizesByLot.SizeRelativePosition);
                                            Columns.Add(WorkColsSizesByLot.Units41);
                                            Columns.Add(WorkColsSizesByLot.Units42);
                                            Columns.Add(WorkColsSizesByLot.Units43);
                                            Columns.Add(WorkColsSizesByLot.Units44);
                                            Columns.Add(WorkColsSizesByLot.Units45);
                                            
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            
                                            Columns.Add(OrderLotSizeCost.OrderNumber);
                                            Columns.Add(OrderLotSizeCost.LotNumber);
                                            Columns.Add(OrderLotSizeCost.ProductNumber);
                                            Columns.Add(OrderLotSizeCost.SizeCode);
                                            Columns.Add(OrderLotSizeCost.SizeCost);
                                            
                                            Columns.Add(vTotalUnits41);
                                            Columns.Add(vTotalUnits42);
                                            Columns.Add(vTotalUnits43);
                                            Columns.Add(vTotalUnits44);
                                            Columns.Add(vTotalUnits45);
                                            // Total number of Sizes across each Line
                                            Columns.Add(vTotalNoOfSizesPerLine);
                                            // Total Number of Sizes in Footer Totals
                                            Columns.Add(vTotalNoSizesFooter4145);
                                            #endregion
                                        }
                                        
                                        /// <summary>Size Col Cost 41/45</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnStart()
                                        {
                                            // Only output if Colour decription 41<>''. ie that there are more than 5
                                            // colours, checked in 'Get Header' task
                                            if(_parent.vColourDescription41 != "")
                                            {
                                                _layout.SizeColourCost4145Header1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalUnits41.Value += WorkColsSizesByLot.Units41;
                                            vTotalUnits42.Value += WorkColsSizesByLot.Units42;
                                            vTotalUnits43.Value += WorkColsSizesByLot.Units43;
                                            vTotalUnits44.Value += WorkColsSizesByLot.Units44;
                                            vTotalUnits45.Value += WorkColsSizesByLot.Units45;
                                            vTotalNoOfSizesPerLine.Value = WorkColsSizesByLot.Units41 + WorkColsSizesByLot.Units42 + WorkColsSizesByLot.Units43 + WorkColsSizesByLot.Units44 + WorkColsSizesByLot.Units45;
                                            vTotalNoSizesFooter4145.Value += vTotalNoOfSizesPerLine;
                                            // only output if Colour Description 41<>'' see Task Suffix and any of the
                                            // 5 colours has a size
                                            if(WorkColsSizesByLot.Units41 != 0 || WorkColsSizesByLot.Units42 != 0 || WorkColsSizesByLot.Units43 != 0 || WorkColsSizesByLot.Units44 != 0 || WorkColsSizesByLot.Units45 != 0)
                                            {
                                                _layout.SizeColourCostDetail114145.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnEnd()
                                        {
                                            if(_parent.vColourDescription41 != "")
                                            {
                                                _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_4()
                                        {
                                            return WorkColsSizesByLot.Units45 > 0;
                                        }
                                        internal Bool Exp_5()
                                        {
                                            return WorkColsSizesByLot.Units44 > 0;
                                        }
                                        internal Bool Exp_6()
                                        {
                                            return WorkColsSizesByLot.Units43 > 0;
                                        }
                                        internal Bool Exp_7()
                                        {
                                            return WorkColsSizesByLot.Units42 > 0;
                                        }
                                        internal Bool Exp_8()
                                        {
                                            return WorkColsSizesByLot.Units41 > 0;
                                        }
                                        internal Bool Exp_9()
                                        {
                                            return vTotalUnits45 > 0;
                                        }
                                        internal Bool Exp_10()
                                        {
                                            return vTotalUnits44 > 0;
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return vTotalUnits43 > 0;
                                        }
                                        internal Bool Exp_12()
                                        {
                                            return vTotalUnits42 > 0;
                                        }
                                        internal Bool Exp_13()
                                        {
                                            return vTotalUnits41 > 0;
                                        }
                                        internal Text Exp_26()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        #endregion
                                        
                                        
                                    }
                                    
                                    /// <summary>Size Col Cost 46/50(P#400.1.1.1.1.3.4.1.9)</summary>
                                    // Last change before Migration: 08/11/2012 14:11:00
                                    internal class SizeColCost4650 : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Cols Sizes by Lot</summary>
                                        internal readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Order Lot Size Cost</summary>
                                        internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Units46</summary>
                                        internal readonly NumberColumn vTotalUnits46 = new NumberColumn("v:Total Units46", "7");
                                        
                                        /// <summary>v:Total Units47</summary>
                                        internal readonly NumberColumn vTotalUnits47 = new NumberColumn("v:Total Units47", "7");
                                        
                                        /// <summary>v:Total Units48</summary>
                                        internal readonly NumberColumn vTotalUnits48 = new NumberColumn("v:Total Units48", "7");
                                        
                                        /// <summary>v:Total Units49</summary>
                                        internal readonly NumberColumn vTotalUnits49 = new NumberColumn("v:Total Units49", "7");
                                        
                                        /// <summary>v:Total Units50</summary>
                                        internal readonly NumberColumn vTotalUnits50 = new NumberColumn("v:Total Units50", "7");
                                        
                                        /// <summary>v:Total No of Sizes per Line</summary>
                                        internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                        
                                        /// <summary>v:Total No Sizes Footer 46/50</summary>
                                        internal readonly NumberColumn vTotalNoSizesFooter4650 = new NumberColumn("v:Total No Sizes Footer 46/50", "9");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537SizeColCost46501 _layout;
                                        #endregion
                                        
                                        internal SizeColCost15 _parent;
                                        
                                        
                                        /// <summary>Size Col Cost 46/50(P#400.1.1.1.1.3.4.1.9)</summary>
                                        public SizeColCost4650(SizeColCost15 parent)
                                        {
                                            _parent = parent;
                                            Title = "Size Col Cost 46/50";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537SizeColCost46501(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkColsSizesByLot;
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(OrderLotSizeCost, 
                                            		OrderLotSizeCost.OrderNumber.IsEqualTo(WorkColsSizesByLot.OrderNumber).And(
                                            		OrderLotSizeCost.LotNumber.IsEqualTo(WorkColsSizesByLot.LotNumber)).And(
                                            		OrderLotSizeCost.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode)), 
                                            	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                            
                                            Where.Add(WorkColsSizesByLot.OrderNumber.IsEqualTo(_parent._parent.Lot.ORDER_NUMBER));
                                            Where.Add(WorkColsSizesByLot.LotNumber.IsEqualTo(_parent._parent.Lot.LOT_NUMBER));
                                            OrderBy = WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X2;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkColsSizesByLot.OrderNumber);
                                            Columns.Add(WorkColsSizesByLot.LotNumber);
                                            Columns.Add(WorkColsSizesByLot.ProductNumber);
                                            Columns.Add(WorkColsSizesByLot.SizeCode);
                                            Columns.Add(WorkColsSizesByLot.SizeRelativePosition);
                                            Columns.Add(WorkColsSizesByLot.Units46);
                                            Columns.Add(WorkColsSizesByLot.Units47);
                                            Columns.Add(WorkColsSizesByLot.Units48);
                                            Columns.Add(WorkColsSizesByLot.Units49);
                                            Columns.Add(WorkColsSizesByLot.Units50);
                                            
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            
                                            Columns.Add(OrderLotSizeCost.OrderNumber);
                                            Columns.Add(OrderLotSizeCost.LotNumber);
                                            Columns.Add(OrderLotSizeCost.ProductNumber);
                                            Columns.Add(OrderLotSizeCost.SizeCode);
                                            Columns.Add(OrderLotSizeCost.SizeCost);
                                            
                                            Columns.Add(vTotalUnits46);
                                            Columns.Add(vTotalUnits47);
                                            Columns.Add(vTotalUnits48);
                                            Columns.Add(vTotalUnits49);
                                            Columns.Add(vTotalUnits50);
                                            // Total number of Sizes across each Line
                                            Columns.Add(vTotalNoOfSizesPerLine);
                                            // Total Number of Sizes in Footer Totals
                                            Columns.Add(vTotalNoSizesFooter4650);
                                            #endregion
                                        }
                                        
                                        /// <summary>Size Col Cost 46/50</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnStart()
                                        {
                                            // Only output if Colour decription 46<>''. ie that there are more than 5
                                            // colours, checked in 'Get Header' task
                                            if(_parent.vColourDescription46 != "")
                                            {
                                                _layout.SizeColourCost4650Header1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalUnits46.Value += WorkColsSizesByLot.Units46;
                                            vTotalUnits47.Value += WorkColsSizesByLot.Units47;
                                            vTotalUnits48.Value += WorkColsSizesByLot.Units48;
                                            vTotalUnits49.Value += WorkColsSizesByLot.Units49;
                                            vTotalUnits50.Value += WorkColsSizesByLot.Units50;
                                            vTotalNoOfSizesPerLine.Value = WorkColsSizesByLot.Units46 + WorkColsSizesByLot.Units47 + WorkColsSizesByLot.Units48 + WorkColsSizesByLot.Units49 + WorkColsSizesByLot.Units50;
                                            vTotalNoSizesFooter4650.Value += vTotalNoOfSizesPerLine;
                                            // only output if Colour Description 46<>'' see Task Suffix and any of the
                                            // 5 colours has a size
                                            if(WorkColsSizesByLot.Units46 != 0 || WorkColsSizesByLot.Units47 != 0 || WorkColsSizesByLot.Units48 != 0 || WorkColsSizesByLot.Units49 != 0 || WorkColsSizesByLot.Units50 != 0)
                                            {
                                                _layout.SizeColourCostDetail114650.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnEnd()
                                        {
                                            if(_parent.vColourDescription46 != "")
                                            {
                                                _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_4()
                                        {
                                            return WorkColsSizesByLot.Units50 > 0;
                                        }
                                        internal Bool Exp_5()
                                        {
                                            return WorkColsSizesByLot.Units49 > 0;
                                        }
                                        internal Bool Exp_6()
                                        {
                                            return WorkColsSizesByLot.Units48 > 0;
                                        }
                                        internal Bool Exp_7()
                                        {
                                            return WorkColsSizesByLot.Units47 > 0;
                                        }
                                        internal Bool Exp_8()
                                        {
                                            return WorkColsSizesByLot.Units46 > 0;
                                        }
                                        internal Bool Exp_9()
                                        {
                                            return vTotalUnits50 > 0;
                                        }
                                        internal Bool Exp_10()
                                        {
                                            return vTotalUnits49 > 0;
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return vTotalUnits48 > 0;
                                        }
                                        internal Bool Exp_12()
                                        {
                                            return vTotalUnits47 > 0;
                                        }
                                        internal Bool Exp_13()
                                        {
                                            return vTotalUnits46 > 0;
                                        }
                                        internal Text Exp_26()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        #endregion
                                        
                                        
                                    }
                                    
                                    /// <summary>Size Col Cost 51/55(P#400.1.1.1.1.3.4.1.10)</summary>
                                    // Last change before Migration: 08/11/2012 14:12:42
                                    internal class SizeColCost5155 : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Cols Sizes by Lot</summary>
                                        internal readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Order Lot Size Cost</summary>
                                        internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Units51</summary>
                                        internal readonly NumberColumn vTotalUnits51 = new NumberColumn("v:Total Units51", "7");
                                        
                                        /// <summary>v:Total Units52</summary>
                                        internal readonly NumberColumn vTotalUnits52 = new NumberColumn("v:Total Units52", "7");
                                        
                                        /// <summary>v:Total Units53</summary>
                                        internal readonly NumberColumn vTotalUnits53 = new NumberColumn("v:Total Units53", "7");
                                        
                                        /// <summary>v:Total Units54</summary>
                                        internal readonly NumberColumn vTotalUnits54 = new NumberColumn("v:Total Units54", "7");
                                        
                                        /// <summary>v:Total Units55</summary>
                                        internal readonly NumberColumn vTotalUnits55 = new NumberColumn("v:Total Units55", "7");
                                        
                                        /// <summary>v:Total No of Sizes per Line</summary>
                                        internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                        
                                        /// <summary>v:Total No Sizes Footer 51/55</summary>
                                        internal readonly NumberColumn vTotalNoSizesFooter5155 = new NumberColumn("v:Total No Sizes Footer 51/55", "9");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537SizeColCost51551 _layout;
                                        #endregion
                                        
                                        internal SizeColCost15 _parent;
                                        
                                        
                                        /// <summary>Size Col Cost 51/55(P#400.1.1.1.1.3.4.1.10)</summary>
                                        public SizeColCost5155(SizeColCost15 parent)
                                        {
                                            _parent = parent;
                                            Title = "Size Col Cost 51/55";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537SizeColCost51551(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkColsSizesByLot;
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(OrderLotSizeCost, 
                                            		OrderLotSizeCost.OrderNumber.IsEqualTo(WorkColsSizesByLot.OrderNumber).And(
                                            		OrderLotSizeCost.LotNumber.IsEqualTo(WorkColsSizesByLot.LotNumber)).And(
                                            		OrderLotSizeCost.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode)), 
                                            	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                            
                                            Where.Add(WorkColsSizesByLot.OrderNumber.IsEqualTo(_parent._parent.Lot.ORDER_NUMBER));
                                            Where.Add(WorkColsSizesByLot.LotNumber.IsEqualTo(_parent._parent.Lot.LOT_NUMBER));
                                            OrderBy = WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X2;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkColsSizesByLot.OrderNumber);
                                            Columns.Add(WorkColsSizesByLot.LotNumber);
                                            Columns.Add(WorkColsSizesByLot.ProductNumber);
                                            Columns.Add(WorkColsSizesByLot.SizeCode);
                                            Columns.Add(WorkColsSizesByLot.SizeRelativePosition);
                                            Columns.Add(WorkColsSizesByLot.Units51);
                                            Columns.Add(WorkColsSizesByLot.Units52);
                                            Columns.Add(WorkColsSizesByLot.Units53);
                                            Columns.Add(WorkColsSizesByLot.Units54);
                                            Columns.Add(WorkColsSizesByLot.Units55);
                                            
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            
                                            Columns.Add(OrderLotSizeCost.OrderNumber);
                                            Columns.Add(OrderLotSizeCost.LotNumber);
                                            Columns.Add(OrderLotSizeCost.ProductNumber);
                                            Columns.Add(OrderLotSizeCost.SizeCode);
                                            Columns.Add(OrderLotSizeCost.SizeCost);
                                            
                                            Columns.Add(vTotalUnits51);
                                            Columns.Add(vTotalUnits52);
                                            Columns.Add(vTotalUnits53);
                                            Columns.Add(vTotalUnits54);
                                            Columns.Add(vTotalUnits55);
                                            // Total number of Sizes across each Line
                                            Columns.Add(vTotalNoOfSizesPerLine);
                                            // Total Number of Sizes in Footer Totals
                                            Columns.Add(vTotalNoSizesFooter5155);
                                            #endregion
                                        }
                                        
                                        /// <summary>Size Col Cost 51/55</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnStart()
                                        {
                                            // Only output if Colour decription 51<>''. ie that there are more than 5
                                            // colours, checked in 'Get Header' task
                                            if(_parent.vColourDescription51 != "")
                                            {
                                                _layout.SizeColourCost5155Header1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalUnits51.Value += WorkColsSizesByLot.Units51;
                                            vTotalUnits52.Value += WorkColsSizesByLot.Units52;
                                            vTotalUnits53.Value += WorkColsSizesByLot.Units53;
                                            vTotalUnits54.Value += WorkColsSizesByLot.Units54;
                                            vTotalUnits55.Value += WorkColsSizesByLot.Units55;
                                            vTotalNoOfSizesPerLine.Value = WorkColsSizesByLot.Units51 + WorkColsSizesByLot.Units52 + WorkColsSizesByLot.Units53 + WorkColsSizesByLot.Units54 + WorkColsSizesByLot.Units55;
                                            vTotalNoSizesFooter5155.Value += vTotalNoOfSizesPerLine;
                                            // only output if Colour Description 51<>'' see Task Suffix and any of the
                                            // 5 colours has a size
                                            if(WorkColsSizesByLot.Units51 != 0 || WorkColsSizesByLot.Units52 != 0 || WorkColsSizesByLot.Units53 != 0 || WorkColsSizesByLot.Units54 != 0 || WorkColsSizesByLot.Units55 != 0)
                                            {
                                                _layout.SizeColourCostDetail115155.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnEnd()
                                        {
                                            if(_parent.vColourDescription51 != "")
                                            {
                                                _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_4()
                                        {
                                            return WorkColsSizesByLot.Units55 > 0;
                                        }
                                        internal Bool Exp_5()
                                        {
                                            return WorkColsSizesByLot.Units54 > 0;
                                        }
                                        internal Bool Exp_6()
                                        {
                                            return WorkColsSizesByLot.Units53 > 0;
                                        }
                                        internal Bool Exp_7()
                                        {
                                            return WorkColsSizesByLot.Units52 > 0;
                                        }
                                        internal Bool Exp_8()
                                        {
                                            return WorkColsSizesByLot.Units51 > 0;
                                        }
                                        internal Bool Exp_9()
                                        {
                                            return vTotalUnits55 > 0;
                                        }
                                        internal Bool Exp_10()
                                        {
                                            return vTotalUnits54 > 0;
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return vTotalUnits53 > 0;
                                        }
                                        internal Bool Exp_12()
                                        {
                                            return vTotalUnits52 > 0;
                                        }
                                        internal Bool Exp_13()
                                        {
                                            return vTotalUnits51 > 0;
                                        }
                                        internal Text Exp_26()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        #endregion
                                        
                                        
                                    }
                                    
                                    /// <summary>Size Col Cost 56/60(P#400.1.1.1.1.3.4.1.11)</summary>
                                    // Last change before Migration: 08/11/2012 14:14:31
                                    internal class SizeColCost5660 : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Cols Sizes by Lot</summary>
                                        internal readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Order Lot Size Cost</summary>
                                        internal readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Units56</summary>
                                        internal readonly NumberColumn vTotalUnits56 = new NumberColumn("v:Total Units56", "7");
                                        
                                        /// <summary>v:Total Units57</summary>
                                        internal readonly NumberColumn vTotalUnits57 = new NumberColumn("v:Total Units57", "7");
                                        
                                        /// <summary>v:Total Units58</summary>
                                        internal readonly NumberColumn vTotalUnits58 = new NumberColumn("v:Total Units58", "7");
                                        
                                        /// <summary>v:Total Units59</summary>
                                        internal readonly NumberColumn vTotalUnits59 = new NumberColumn("v:Total Units59", "7");
                                        
                                        /// <summary>v:Total Units60</summary>
                                        internal readonly NumberColumn vTotalUnits60 = new NumberColumn("v:Total Units60", "7");
                                        
                                        /// <summary>v:Total No of Sizes per Line</summary>
                                        internal readonly NumberColumn vTotalNoOfSizesPerLine = new NumberColumn("v:Total No of Sizes per Line", "9");
                                        
                                        /// <summary>v:Total No Sizes Footer 56/60</summary>
                                        internal readonly NumberColumn vTotalNoSizesFooter5660 = new NumberColumn("v:Total No Sizes Footer 56/60", "9");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537SizeColCost56601 _layout;
                                        #endregion
                                        
                                        internal SizeColCost15 _parent;
                                        
                                        
                                        /// <summary>Size Col Cost 56/60(P#400.1.1.1.1.3.4.1.11)</summary>
                                        public SizeColCost5660(SizeColCost15 parent)
                                        {
                                            _parent = parent;
                                            Title = "Size Col Cost 56/60";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537SizeColCost56601(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkColsSizesByLot;
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(OrderLotSizeCost, 
                                            		OrderLotSizeCost.OrderNumber.IsEqualTo(WorkColsSizesByLot.OrderNumber).And(
                                            		OrderLotSizeCost.LotNumber.IsEqualTo(WorkColsSizesByLot.LotNumber)).And(
                                            		OrderLotSizeCost.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode)), 
                                            	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1);
                                            
                                            Where.Add(WorkColsSizesByLot.OrderNumber.IsEqualTo(_parent._parent.Lot.ORDER_NUMBER));
                                            Where.Add(WorkColsSizesByLot.LotNumber.IsEqualTo(_parent._parent.Lot.LOT_NUMBER));
                                            OrderBy = WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X2;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkColsSizesByLot.OrderNumber);
                                            Columns.Add(WorkColsSizesByLot.LotNumber);
                                            Columns.Add(WorkColsSizesByLot.ProductNumber);
                                            Columns.Add(WorkColsSizesByLot.SizeCode);
                                            Columns.Add(WorkColsSizesByLot.SizeRelativePosition);
                                            Columns.Add(WorkColsSizesByLot.Units56);
                                            Columns.Add(WorkColsSizesByLot.Units57);
                                            Columns.Add(WorkColsSizesByLot.Units58);
                                            Columns.Add(WorkColsSizesByLot.Units59);
                                            Columns.Add(WorkColsSizesByLot.Units60);
                                            
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            
                                            Columns.Add(OrderLotSizeCost.OrderNumber);
                                            Columns.Add(OrderLotSizeCost.LotNumber);
                                            Columns.Add(OrderLotSizeCost.ProductNumber);
                                            Columns.Add(OrderLotSizeCost.SizeCode);
                                            Columns.Add(OrderLotSizeCost.SizeCost);
                                            
                                            Columns.Add(vTotalUnits56);
                                            Columns.Add(vTotalUnits57);
                                            Columns.Add(vTotalUnits58);
                                            Columns.Add(vTotalUnits59);
                                            Columns.Add(vTotalUnits60);
                                            // Total number of Sizes across each Line
                                            Columns.Add(vTotalNoOfSizesPerLine);
                                            // Total Number of Sizes in Footer Totals
                                            Columns.Add(vTotalNoSizesFooter5660);
                                            #endregion
                                        }
                                        
                                        /// <summary>Size Col Cost 56/60</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnStart()
                                        {
                                            // Only output if Colour decription 56<>''. ie that there are more than 5
                                            // colours, checked in 'Get Header' task
                                            if(_parent.vColourDescription56 != "")
                                            {
                                                _layout.SizeColourCost5660Header1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalUnits56.Value += WorkColsSizesByLot.Units56;
                                            vTotalUnits57.Value += WorkColsSizesByLot.Units57;
                                            vTotalUnits58.Value += WorkColsSizesByLot.Units58;
                                            vTotalUnits59.Value += WorkColsSizesByLot.Units59;
                                            vTotalUnits60.Value += WorkColsSizesByLot.Units60;
                                            vTotalNoOfSizesPerLine.Value = WorkColsSizesByLot.Units56 + WorkColsSizesByLot.Units57 + WorkColsSizesByLot.Units58 + WorkColsSizesByLot.Units59 + WorkColsSizesByLot.Units60;
                                            vTotalNoSizesFooter5660.Value += vTotalNoOfSizesPerLine;
                                            // only output if Colour Description 56<>'' see Task Suffix and any of the
                                            // 5 colours has a size
                                            if(WorkColsSizesByLot.Units56 != 0 || WorkColsSizesByLot.Units57 != 0 || WorkColsSizesByLot.Units58 != 0 || WorkColsSizesByLot.Units59 != 0 || WorkColsSizesByLot.Units60 != 0)
                                            {
                                                _layout.SizeColourCostDetail115660.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        protected override void OnEnd()
                                        {
                                            if(_parent.vColourDescription56 != "")
                                            {
                                                _layout.SizeColourCostFooter1.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_4()
                                        {
                                            return WorkColsSizesByLot.Units60 > 0;
                                        }
                                        internal Bool Exp_5()
                                        {
                                            return WorkColsSizesByLot.Units59 > 0;
                                        }
                                        internal Bool Exp_6()
                                        {
                                            return WorkColsSizesByLot.Units58 > 0;
                                        }
                                        internal Bool Exp_7()
                                        {
                                            return WorkColsSizesByLot.Units57 > 0;
                                        }
                                        internal Bool Exp_8()
                                        {
                                            return WorkColsSizesByLot.Units56 > 0;
                                        }
                                        internal Bool Exp_9()
                                        {
                                            return vTotalUnits60 > 0;
                                        }
                                        internal Bool Exp_10()
                                        {
                                            return vTotalUnits59 > 0;
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return vTotalUnits58 > 0;
                                        }
                                        internal Bool Exp_12()
                                        {
                                            return vTotalUnits57 > 0;
                                        }
                                        internal Bool Exp_13()
                                        {
                                            return vTotalUnits56 > 0;
                                        }
                                        internal Text Exp_26()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        #endregion
                                        
                                        
                                    }
                                    
                                    /// <summary>Get Headers(P#400.1.1.1.1.3.4.1.12)</summary>
                                    // Last change before Migration: 24/10/2011 14:11:25
                                    class GetHeaders : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Cols Sizes by Lot</summary>
                                        readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                        
                                        /// <summary>Work Cols Sizes by Lot</summary>
                                        readonly Models.WorkColsSizesByLot WorkColsSizesByLot1 = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                        #endregion
                                        
                                        SizeColCost15 _parent;
                                        
                                        
                                        /// <summary>Get Headers(P#400.1.1.1.1.3.4.1.12)</summary>
                                        public GetHeaders(SizeColCost15 parent)
                                        {
                                            _parent = parent;
                                            Title = "Get Headers";
                                            InitializeDataView();
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkColsSizesByLot;
                                            Relations.Add(WorkColsSizesByLot1, 
                                            		WorkColsSizesByLot1.OrderNumber.IsEqualTo(_parent._parent.Lot.ORDER_NUMBER).And(
                                            		WorkColsSizesByLot1.LotNumber.IsEqualTo(_parent._parent.Lot.LOT_NUMBER)), 
                                            	WorkColsSizesByLot1.SortBySHP_WorkColsSizesByLot_X1);
                                            
                                            OrderBy = WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X1;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkColsSizesByLot1.OrderNumber);
                                            Columns.Add(WorkColsSizesByLot1.LotNumber);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc01);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc02);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc03);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc04);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc05);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc06);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc07);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc08);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc09);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc10);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc11);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc12);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc13);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc14);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc15);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc16);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc17);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc18);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc19);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc20);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc21);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc22);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc23);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc24);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc25);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc26);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc27);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc28);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc29);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc30);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc31);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc32);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc33);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc34);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc35);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc36);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc37);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc38);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc39);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc40);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc41);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc42);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc43);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc44);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc45);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc46);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc47);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc48);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc49);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc50);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc51);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc52);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc53);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc54);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc55);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc56);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc57);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc58);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc59);
                                            Columns.Add(WorkColsSizesByLot1.ColourDesc60);
                                            #endregion
                                        }
                                        
                                        /// <summary>Get Headers</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            Exit(ExitTiming.AfterRow);
                                            TransactionScope = TransactionScopes.Task;
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            _parent.vColourDescription01.Value = WorkColsSizesByLot1.ColourDesc01;
                                            _parent.vColourDescription02.Value = WorkColsSizesByLot1.ColourDesc02;
                                            _parent.vColourDescription03.Value = WorkColsSizesByLot1.ColourDesc03;
                                            _parent.vColourDescription04.Value = WorkColsSizesByLot1.ColourDesc04;
                                            _parent.vColourDescription05.Value = WorkColsSizesByLot1.ColourDesc05;
                                            _parent.vColourDescription06.Value = WorkColsSizesByLot1.ColourDesc06;
                                            _parent.vColourDescription07.Value = WorkColsSizesByLot1.ColourDesc07;
                                            _parent.vColourDescription08.Value = WorkColsSizesByLot1.ColourDesc08;
                                            _parent.vColourDescription09.Value = WorkColsSizesByLot1.ColourDesc09;
                                            _parent.vColourDescription10.Value = WorkColsSizesByLot1.ColourDesc10;
                                            _parent.vColourDescription11.Value = WorkColsSizesByLot1.ColourDesc11;
                                            _parent.vColourDescription12.Value = WorkColsSizesByLot1.ColourDesc12;
                                            _parent.vColourDescription13.Value = WorkColsSizesByLot1.ColourDesc13;
                                            _parent.vColourDescription14.Value = WorkColsSizesByLot1.ColourDesc14;
                                            _parent.vColourDescription15.Value = WorkColsSizesByLot1.ColourDesc15;
                                            _parent.vColourDescription16.Value = WorkColsSizesByLot1.ColourDesc16;
                                            _parent.vColourDescription17.Value = WorkColsSizesByLot1.ColourDesc17;
                                            _parent.vColourDescription18.Value = WorkColsSizesByLot1.ColourDesc18;
                                            _parent.vColourDescription19.Value = WorkColsSizesByLot1.ColourDesc19;
                                            _parent.vColourDescription20.Value = WorkColsSizesByLot1.ColourDesc20;
                                            _parent.vColourDescription21.Value = WorkColsSizesByLot1.ColourDesc21;
                                            _parent.vColourDescription22.Value = WorkColsSizesByLot1.ColourDesc22;
                                            _parent.vColourDescription23.Value = WorkColsSizesByLot1.ColourDesc23;
                                            _parent.vColourDescription24.Value = WorkColsSizesByLot1.ColourDesc24;
                                            _parent.vColourDescription25.Value = WorkColsSizesByLot1.ColourDesc25;
                                            _parent.vColourDescription26.Value = WorkColsSizesByLot1.ColourDesc26;
                                            _parent.vColourDescription27.Value = WorkColsSizesByLot1.ColourDesc27;
                                            _parent.vColourDescription28.Value = WorkColsSizesByLot1.ColourDesc28;
                                            _parent.vColourDescription29.Value = WorkColsSizesByLot1.ColourDesc29;
                                            _parent.vColourDescription30.Value = WorkColsSizesByLot1.ColourDesc30;
                                            _parent.vColourDescription31.Value = WorkColsSizesByLot1.ColourDesc31;
                                            _parent.vColourDescription32.Value = WorkColsSizesByLot1.ColourDesc32;
                                            _parent.vColourDescription33.Value = WorkColsSizesByLot1.ColourDesc33;
                                            _parent.vColourDescription34.Value = WorkColsSizesByLot1.ColourDesc34;
                                            _parent.vColourDescription35.Value = WorkColsSizesByLot1.ColourDesc35;
                                            _parent.vColourDescription36.Value = WorkColsSizesByLot1.ColourDesc36;
                                            _parent.vColourDescription37.Value = WorkColsSizesByLot1.ColourDesc37;
                                            _parent.vColourDescription38.Value = WorkColsSizesByLot1.ColourDesc38;
                                            _parent.vColourDescription39.Value = WorkColsSizesByLot1.ColourDesc39;
                                            _parent.vColourDescription40.Value = WorkColsSizesByLot1.ColourDesc40;
                                            _parent.vColourDescription41.Value = WorkColsSizesByLot1.ColourDesc41;
                                            _parent.vColourDescription42.Value = WorkColsSizesByLot1.ColourDesc42;
                                            _parent.vColourDescription43.Value = WorkColsSizesByLot1.ColourDesc43;
                                            _parent.vColourDescription44.Value = WorkColsSizesByLot1.ColourDesc44;
                                            _parent.vColourDescription45.Value = WorkColsSizesByLot1.ColourDesc45;
                                            _parent.vColourDescription46.Value = WorkColsSizesByLot1.ColourDesc46;
                                            _parent.vColourDescription47.Value = WorkColsSizesByLot1.ColourDesc47;
                                            _parent.vColourDescription48.Value = WorkColsSizesByLot1.ColourDesc48;
                                            _parent.vColourDescription49.Value = WorkColsSizesByLot1.ColourDesc49;
                                            _parent.vColourDescription50.Value = WorkColsSizesByLot1.ColourDesc50;
                                            _parent.vColourDescription51.Value = WorkColsSizesByLot1.ColourDesc51;
                                            _parent.vColourDescription52.Value = WorkColsSizesByLot1.ColourDesc52;
                                            _parent.vColourDescription53.Value = WorkColsSizesByLot1.ColourDesc53;
                                            _parent.vColourDescription54.Value = WorkColsSizesByLot1.ColourDesc54;
                                            _parent.vColourDescription55.Value = WorkColsSizesByLot1.ColourDesc55;
                                            _parent.vColourDescription56.Value = WorkColsSizesByLot1.ColourDesc56;
                                            _parent.vColourDescription57.Value = WorkColsSizesByLot1.ColourDesc57;
                                            _parent.vColourDescription58.Value = WorkColsSizesByLot1.ColourDesc58;
                                            _parent.vColourDescription59.Value = WorkColsSizesByLot1.ColourDesc59;
                                            _parent.vColourDescription60.Value = WorkColsSizesByLot1.ColourDesc60;
                                        }
                                        
                                        
                                    }
                                }
                            }
                            
                            /// <summary>Cost Diffs within Lot(P#400.1.1.1.1.3.5)</summary>
                            // Last change before Migration: 11/02/2002 14:22:09
                            class CostDiffsWithinLot : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>Order Lot Size Cost</summary>
                                readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                #endregion
                                
                                #region Columns
                                
                                /// <summary>v:Prev Cost</summary>
                                readonly NumberColumn vPrevCost = new NumberColumn("v:Prev Cost", "6.4A");
                                #endregion
                                
                                LotDetails _parent;
                                
                                
                                /// <summary>Cost Diffs within Lot(P#400.1.1.1.1.3.5)</summary>
                                public CostDiffsWithinLot(LotDetails parent)
                                {
                                    _parent = parent;
                                    Title = "Cost Diffs within Lot";
                                    InitializeDataView();
                                }
                                void InitializeDataView()
                                {
                                    From = OrderLotSizeCost;
                                    Where.Add(OrderLotSizeCost.OrderNumber.IsEqualTo(_parent.Lot.ORDER_NUMBER));
                                    Where.Add(OrderLotSizeCost.LotNumber.IsEqualTo(_parent.Lot.LOT_NUMBER));
                                    Where.Add(OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1));
                                    OrderBy = OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1;
                                    
                                    #region Columns
                                    
                                    Columns.Add(vPrevCost);
                                    
                                    Columns.Add(OrderLotSizeCost.OrderNumber);
                                    Columns.Add(OrderLotSizeCost.LotNumber);
                                    Columns.Add(OrderLotSizeCost.SizeCode);
                                    Columns.Add(OrderLotSizeCost.SizeCost);
                                    // if ordered
                                    Columns.Add(OrderLotSizeCost.SizeQuantity);
                                    #endregion
                                }
                                
                                /// <summary>Cost Diffs within Lot</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    KeepChildRelationCacheAlive = true;
                                    KeepViewVisibleAfterExit = true;
                                }
                                protected override void OnLeaveRow()
                                {
                                    // if cost diff between current and prev and prev not zero, set flag
                                    if(OrderLotSizeCost.SizeCost != vPrevCost && vPrevCost != 0)
                                    {
                                        _parent.vCostDiffsWithinLotFound.Value = true;
                                    }
                                    
                                    vPrevCost.Value = OrderLotSizeCost.SizeCost;
                                }
                                
                                
                            }
                            
                            /// <summary>Proforma Print(P#400.1.1.1.1.3.6)</summary>
                            // Last change before Migration: 12/11/2012 10:56:01
                            internal class ProformaPrint : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>Lot</summary>
                                internal readonly Models.Lot Lot = new Models.Lot { ReadOnly = true };
                                #endregion
                                
                                #region Columns
                                
                                /// <summary>p:All Attribs OK</summary>
                                readonly BoolColumn pAllAttribsOK = new BoolColumn("p:All Attribs OK");
                                
                                /// <summary>v:space</summary>
                                readonly TextColumn vSpace = new TextColumn("v:space", "2");
                                #endregion
                                
                                LotDetails _parent;
                                
                                
                                /// <summary>Proforma Print(P#400.1.1.1.1.3.6)</summary>
                                public ProformaPrint(LotDetails parent)
                                {
                                    _parent = parent;
                                    Title = "Proforma Print";
                                    InitializeDataView();
                                }
                                void InitializeDataView()
                                {
                                    Relations.Add(Lot, 
                                    		Lot.ORDER_NUMBER.IsEqualTo(_parent._parent._parent._parent.Orders.ORDER_NUMBER).And(
                                    		Lot.LOT_NUMBER.IsEqualTo("1 ")), 
                                    	Lot.SortBySHP_LOTS_X1);
                                    
                                    
                                    #region Columns
                                    
                                    // param (along with order) to pass to po1158 for attribute check
                                    Columns.Add(pAllAttribsOK);
                                    
                                    // delete temp work colours memory table
                                    
                                    // Get Lot 1 of printing order for notional extras cost
                                    Columns.Add(Lot.ORDER_NUMBER);
                                    Columns.Add(Lot.LOT_NUMBER);
                                    Columns.Add(Lot.EXTRA_NOTIONAL_COST_STER);
                                    
                                    Columns.Add(vSpace).BindValue(() => " ");
                                    #endregion
                                }
                                
                                /// <summary>Proforma Print</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    Exit(ExitTiming.AfterRow);
                                    RowLocking = LockingStrategy.OnRowLoading;
                                    TransactionScope = TransactionScopes.Task;
                                    Activity = Activities.Delete;
                                }
                                protected override void OnEnterRow()
                                {
                                    pAllAttribsOK.Value = true;
                                }
                                protected override void OnEnd()
                                {
                                    u.DBDel(typeof(Models.WorkColsSizesByLot), "");
                                    
                                    Cached<ProformaMargins>().Run();
                                    
                                    if(u.Not(_parent._parent._parent._parent._parent._parent.pCommitmentOrder))
                                    {
                                        Cached<SubPrograms.SubCheckAttributesPo1667>().Run(_parent._parent._parent._parent._parent._parent.pOrder);
                                        Cached<ListAttributesStatus>().Run();
                                        
                                        if(_parent._parent._parent._parent.StyleSpecification.DSS_DEPARTMENT_CODE != "4")
                                        {
                                            Cached<ListOptionAttributesPart1>().Run();
                                            Cached<ListOptionAttributesPart2>().Run();
                                        }
                                        
                                        if(_parent._parent._parent._parent.StyleSpecification.DSS_DEPARTMENT_CODE == "4")
                                        {
                                            Cached<ListOptionAttributesHome>().Run();
                                        }
                                        Cached<CheckIfLabelsExist>().Run();
                                    }
                                }
                                
                                
                                
                                /// <summary>Proforma Margins(P#400.1.1.1.1.3.6.1)</summary>
                                // Last change before Migration: 12/11/2012 11:42:17
                                internal class ProformaMargins : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>Order Lot Size Cost</summary>
                                    readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                    
                                    /// <summary>Size</summary>
                                    readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                    
                                    /// <summary>Product Sizes</summary>
                                    readonly Models.ProductSizes ProductSizes = new Models.ProductSizes { ReadOnly = true };
                                    
                                    /// <summary>VAT Rates</summary>
                                    readonly Models.VATRates VATRates = new Models.VATRates { ReadOnly = true };
                                    
                                    /// <summary>Lot</summary>
                                    readonly Models.Lot Lot = new Models.Lot { ReadOnly = true };
                                    
                                    /// <summary>Orders</summary>
                                    internal readonly Models.Orders Orders = new Models.Orders { Cached = false, ReadOnly = true };
                                    
                                    /// <summary>Work Cols Sizes by Lot</summary>
                                    readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                    
                                    /// <summary>MOS_FRA_ORDER_PACKS</summary>
                                    readonly Models.MOS_FRA_ORDER_PACKS MOS_FRA_ORDER_PACKS = new Models.MOS_FRA_ORDER_PACKS { ReadOnly = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>RC:franchise order found</summary>
                                    readonly BoolColumn RCFranchiseOrderFound = new BoolColumn("RC:franchise order found");
                                    
                                    /// <summary>v:franchisee lot qty</summary>
                                    internal readonly NumberColumn vFranchiseeLotQty = new NumberColumn("v:franchisee lot qty", "6");
                                    
                                    /// <summary>v:Size Quantity</summary>
                                    internal readonly NumberColumn vSizeQuantity = new NumberColumn("v:Size Quantity", "7A");
                                    
                                    /// <summary>v:Total Quantity</summary>
                                    internal readonly NumberColumn vTotalQuantity = new NumberColumn("v:Total Quantity", "7A");
                                    
                                    /// <summary>v:Size Currency Cost Value</summary>
                                    readonly NumberColumn vSizeCurrencyCostValue = new NumberColumn("v:Size Currency Cost Value", "6.4");
                                    
                                    /// <summary>v:Sell Value</summary>
                                    internal readonly NumberColumn vSellValue = new NumberColumn("v:Sell Value", "10.2");
                                    
                                    /// <summary>v:Total Sell Value</summary>
                                    internal readonly NumberColumn vTotalSellValue = new NumberColumn("v:Total Sell Value", "10.2");
                                    
                                    /// <summary>v:Margin</summary>
                                    internal readonly NumberColumn vMargin = new NumberColumn("v:Margin", "N3.2");
                                    
                                    /// <summary>v:Total Margin</summary>
                                    internal readonly NumberColumn vTotalMargin = new NumberColumn("v:Total Margin", "N3.2");
                                    
                                    /// <summary>v:Cost Value</summary>
                                    internal readonly NumberColumn vCostValue = new NumberColumn("v:Cost Value", "6.4");
                                    
                                    /// <summary>v:Cost Price</summary>
                                    internal readonly NumberColumn vCostPrice = new NumberColumn("v:Cost Price", "6.4");
                                    
                                    /// <summary>v:Total Cost Value</summary>
                                    internal readonly NumberColumn vTotalCostValue = new NumberColumn("v:Total Cost Value", "6.4");
                                    
                                    /// <summary>v:Size Freight Value</summary>
                                    readonly NumberColumn vSizeFreightValue = new NumberColumn("v:Size Freight Value", "5.4");
                                    
                                    /// <summary>v:Total Freight Value</summary>
                                    readonly NumberColumn vTotalFreightValue = new NumberColumn("v:Total Freight Value", "6.4");
                                    
                                    /// <summary>v:Average Freight Cost</summary>
                                    internal readonly NumberColumn vAverageFreightCost = new NumberColumn("v:Average Freight Cost", "6.4");
                                    
                                    /// <summary>v:Average Landed Cost</summary>
                                    internal readonly NumberColumn vAverageLandedCost = new NumberColumn("v:Average Landed Cost", "4.2");
                                    
                                    /// <summary>v:Sell Value Excluding VAT</summary>
                                    readonly NumberColumn vSellValueExcludingVAT = new NumberColumn("v:Sell Value Excluding VAT", "10.2");
                                    
                                    /// <summary>v:Total Sell Value ExcludingVAT</summary>
                                    readonly NumberColumn vTotalSellValueExcludingVAT = new NumberColumn("v:Total Sell Value ExcludingVAT", "10.2");
                                    
                                    /// <summary>v:RollupExtraCostValforSize</summary>
                                    readonly NumberColumn vRollupExtraCostValforSize = new NumberColumn("v:RollupExtraCostValforSize", "6.4");
                                    
                                    /// <summary>v:Tot Cost Val inc Extras</summary>
                                    internal readonly NumberColumn vTotCostValIncExtras = new NumberColumn("v:Tot Cost Val inc Extras", "6.4");
                                    
                                    /// <summary>v:Partial Extra Costs Exist</summary>
                                    internal readonly BoolColumn vPartialExtraCostsExist = new BoolColumn("v:Partial Extra Costs Exist");
                                    
                                    /// <summary>v:Commission Value</summary>
                                    readonly NumberColumn vCommissionValue = new NumberColumn("v:Commission Value", "4.2");
                                    
                                    /// <summary>v:Duty Value</summary>
                                    readonly NumberColumn vDutyValue = new NumberColumn("v:Duty Value", "4.2");
                                    
                                    /// <summary>v:Uplift Value</summary>
                                    readonly NumberColumn vUpliftValue = new NumberColumn("v:Uplift Value", "4.2");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537ProformaMargins _layout;
                                    #endregion
                                    
                                    internal ProformaPrint _parent;
                                    
                                    
                                    /// <summary>Proforma Margins(P#400.1.1.1.1.3.6.1)</summary>
                                    public ProformaMargins(ProformaPrint parent)
                                    {
                                        _parent = parent;
                                        Title = "Proforma Margins";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537ProformaMargins(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = OrderLotSizeCost;
                                        Relations.Add(Size1, 
                                        		Size1.SizeCode.IsEqualTo(OrderLotSizeCost.SizeCode), 
                                        	Size1.SortByREF_Size_X1);
                                        
                                        Relations.Add(ProductSizes, 
                                        		ProductSizes.ProductNumber.IsEqualTo(OrderLotSizeCost.ProductNumber).And(
                                        		ProductSizes.SizeCode.IsEqualTo(OrderLotSizeCost.SizeCode)), 
                                        	ProductSizes.SortBySHP_Product_Sizes_X1);
                                        
                                        Relations.Add(VATRates, 
                                        		VATRates.VATCode.IsEqualTo(ProductSizes.VatCode), 
                                        	VATRates.SortByREF_VatRate_X1);
                                        
                                        Relations.Add(Lot, 
                                        		Lot.ORDER_NUMBER.IsEqualTo(OrderLotSizeCost.OrderNumber).And(
                                        		Lot.LOT_NUMBER.IsEqualTo(OrderLotSizeCost.LotNumber)), 
                                        	Lot.SortBySHP_LOTS_X1);
                                        
                                        Relations.Add(Orders, 
                                        		Orders.ORDER_NUMBER.IsEqualTo(OrderLotSizeCost.OrderNumber), 
                                        	Orders.SortBySHP_ORDERS_X1);
                                        
                                        Relations.Add(WorkColsSizesByLot, RelationType.InsertIfNotFound, 
                                        		WorkColsSizesByLot.OrderNumber.BindEqualTo(OrderLotSizeCost.OrderNumber).And(
                                        		WorkColsSizesByLot.LotNumber.BindEqualTo(OrderLotSizeCost.LotNumber)).And(
                                        		WorkColsSizesByLot.ProductNumber.BindEqualTo(OrderLotSizeCost.ProductNumber)).And(
                                        		WorkColsSizesByLot.SizeCode.BindEqualTo(OrderLotSizeCost.SizeCode)), 
                                        	WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X1);
                                        
                                        Relations.Add(MOS_FRA_ORDER_PACKS, 
                                        		MOS_FRA_ORDER_PACKS.MACKAYS_ORDER_NUMBER.IsEqualTo(_parent._parent._parent._parent._parent._parent._parent.pOrder), 
                                        	MOS_FRA_ORDER_PACKS.SortByMOS_FRA_ORDER_PACKS_X1);
                                        
                                        Where.Add(OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.Orders.ORDER_NUMBER));
                                        Where.Add(CndRange(() => u.Not(_parent._parent._parent._parent._parent._parent._parent.pCommitmentOrder), OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1)));
                                        OrderBy = OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1;
                                        
                                        #region Columns
                                        
                                        Columns.Add(OrderLotSizeCost.OrderNumber);
                                        Columns.Add(OrderLotSizeCost.LotNumber);
                                        Columns.Add(OrderLotSizeCost.ProductNumber);
                                        Columns.Add(OrderLotSizeCost.SizeCode);
                                        // Get Size Description
                                        Columns.Add(Size1.SizeCode);
                                        Columns.Add(Size1.SizeDescription);
                                        // Get VAT code for Size
                                        Columns.Add(ProductSizes.ProductNumber);
                                        Columns.Add(ProductSizes.SizeCode);
                                        Columns.Add(ProductSizes.SizeRelativePosition);
                                        Columns.Add(ProductSizes.VatCode);
                                        Columns.Add(ProductSizes.SellingPrice);
                                        // Get VAT description for VAT code
                                        Columns.Add(VATRates.VATCode);
                                        Columns.Add(VATRates.CurrentVATRate);
                                        Columns.Add(OrderLotSizeCost.SizeCost);
                                        Columns.Add(OrderLotSizeCost.CostCurrency);
                                        Columns.Add(OrderLotSizeCost.SizeQuantity);
                                        Columns.Add(Lot.ORDER_NUMBER);
                                        Columns.Add(Lot.LOT_NUMBER);
                                        Columns.Add(Lot.UNIT_FREIGHT_COST);
                                        // Margin Calculation Details from Order Table
                                        Columns.Add(Orders.ORDER_NUMBER);
                                        Columns.Add(Orders.AGENT_COMMISSION_PCENT);
                                        Columns.Add(Orders.NOTIONAL_DUTY_PCENT);
                                        Columns.Add(Orders.UPLIFT_PCENT);
                                        Columns.Add(Orders.ORDER_EXCHANGE_RATE);
                                        Columns.Add(Orders.TOT_SEL_UNTS_PER_ORD);
                                        Columns.Add(WorkColsSizesByLot.OrderNumber);
                                        Columns.Add(WorkColsSizesByLot.LotNumber);
                                        Columns.Add(WorkColsSizesByLot.ProductNumber);
                                        Columns.Add(WorkColsSizesByLot.SizeCode);
                                        Columns.Add(WorkColsSizesByLot.SizeRelativePosition).BindValue(ProductSizes.SizeRelativePosition);
                                        Columns.Add(WorkColsSizesByLot.Units01);
                                        
                                        Columns.Add(RCFranchiseOrderFound);
                                        Relations[MOS_FRA_ORDER_PACKS].NotifyRowWasFoundTo(RCFranchiseOrderFound);
                                        Columns.Add(MOS_FRA_ORDER_PACKS.FRANCHISEE_ORDER_NUMBER);
                                        Columns.Add(MOS_FRA_ORDER_PACKS.MACKAYS_ORDER_NUMBER);
                                        Columns.Add(MOS_FRA_ORDER_PACKS.LOT_NUMBER);
                                        Columns.Add(MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER);
                                        Columns.Add(MOS_FRA_ORDER_PACKS.PACK_CODE);
                                        Columns.Add(vFranchiseeLotQty);
                                        
                                        Columns.Add(vSizeQuantity);
                                        Columns.Add(vTotalQuantity);
                                        Columns.Add(vSizeCurrencyCostValue);
                                        Columns.Add(vSellValue);
                                        Columns.Add(vTotalSellValue);
                                        Columns.Add(vMargin);
                                        Columns.Add(vTotalMargin);
                                        Columns.Add(vCostValue);
                                        Columns.Add(vCostPrice);
                                        Columns.Add(vTotalCostValue);
                                        Columns.Add(vSizeFreightValue);
                                        Columns.Add(vTotalFreightValue);
                                        Columns.Add(vAverageFreightCost);
                                        Columns.Add(vAverageLandedCost);
                                        Columns.Add(vSellValueExcludingVAT);
                                        Columns.Add(vTotalSellValueExcludingVAT);
                                        Columns.Add(vRollupExtraCostValforSize);
                                        Columns.Add(vTotCostValIncExtras);
                                        Columns.Add(vPartialExtraCostsExist);
                                        
                                        
                                        Columns.Add(vCommissionValue);
                                        Columns.Add(vDutyValue);
                                        Columns.Add(vUpliftValue);
                                        #endregion
                                    }
                                    
                                    /// <summary>Proforma Margins</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        if(u.Not(_parent._parent._parent._parent._parent._parent.vReportType == "P" && _parent._parent._parent._parent._parent._parent._parent.pCommitmentOrder))
                                        {
                                            _layout.MarginCalculationHeader.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        WorkColsSizesByLot.Units01.Value += OrderLotSizeCost.SizeQuantity;
                                    }
                                    protected override void OnEnd()
                                    {
                                        
                                        if(u.Not(_parent._parent._parent._parent._parent._parent._parent.pCommitmentOrder))
                                        {
                                            Cached<PrintMarginDetails>().Run();
                                        }
                                        // Average Freight Cost
                                        vAverageFreightCost.Value = vTotalFreightValue / Orders.TOT_SEL_UNTS_PER_ORD;
                                        // Average Landed Cost
                                        vAverageLandedCost.Value = vTotalCostValue / Orders.TOT_SEL_UNTS_PER_ORD;
                                        // Re-Calculate Margin for Totals Line in Footer
                                        vTotalMargin.Value = 100 * (vTotalSellValueExcludingVAT - vTotalCostValue) / vTotalSellValue;
                                        // totals line
                                        if(_parent._parent._parent._parent._parent._parent._parent.pCommitmentOrder)
                                        {
                                            Cached<GetLotTotalForCommOrder>().Run();
                                        }
                                        if(u.Not(_parent._parent._parent._parent._parent._parent._parent.pCommitmentOrder))
                                        {
                                            _layout.MarginCalculationTotals.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                        if(_parent._parent._parent._parent._parent._parent._parent.pCommitmentOrder)
                                        {
                                            _layout.MarginCalculationTotalsComm.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                        // if secondary orders exist get and print details
                                        if(Exp_3())
                                        {
                                            Cached<RangeLinkedOrders>().Run();
                                        }
                                        // Footer
                                        if(_parent._parent._parent._parent._parent._parent._parent.pFranchiseOrder)
                                        {
                                            ExtraMOSPrograms.CalcFranchiseQtysPo2204.Create().Run(
                                            				OrderLotSizeCost.OrderNumber, 
                                            				"", 
                                            				vFranchiseeLotQty, 
                                            				0);
                                            if(RCFranchiseOrderFound)
                                            {
                                                _layout.FranchiseWarning.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        _layout.MarginCalculationExplanation.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    
                                    #region Expressions
                                    internal Bool Exp_1()
                                    {
                                        return _parent._parent._parent._parent._parent.Orders.ORDER_HAS_SECONDARY_ORDERS == "";
                                    }
                                    internal Bool Exp_3()
                                    {
                                        return _parent._parent._parent._parent._parent.Orders.ORDER_HAS_SECONDARY_ORDERS == "Y";
                                    }
                                    internal Number Exp_4()
                                    {
                                        return u.If(_parent._parent._parent._parent._parent.DeliveryTerms.IncludeUplift == "Y", Orders.UPLIFT_PCENT, 0);
                                    }
                                    #endregion
                                    
                                    
                                    
                                    /// <summary>Print Margin Details(P#400.1.1.1.1.3.6.1.1)</summary>
                                    // Last change before Migration: 12/11/2012 10:00:41
                                    internal class PrintMarginDetails : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Cols Sizes by Lot</summary>
                                        readonly Models.WorkColsSizesByLot WorkColsSizesByLot = new Models.WorkColsSizesByLot { AllowRowLocking = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Product Sizes</summary>
                                        internal readonly Models.ProductSizes ProductSizes = new Models.ProductSizes { ReadOnly = true };
                                        
                                        /// <summary>VAT Rates</summary>
                                        readonly Models.VATRates VATRates = new Models.VATRates { ReadOnly = true };
                                        
                                        /// <summary>Order Lot Size Cost</summary>
                                        readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                        
                                        /// <summary>Orders</summary>
                                        readonly Models.Orders Orders = new Models.Orders { Cached = false, ReadOnly = true };
                                        
                                        /// <summary>Lot</summary>
                                        readonly Models.Lot Lot = new Models.Lot { ReadOnly = true };
                                        
                                        /// <summary>Lot</summary>
                                        readonly Models.Lot Lot1 = new Models.Lot { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>RC:lot found</summary>
                                        readonly BoolColumn RCLotFound = new BoolColumn("RC:lot found");
                                        
                                        /// <summary>v:current vat rate</summary>
                                        readonly NumberColumn vCurrentVatRate = new NumberColumn("v:current vat rate", "2.2");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537PrintMarginDetails _layout;
                                        #endregion
                                        
                                        internal ProformaMargins _parent;
                                        
                                        
                                        /// <summary>Print Margin Details(P#400.1.1.1.1.3.6.1.1)</summary>
                                        public PrintMarginDetails(ProformaMargins parent)
                                        {
                                            _parent = parent;
                                            Title = "Print Margin Details";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537PrintMarginDetails(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                            var WorkColsSizesByLotSizeRelativePositionGroup = Groups.Add(WorkColsSizesByLot.SizeRelativePosition);
                                            WorkColsSizesByLotSizeRelativePositionGroup.Enter += WorkColsSizesByLotSizeRelativePositionGroup_Enter;
                                            WorkColsSizesByLotSizeRelativePositionGroup.Leave += WorkColsSizesByLotSizeRelativePositionGroup_Leave;
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkColsSizesByLot;
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(ProductSizes, 
                                            		ProductSizes.ProductNumber.IsEqualTo(WorkColsSizesByLot.ProductNumber).And(
                                            		ProductSizes.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode)), 
                                            	ProductSizes.SortBySHP_Product_Sizes_X1);
                                            
                                            Relations.Add(VATRates, 
                                            		VATRates.VATCode.IsEqualTo(ProductSizes.VatCode), 
                                            	VATRates.SortByREF_VatRate_X1);
                                            
                                            Relations.Add(OrderLotSizeCost, 
                                            		OrderLotSizeCost.SizeCode.IsEqualTo(WorkColsSizesByLot.SizeCode).And(
                                            		OrderLotSizeCost.OrderNumber.IsEqualTo(WorkColsSizesByLot.OrderNumber)).And(
                                            		OrderLotSizeCost.LotNumber.IsEqualTo(WorkColsSizesByLot.LotNumber)), 
                                            	OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X2);
                                            
                                            Relations.Add(Orders, 
                                            		Orders.ORDER_NUMBER.IsEqualTo(WorkColsSizesByLot.OrderNumber), 
                                            	Orders.SortBySHP_ORDERS_X1);
                                            
                                            Relations.Add(Lot, 
                                            		Lot.ORDER_NUMBER.IsEqualTo(WorkColsSizesByLot.OrderNumber).And(
                                            		Lot.LOT_NUMBER.IsEqualTo(WorkColsSizesByLot.LotNumber)), 
                                            	Lot.SortBySHP_LOTS_X1);
                                            
                                            Relations.Add(Lot1, 
                                            		Lot1.ORDER_NUMBER.IsEqualTo(WorkColsSizesByLot.OrderNumber).And(
                                            		Lot1.LOT_NUMBER.IsEqualTo("1")), 
                                            	Lot1.SortBySHP_LOTS_X1);
                                            
                                            OrderBy = WorkColsSizesByLot.SortBySHP_WorkColsSizesByLot_X3;
                                            
                                            #region Columns
                                            
                                            // Loops through Temp Table and Calculates Various Margin Figures in RS
                                            Columns.Add(WorkColsSizesByLot.SizeRelativePosition);
                                            Columns.Add(WorkColsSizesByLot.OrderNumber);
                                            Columns.Add(WorkColsSizesByLot.LotNumber);
                                            Columns.Add(WorkColsSizesByLot.ProductNumber);
                                            Columns.Add(WorkColsSizesByLot.SizeCode);
                                            Columns.Add(WorkColsSizesByLot.Units01);
                                            
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            
                                            Columns.Add(ProductSizes.ProductNumber);
                                            Columns.Add(ProductSizes.SizeCode);
                                            Columns.Add(ProductSizes.SellingPrice);
                                            Columns.Add(ProductSizes.VatCode);
                                            
                                            Columns.Add(VATRates.VATCode);
                                            Columns.Add(VATRates.CurrentVATRate);
                                            
                                            Columns.Add(OrderLotSizeCost.SizeCode);
                                            Columns.Add(OrderLotSizeCost.OrderNumber);
                                            Columns.Add(OrderLotSizeCost.LotNumber);
                                            Columns.Add(OrderLotSizeCost.SizeCost);
                                            Columns.Add(OrderLotSizeCost.SizeQuantity);
                                            
                                            Columns.Add(Orders.ORDER_NUMBER);
                                            Columns.Add(Orders.AGENT_COMMISSION_PCENT);
                                            Columns.Add(Orders.NOTIONAL_DUTY_PCENT);
                                            Columns.Add(Orders.UPLIFT_PCENT);
                                            Columns.Add(Orders.ORDER_EXCHANGE_RATE);
                                            Columns.Add(Orders.TOT_SEL_UNTS_PER_ORD);
                                            
                                            Columns.Add(Lot.ORDER_NUMBER);
                                            Columns.Add(Lot.LOT_NUMBER);
                                            Columns.Add(Lot.UNIT_FREIGHT_COST);
                                            Columns.Add(Lot.TOT_SEL_UNITS_PR_LOT);
                                            
                                            Columns.Add(RCLotFound);
                                            Relations[Lot1].NotifyRowWasFoundTo(RCLotFound);
                                            Columns.Add(Lot1.ORDER_NUMBER);
                                            Columns.Add(Lot1.LOT_NUMBER);
                                            Columns.Add(Lot1.DELIVERY_DATE);
                                            
                                            Columns.Add(vCurrentVatRate);
                                            #endregion
                                        }
                                        
                                        /// <summary>Print Margin Details</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        void WorkColsSizesByLotSizeRelativePositionGroup_Enter()
                                        {
                                            // reset all virtuals collecting at size rel posit level
                                            _parent.vSizeQuantity.Value = 0;
                                            _parent.vSellValue.Value = 0;
                                            _parent.vSizeFreightValue.Value = 0;
                                            _parent.vSellValueExcludingVAT.Value = 0;
                                            _parent.vCommissionValue.Value = 0;
                                            _parent.vDutyValue.Value = 0;
                                            _parent.vUpliftValue.Value = 0;
                                            _parent.vCostValue.Value = 0;
                                            _parent.vCostPrice.Value = 0;
                                            _parent.vMargin.Value = 0;
                                            _parent.vRollupExtraCostValforSize.Value = 0;
                                            _parent.vTotCostValIncExtras.Value = 0;
                                        }
                                        protected override void OnEnterRow()
                                        {
                                            // collect rolled up cost for size in case cost diffs between lots
                                            _parent.vSizeCurrencyCostValue.Value = 0;
                                            Cached<SizeCostRollup>().Run();
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            // this all needs reworked to allow for change of main table.
                                            // will need a change of level to do accums and detail print
                                            // at change of size
                                            // watch which quantities are used in calculations
                                            // may need another level of detail line accums as there is more than one
                                            // record per size if there is more than one lot
                                            ExtraMOSPrograms.GetCurrentVATRatePo2136.Create().Run(
                                            				ProductSizes.VatCode, 
                                            				u.AddDate(u.AddDate(Lot1.DELIVERY_DATE, 2000, 0, 0), -(2000), 0, 0), 
                                            				vCurrentVatRate);
                                            // size qty
                                            _parent.vSizeQuantity.Value += WorkColsSizesByLot.Units01;
                                            // Sell Value = Size Quantity*Selling Price
                                            _parent.vSellValue.Value += WorkColsSizesByLot.Units01 * ProductSizes.SellingPrice;
                                            // Sell Value Excluding VAT
                                            _parent.vSellValueExcludingVAT.Value = u.If(u.Not(RCLotFound), 100 * _parent.vSellValue / (100 + VATRates.CurrentVATRate), 100 * _parent.vSellValue / (100 + vCurrentVatRate));
                                            // Size Freight Value = Unit Freight Cost*Size Quantity
                                            // if delivery terms table specifies freight included
                                            _parent.vSizeFreightValue.Value = u.If(_parent._parent._parent._parent._parent._parent.DeliveryTerms.IncludeFreight == "Y", _parent.vSizeFreightValue + Lot.UNIT_FREIGHT_COST * WorkColsSizesByLot.Units01, 0);
                                            // Commission Value
                                            _parent.vCommissionValue.Value = _parent.vSizeCurrencyCostValue * Orders.AGENT_COMMISSION_PCENT / 100;
                                            // Duty Value
                                            // if delivery terms table specifies duty included
                                            _parent.vDutyValue.Value = u.If(_parent._parent._parent._parent._parent._parent.DeliveryTerms.IncludeDuty == "Y", (_parent.vSizeCurrencyCostValue + _parent.vSizeFreightValue) * Orders.NOTIONAL_DUTY_PCENT / 100, 0);
                                            // Uplift Value
                                            // if delivery terms table specifies uplift included
                                            _parent.vUpliftValue.Value = u.If(_parent._parent._parent._parent._parent._parent.DeliveryTerms.IncludeUplift == "Y", _parent.vSizeCurrencyCostValue * Orders.UPLIFT_PCENT / 100, 0);
                                            // Cost Value
                                            _parent.vCostValue.Value = (_parent.vSizeCurrencyCostValue + _parent.vSizeFreightValue + _parent.vCommissionValue + _parent.vDutyValue + _parent.vUpliftValue) / Orders.ORDER_EXCHANGE_RATE;
                                            // Cost Price
                                            _parent.vCostPrice.Value = _parent.vCostValue / _parent.vSizeQuantity;
                                        }
                                        void WorkColsSizesByLotSizeRelativePositionGroup_Leave()
                                        {
                                            // gather extra costs for the size if order has secondary orders
                                            if(_parent._parent._parent._parent._parent._parent.Orders.ORDER_HAS_SECONDARY_ORDERS == "Y")
                                            {
                                                Cached<RangeLinkedOrds>().Run();
                                            }
                                            // Total Cost Val incl Extras
                                            _parent.vTotCostValIncExtras.Value = _parent.vCostValue + _parent.vRollupExtraCostValforSize;
                                            // Margin
                                            _parent.vMargin.Value = 100 * (_parent.vSellValueExcludingVAT - _parent.vTotCostValIncExtras) / _parent.vSellValue;
                                            
                                            _layout.MarginDetails.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            
                                            // totals for end of report
                                            _parent.vTotalCostValue.Value += _parent.vTotCostValIncExtras;
                                            _parent.vTotalFreightValue.Value += _parent.vSizeFreightValue;
                                            _parent.vTotalSellValue.Value += _parent.vSellValue;
                                            _parent.vTotalSellValueExcludingVAT.Value += _parent.vSellValueExcludingVAT;
                                            _parent.vTotalQuantity.Value += _parent.vSizeQuantity;
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_3()
                                        {
                                            return _parent._parent._parent._parent._parent._parent.Orders.ORDER_HAS_SECONDARY_ORDERS == "Y";
                                        }
                                        internal Number Exp_27()
                                        {
                                            return u.If(u.Not(RCLotFound), VATRates.CurrentVATRate, vCurrentVatRate);
                                        }
                                        internal Text Exp_29()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        #endregion
                                        
                                        
                                        
                                        /// <summary>Size Cost Rollup(P#400.1.1.1.1.3.6.1.1.1)</summary>
                                        // Last change before Migration: 11/02/2002 14:23:02
                                        class SizeCostRollup : Mos.BusinessProcessBase 
                                        {
                                            
                                            #region Models
                                            
                                            /// <summary>Order Lot Size Cost</summary>
                                            readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                            #endregion
                                            
                                            #region Columns
                                            
                                            /// <summary>v:Prev Cost</summary>
                                            readonly NumberColumn vPrevCost = new NumberColumn("v:Prev Cost", "6.4A");
                                            #endregion
                                            
                                            PrintMarginDetails _parent;
                                            
                                            
                                            /// <summary>Size Cost Rollup(P#400.1.1.1.1.3.6.1.1.1)</summary>
                                            public SizeCostRollup(PrintMarginDetails parent)
                                            {
                                                _parent = parent;
                                                Title = "Size Cost Rollup";
                                                InitializeDataView();
                                            }
                                            void InitializeDataView()
                                            {
                                                From = OrderLotSizeCost;
                                                Where.Add(OrderLotSizeCost.OrderNumber.IsEqualTo(_parent.OrderLotSizeCost.OrderNumber));
                                                Where.Add(OrderLotSizeCost.SizeCode.IsEqualTo(_parent.OrderLotSizeCost.SizeCode));
                                                OrderBy = OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1;
                                                
                                                #region Columns
                                                
                                                Columns.Add(vPrevCost);
                                                
                                                Columns.Add(OrderLotSizeCost.OrderNumber);
                                                Columns.Add(OrderLotSizeCost.SizeCode);
                                                Columns.Add(OrderLotSizeCost.SizeCost);
                                                Columns.Add(OrderLotSizeCost.SizeQuantity);
                                                #endregion
                                            }
                                            
                                            /// <summary>Size Cost Rollup</summary>
                                            internal void Run()
                                            {
                                                Execute();
                                            }
                                            protected override void OnLoad()
                                            {
                                                TransactionScope = TransactionScopes.Task;
                                                KeepChildRelationCacheAlive = true;
                                                KeepViewVisibleAfterExit = true;
                                            }
                                            protected override void OnLeaveRow()
                                            {
                                                _parent._parent.vSizeCurrencyCostValue.Value += OrderLotSizeCost.SizeCost * OrderLotSizeCost.SizeQuantity;
                                            }
                                            
                                            
                                        }
                                        
                                        /// <summary>Range Linked Ords(P#400.1.1.1.1.3.6.1.1.2)</summary>
                                        // Last change before Migration: 11/02/2002 14:23:14
                                        class RangeLinkedOrds : Mos.BusinessProcessBase 
                                        {
                                            
                                            #region Models
                                            
                                            /// <summary>Linked Orders</summary>
                                            readonly Models.LinkedOrders LinkedOrders = new Models.LinkedOrders { ReadOnly = true };
                                            #endregion
                                            
                                            PrintMarginDetails _parent;
                                            
                                            
                                            /// <summary>Range Linked Ords(P#400.1.1.1.1.3.6.1.1.2)</summary>
                                            public RangeLinkedOrds(PrintMarginDetails parent)
                                            {
                                                _parent = parent;
                                                Title = "Range Linked Ords";
                                                InitializeDataView();
                                            }
                                            void InitializeDataView()
                                            {
                                                From = LinkedOrders;
                                                Where.Add(LinkedOrders.PrimaryOrder.IsEqualTo(_parent._parent._parent._parent._parent._parent._parent._parent.Orders.ORDER_NUMBER));
                                                OrderBy = LinkedOrders.SortBySHP_Linked_Orders_X1;
                                                
                                                #region Columns
                                                
                                                // there may be more than one linked order
                                                Columns.Add(LinkedOrders.PrimaryOrder);
                                                Columns.Add(LinkedOrders.SecondaryOrder);
                                                #endregion
                                            }
                                            
                                            /// <summary>Range Linked Ords</summary>
                                            internal void Run()
                                            {
                                                Execute();
                                            }
                                            protected override void OnLoad()
                                            {
                                                KeepChildRelationCacheAlive = true;
                                                KeepViewVisibleAfterExit = true;
                                            }
                                            protected override void OnLeaveRow()
                                            {
                                                Cached<ExtraCostsForSize>().Run();
                                            }
                                            
                                            
                                            
                                            /// <summary>Extra Costs for Size(P#400.1.1.1.1.3.6.1.1.2.1)</summary>
                                            // Last change before Migration: 11/02/2002 14:23:14
                                            class ExtraCostsForSize : Mos.BusinessProcessBase 
                                            {
                                                
                                                #region Models
                                                
                                                /// <summary>Order Lot Size Cost</summary>
                                                readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                                                #endregion
                                                
                                                RangeLinkedOrds _parent;
                                                
                                                
                                                /// <summary>Extra Costs for Size(P#400.1.1.1.1.3.6.1.1.2.1)</summary>
                                                public ExtraCostsForSize(RangeLinkedOrds parent)
                                                {
                                                    _parent = parent;
                                                    Title = "Extra Costs for Size";
                                                    InitializeDataView();
                                                }
                                                void InitializeDataView()
                                                {
                                                    From = OrderLotSizeCost;
                                                    Where.Add(OrderLotSizeCost.OrderNumber.IsEqualTo(_parent.LinkedOrders.SecondaryOrder));
                                                    Where.Add(OrderLotSizeCost.SizeCode.IsEqualTo(_parent._parent.WorkColsSizesByLot.SizeCode));
                                                    OrderBy = OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1;
                                                    
                                                    #region Columns
                                                    
                                                    Columns.Add(OrderLotSizeCost.OrderNumber);
                                                    Columns.Add(OrderLotSizeCost.LotNumber);
                                                    Columns.Add(OrderLotSizeCost.ProductNumber);
                                                    Columns.Add(OrderLotSizeCost.SizeCode);
                                                    Columns.Add(OrderLotSizeCost.SizeCost);
                                                    Columns.Add(OrderLotSizeCost.SizeQuantity);
                                                    #endregion
                                                }
                                                
                                                /// <summary>Extra Costs for Size</summary>
                                                internal void Run()
                                                {
                                                    Execute();
                                                }
                                                protected override void OnLoad()
                                                {
                                                    KeepChildRelationCacheAlive = true;
                                                    KeepViewVisibleAfterExit = true;
                                                }
                                                protected override void OnLeaveRow()
                                                {
                                                    _parent._parent._parent.vRollupExtraCostValforSize.Value += OrderLotSizeCost.SizeCost * OrderLotSizeCost.SizeQuantity;
                                                }
                                                
                                                
                                            }
                                        }
                                    }
                                    
                                    /// <summary>Range Linked Orders(P#400.1.1.1.1.3.6.1.2)</summary>
                                    // Last change before Migration: 11/02/2002 14:22:38
                                    internal class RangeLinkedOrders : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Linked Orders</summary>
                                        internal readonly Models.LinkedOrders LinkedOrders = new Models.LinkedOrders { ReadOnly = true };
                                        
                                        /// <summary>Supplier</summary>
                                        internal readonly Models.Supplier Supplier = new Models.Supplier { Cached = false, ReadOnly = true };
                                        
                                        /// <summary>Orders</summary>
                                        internal readonly Models.Orders Orders = new Models.Orders { Cached = false, ReadOnly = true };
                                        
                                        /// <summary>Lot</summary>
                                        internal readonly Models.Lot Lot = new Models.Lot { ReadOnly = true };
                                        
                                        /// <summary>Order Reproc Reasons</summary>
                                        internal readonly Models.OrderReprocReasons OrderReprocReasons = new Models.OrderReprocReasons { ReadOnly = true };
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537RangeLinkedOrders _layout;
                                        #endregion
                                        
                                        ProformaMargins _parent;
                                        
                                        
                                        /// <summary>Range Linked Orders(P#400.1.1.1.1.3.6.1.2)</summary>
                                        public RangeLinkedOrders(ProformaMargins parent)
                                        {
                                            _parent = parent;
                                            Title = "Range Linked Orders";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537RangeLinkedOrders(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                        }
                                        void InitializeDataView()
                                        {
                                            From = LinkedOrders;
                                            Relations.Add(Supplier, 
                                            		Supplier.SUPPLIER_ACCOUNT.IsEqualTo(LinkedOrders.SupplierAccount), 
                                            	Supplier.SortByREF_SUPPLIER_X1);
                                            
                                            Relations.Add(Orders, 
                                            		Orders.ORDER_NUMBER.IsEqualTo(LinkedOrders.SecondaryOrder), 
                                            	Orders.SortBySHP_ORDERS_X1);
                                            
                                            Relations.Add(Lot, 
                                            		Lot.ORDER_NUMBER.IsEqualTo(LinkedOrders.SecondaryOrder).And(
                                            		Lot.LOT_NUMBER.IsEqualTo("1 ")), 
                                            	Lot.SortBySHP_LOTS_X1);
                                            
                                            Relations.Add(OrderReprocReasons, 
                                            		OrderReprocReasons.ReprocCode.IsEqualTo(LinkedOrders.ReprocCode).And(
                                            		OrderReprocReasons.ReprocSeq.IsEqualTo(LinkedOrders.ReprocSeq)).And(
                                            		OrderReprocReasons.SupplierID.IsEqualTo(Supplier.SUPPLIER_IDENTIFIER)), 
                                            	OrderReprocReasons.SortBySHP_Order_Reproc_Reasons_X1);
                                            
                                            Where.Add(LinkedOrders.PrimaryOrder.IsEqualTo(_parent._parent._parent._parent._parent._parent._parent.Orders.ORDER_NUMBER));
                                            OrderBy = LinkedOrders.SortBySHP_Linked_Orders_X1;
                                            
                                            #region Columns
                                            
                                            Columns.Add(LinkedOrders.PrimaryOrder);
                                            Columns.Add(LinkedOrders.SecondaryOrder);
                                            Columns.Add(LinkedOrders.ReprocCode);
                                            Columns.Add(LinkedOrders.ReprocSeq);
                                            Columns.Add(LinkedOrders.SupplierAccount);
                                            // get supplier id
                                            Columns.Add(Supplier.SUPPLIER_ACCOUNT);
                                            Columns.Add(Supplier.SUPPLIER_IDENTIFIER);
                                            // get secondary order
                                            Columns.Add(Orders.ORDER_NUMBER);
                                            Columns.Add(Orders.TOT_SEL_UNTS_PER_ORD);
                                            Columns.Add(Orders.ORDER_IS_A_SECONDARY_ORDER);
                                            // get lot 1 of secondary order
                                            Columns.Add(Lot.ORDER_NUMBER);
                                            Columns.Add(Lot.LOT_NUMBER);
                                            Columns.Add(Lot.BUY_UNIT_COST_LATEST);
                                            Columns.Add(Lot.EXTRA_LEAD_TIME);
                                            // get the extra descriptio
                                            Columns.Add(OrderReprocReasons.ReprocCode);
                                            Columns.Add(OrderReprocReasons.ReprocSeq);
                                            Columns.Add(OrderReprocReasons.SupplierID);
                                            Columns.Add(OrderReprocReasons.ReprocDescription);
                                            #endregion
                                        }
                                        
                                        /// <summary>Range Linked Orders</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            KeepViewVisibleAfterExit = true;
                                            _layout.Reset();
                                        }
                                        protected override void OnStart()
                                        {
                                            _layout.ExtrasHeader.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            if(Orders.ORDER_IS_A_SECONDARY_ORDER == "P")
                                            {
                                                _parent.vPartialExtraCostsExist.Value = true;
                                            }
                                            
                                            _layout.ExtraDetail.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                        
                                        #region Expressions
                                        internal Text Exp_2()
                                        {
                                            return u.If(Orders.ORDER_IS_A_SECONDARY_ORDER == "F", "Full", "Partial");
                                        }
                                        #endregion
                                        
                                        
                                    }
                                    
                                    /// <summary>Get Lot Total (For Comm Order)(P#400.1.1.1.1.3.6.1.3)</summary>
                                    // Last change before Migration: 12/11/2012 10:56:00
                                    class GetLotTotalForCommOrder : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Lot</summary>
                                        readonly Models.Lot Lot = new Models.Lot { ReadOnly = true };
                                        #endregion
                                        
                                        ProformaMargins _parent;
                                        
                                        
                                        /// <summary>Get Lot Total (For Comm Order)(P#400.1.1.1.1.3.6.1.3)</summary>
                                        public GetLotTotalForCommOrder(ProformaMargins parent)
                                        {
                                            _parent = parent;
                                            Title = "Get Lot Total (For Comm Order)";
                                            InitializeDataView();
                                        }
                                        void InitializeDataView()
                                        {
                                            From = Lot;
                                            Where.Add(Lot.ORDER_NUMBER.IsEqualTo(_parent._parent._parent._parent._parent._parent._parent._parent.pOrder));
                                            OrderBy = Lot.SortBySHP_LOTS_X1;
                                            
                                            #region Columns
                                            
                                            Columns.Add(Lot.ORDER_NUMBER);
                                            Columns.Add(Lot.TOT_SEL_UNITS_PR_LOT);
                                            #endregion
                                        }
                                        
                                        /// <summary>Get Lot Total (For Comm Order)</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            AllowUserAbort = true;
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            _parent.vTotalQuantity.Value += Lot.TOT_SEL_UNITS_PR_LOT;
                                        }
                                        
                                        
                                    }
                                }
                                
                                /// <summary>List Attributes Status(P#400.1.1.1.1.3.6.2)</summary>
                                // Last change before Migration: 19/07/2006 10:40:12
                                internal class ListAttributesStatus : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>Attribute Check Work</summary>
                                    readonly Models.AttributeCheckWork AttributeCheckWork = new Models.AttributeCheckWork { ReadOnly = true };
                                    
                                    /// <summary>Option Attribute Types</summary>
                                    internal readonly Models.OptionAttributeTypes OptionAttributeTypes = new Models.OptionAttributeTypes { ReadOnly = true };
                                    
                                    /// <summary>Option Attribute Codes</summary>
                                    readonly Models.OptionAttributeCodes OptionAttributeCodes = new Models.OptionAttributeCodes { ReadOnly = true };
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537ListAttributesStatus _layout;
                                    #endregion
                                    
                                    ProformaPrint _parent;
                                    
                                    
                                    /// <summary>List Attributes Status(P#400.1.1.1.1.3.6.2)</summary>
                                    public ListAttributesStatus(ProformaPrint parent)
                                    {
                                        _parent = parent;
                                        Title = "List Attributes Status";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537ListAttributesStatus(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = AttributeCheckWork;
                                        Relations.Add(OptionAttributeTypes, 
                                        		OptionAttributeTypes.ATTRIBUTE_TYPE.IsEqualTo(AttributeCheckWork.AttribType), 
                                        	OptionAttributeTypes.SortByREF_OPT_ATT_TYPE_X1);
                                        
                                        Relations.Add(OptionAttributeCodes, 
                                        		OptionAttributeCodes.ATTRIBUTE_TYPE.IsEqualTo(AttributeCheckWork.AttribType).And(
                                        		OptionAttributeCodes.ATTRIBUTE_CODE.IsEqualTo(AttributeCheckWork.AttribCode)), 
                                        	OptionAttributeCodes.SortByREF_OPT_ATT_CODE_X1);
                                        
                                        Where.Add(AttributeCheckWork.OptionalMandatory.IsBetween("M", "O"));
                                        OrderBy = AttributeCheckWork.SortByMOS_Attribute_Check_Work_X1;
                                        
                                        #region Columns
                                        
                                        Columns.Add(AttributeCheckWork.AttribType);
                                        Columns.Add(AttributeCheckWork.OptionalMandatory);
                                        Columns.Add(AttributeCheckWork.AttribCode);
                                        Columns.Add(AttributeCheckWork.Type21Count);
                                        
                                        Columns.Add(OptionAttributeTypes.ATTRIBUTE_TYPE);
                                        Columns.Add(OptionAttributeTypes.ATTRIBUTE_TYPE_DESCRIPTION);
                                        // if not blank
                                        Columns.Add(OptionAttributeCodes.ATTRIBUTE_TYPE);
                                        Columns.Add(OptionAttributeCodes.ATTRIBUTE_CODE);
                                        Columns.Add(OptionAttributeCodes.ATTRIBUTE_CODE_DESCRIPTION);
                                        #endregion
                                    }
                                    
                                    /// <summary>List Attributes Status</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnUserEdit;
                                        TransactionScope = TransactionScopes.RowLocking;
                                        KeepViewVisibleAfterExit = true;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        _layout.AttribHeader.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        _layout.MissingAttribs.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    
                                    #region Expressions
                                    internal Text Exp_1()
                                    {
                                        return u.If(AttributeCheckWork.AttribType != 21, OptionAttributeCodes.ATTRIBUTE_CODE_DESCRIPTION, u.If(OptionAttributeCodes.ATTRIBUTE_CODE_DESCRIPTION != "", u.If(AttributeCheckWork.Type21Count == 1, OptionAttributeCodes.ATTRIBUTE_CODE_DESCRIPTION, u.Left(OptionAttributeCodes.ATTRIBUTE_CODE_DESCRIPTION, 25) + "..Etc"), ""));
                                    }
                                    internal Text Exp_2()
                                    {
                                        return u.If(AttributeCheckWork.OptionalMandatory == "M" && AttributeCheckWork.AttribCode == "", "Missing", u.If(AttributeCheckWork.OptionalMandatory == "O" && AttributeCheckWork.AttribCode != "", "OK", "OK"));
                                    }
                                    #endregion
                                    
                                    
                                }
                                
                                /// <summary>List Option Attributes - part1(P#400.1.1.1.1.3.6.3)</summary>
                                // Last change before Migration: 02/08/2012 16:35:51
                                internal class ListOptionAttributesPart1 : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>Prod Colour Attrib Work</summary>
                                    readonly Models.ProdColourAttribWork ProdColourAttribWork = new Models.ProdColourAttribWork { ReadOnly = true };
                                    
                                    /// <summary>Colour</summary>
                                    internal readonly Models.Colour Colour = new Models.Colour { ReadOnly = true };
                                    
                                    /// <summary>Option Attribute Codes</summary>
                                    internal readonly Models.OptionAttributeCodes OptionAttributeCodes = new Models.OptionAttributeCodes { ReadOnly = true };
                                    
                                    /// <summary>Option Attribute Codes</summary>
                                    internal readonly Models.OptionAttributeCodes OptionAttributeCodes1 = new Models.OptionAttributeCodes { ReadOnly = true };
                                    
                                    /// <summary>Option Attribute Codes</summary>
                                    internal readonly Models.OptionAttributeCodes OptionAttributeCodes2 = new Models.OptionAttributeCodes { ReadOnly = true };
                                    
                                    /// <summary>Option Attribute Codes</summary>
                                    internal readonly Models.OptionAttributeCodes OptionAttributeCodes3 = new Models.OptionAttributeCodes { ReadOnly = true };
                                    
                                    /// <summary>Option Attribute Codes</summary>
                                    internal readonly Models.OptionAttributeCodes OptionAttributeCodes4 = new Models.OptionAttributeCodes { ReadOnly = true };
                                    
                                    /// <summary>Option Attribute Codes</summary>
                                    internal readonly Models.OptionAttributeCodes OptionAttributeCodes5 = new Models.OptionAttributeCodes { ReadOnly = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Story Positional</summary>
                                    readonly TextColumn vStoryPositional = new TextColumn("v:Story Positional", "1");
                                    
                                    /// <summary>v:Line Flow Positional</summary>
                                    readonly TextColumn vLineFlowPositional = new TextColumn("v:Line Flow Positional", "1");
                                    
                                    /// <summary>v:Seasonality Positional</summary>
                                    readonly TextColumn vSeasonalityPositional = new TextColumn("v:Seasonality Positional", "1");
                                    
                                    /// <summary>v:City Positional</summary>
                                    readonly TextColumn vCityPositional = new TextColumn("v:City Positional", "1");
                                    
                                    /// <summary>v:Capsule Positional</summary>
                                    readonly TextColumn vCapsulePositional = new TextColumn("v:Capsule Positional", "1");
                                    
                                    /// <summary>v:Phase Positional</summary>
                                    readonly TextColumn vPhasePositional = new TextColumn("v:Phase Positional", "1");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537ListOptionAttributesPart1 _layout;
                                    #endregion
                                    
                                    ProformaPrint _parent;
                                    
                                    
                                    /// <summary>List Option Attributes - part1(P#400.1.1.1.1.3.6.3)</summary>
                                    public ListOptionAttributesPart1(ProformaPrint parent)
                                    {
                                        _parent = parent;
                                        Title = "List Option Attributes - part1";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537ListOptionAttributesPart1(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = ProdColourAttribWork;
                                        Relations.Add(Colour, 
                                        		Colour.ColourCode.IsEqualTo(ProdColourAttribWork.Colour1), 
                                        	Colour.SortByREF_Colour_X1);
                                        
                                        Relations.Add(OptionAttributeCodes, 
                                        		OptionAttributeCodes.ATTRIBUTE_TYPE.IsEqualTo(3).And(
                                        		OptionAttributeCodes.ATTRIBUTE_CODE.IsEqualTo(ProdColourAttribWork.StoryCode)), 
                                        	OptionAttributeCodes.SortByREF_OPT_ATT_CODE_X1);
                                        
                                        Relations.Add(OptionAttributeCodes1, 
                                        		OptionAttributeCodes1.ATTRIBUTE_TYPE.IsEqualTo(4).And(
                                        		OptionAttributeCodes1.ATTRIBUTE_CODE.IsEqualTo(ProdColourAttribWork.LineFlowCode)), 
                                        	OptionAttributeCodes1.SortByREF_OPT_ATT_CODE_X1);
                                        
                                        Relations.Add(OptionAttributeCodes2, 
                                        		OptionAttributeCodes2.ATTRIBUTE_TYPE.IsEqualTo(21).And(
                                        		OptionAttributeCodes2.ATTRIBUTE_CODE.IsEqualTo(ProdColourAttribWork.SeasonalityCode)), 
                                        	OptionAttributeCodes2.SortByREF_OPT_ATT_CODE_X1);
                                        
                                        Relations.Add(OptionAttributeCodes3, 
                                        		OptionAttributeCodes3.ATTRIBUTE_TYPE.IsEqualTo(46).And(
                                        		OptionAttributeCodes3.ATTRIBUTE_CODE.IsEqualTo(ProdColourAttribWork.CityCode)), 
                                        	OptionAttributeCodes3.SortByREF_OPT_ATT_CODE_X1);
                                        
                                        Relations.Add(OptionAttributeCodes4, 
                                        		OptionAttributeCodes4.ATTRIBUTE_TYPE.IsEqualTo(52).And(
                                        		OptionAttributeCodes4.ATTRIBUTE_CODE.IsEqualTo(ProdColourAttribWork.CapsuleCode)), 
                                        	OptionAttributeCodes4.SortByREF_OPT_ATT_CODE_X1);
                                        
                                        Relations.Add(OptionAttributeCodes5, 
                                        		OptionAttributeCodes5.ATTRIBUTE_TYPE.IsEqualTo(53).And(
                                        		OptionAttributeCodes5.ATTRIBUTE_CODE.IsEqualTo(ProdColourAttribWork.PhaseCode)), 
                                        	OptionAttributeCodes5.SortByREF_OPT_ATT_CODE_X1);
                                        
                                        OrderBy = ProdColourAttribWork.SortByMOS_Prod_Colour_Attrib_Work_X1;
                                        
                                        #region Columns
                                        
                                        Columns.Add(ProdColourAttribWork.User1);
                                        Columns.Add(ProdColourAttribWork.Product1);
                                        Columns.Add(ProdColourAttribWork.Colour1);
                                        Columns.Add(ProdColourAttribWork.LowGradeCode);
                                        Columns.Add(ProdColourAttribWork.StoryCode);
                                        Columns.Add(ProdColourAttribWork.LineFlowCode);
                                        Columns.Add(ProdColourAttribWork.SeasonalityCode);
                                        Columns.Add(ProdColourAttribWork.CityCode);
                                        Columns.Add(ProdColourAttribWork.CapsuleCode);
                                        Columns.Add(ProdColourAttribWork.PhaseCode);
                                        // colour desc
                                        Columns.Add(Colour.ColourCode);
                                        Columns.Add(Colour.ColourDescription);
                                        // story 3
                                        Columns.Add(vStoryPositional);
                                        Columns.Add(OptionAttributeCodes.ATTRIBUTE_TYPE);
                                        Columns.Add(OptionAttributeCodes.ATTRIBUTE_CODE);
                                        Columns.Add(OptionAttributeCodes.ATTRIBUTE_CODE_DESCRIPTION);
                                        // line flow 4
                                        Columns.Add(vLineFlowPositional);
                                        Columns.Add(OptionAttributeCodes1.ATTRIBUTE_TYPE);
                                        Columns.Add(OptionAttributeCodes1.ATTRIBUTE_CODE);
                                        Columns.Add(OptionAttributeCodes1.ATTRIBUTE_CODE_DESCRIPTION);
                                        // seasonality 21
                                        Columns.Add(vSeasonalityPositional);
                                        Columns.Add(OptionAttributeCodes2.ATTRIBUTE_TYPE);
                                        Columns.Add(OptionAttributeCodes2.ATTRIBUTE_CODE);
                                        Columns.Add(OptionAttributeCodes2.ATTRIBUTE_CODE_DESCRIPTION);
                                        // city 46
                                        Columns.Add(vCityPositional);
                                        Columns.Add(OptionAttributeCodes3.ATTRIBUTE_TYPE);
                                        Columns.Add(OptionAttributeCodes3.ATTRIBUTE_CODE);
                                        Columns.Add(OptionAttributeCodes3.ATTRIBUTE_CODE_DESCRIPTION);
                                        // city 52
                                        Columns.Add(vCapsulePositional);
                                        Columns.Add(OptionAttributeCodes4.ATTRIBUTE_TYPE);
                                        Columns.Add(OptionAttributeCodes4.ATTRIBUTE_CODE);
                                        Columns.Add(OptionAttributeCodes4.ATTRIBUTE_CODE_DESCRIPTION);
                                        // city 53
                                        Columns.Add(vPhasePositional);
                                        Columns.Add(OptionAttributeCodes5.ATTRIBUTE_TYPE);
                                        Columns.Add(OptionAttributeCodes5.ATTRIBUTE_CODE);
                                        Columns.Add(OptionAttributeCodes5.ATTRIBUTE_CODE_DESCRIPTION);
                                        #endregion
                                    }
                                    
                                    /// <summary>List Option Attributes - part1</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnUserEdit;
                                        TransactionScope = TransactionScopes.RowLocking;
                                        AllowUserAbort = true;
                                        _layout.Reset();
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        _layout.OptAttribTypes.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    
                                    
                                }
                                
                                /// <summary>List Option Attributes - part2(P#400.1.1.1.1.3.6.4)</summary>
                                // Last change before Migration: 04/01/2011 12:06:01
                                internal class ListOptionAttributesPart2 : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>Prod Colour Attrib Work</summary>
                                    readonly Models.ProdColourAttribWork ProdColourAttribWork = new Models.ProdColourAttribWork { ReadOnly = true };
                                    
                                    /// <summary>Colour</summary>
                                    internal readonly Models.Colour Colour = new Models.Colour { ReadOnly = true };
                                    
                                    /// <summary>Option Attribute Codes</summary>
                                    internal readonly Models.OptionAttributeCodes OptionAttributeCodes = new Models.OptionAttributeCodes { ReadOnly = true };
                                    
                                    /// <summary>Web Option Order</summary>
                                    internal readonly Models.WebOptionOrder WebOptionOrder = new Models.WebOptionOrder { ReadOnly = true };
                                    
                                    /// <summary>Web Selected Colours</summary>
                                    readonly Models.WebSelectedColours WebSelectedColours = new Models.WebSelectedColours { ReadOnly = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Lowest Grade Positional</summary>
                                    readonly TextColumn vLowestGradePositional = new TextColumn("v:Lowest Grade Positional", "1");
                                    
                                    /// <summary>v:Allocation String</summary>
                                    internal readonly TextColumn vAllocationString = new TextColumn("v:Allocation String", "50");
                                    
                                    /// <summary>v:Allocation Quantity</summary>
                                    readonly NumberColumn vAllocationQuantity = new NumberColumn("v:Allocation Quantity", "10.3");
                                    
                                    /// <summary>v:Substitute</summary>
                                    readonly TextColumn vSubstitute = new TextColumn("v:Substitute", "1");
                                    
                                    /// <summary>v:Trial</summary>
                                    readonly TextColumn vTrial = new TextColumn("v:Trial", "1");
                                    
                                    /// <summary>RC:ticked for web</summary>
                                    readonly BoolColumn RCTickedForWeb = new BoolColumn("RC:ticked for web");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537ListOptionAttributesPart2 _layout;
                                    #endregion
                                    
                                    ProformaPrint _parent;
                                    
                                    
                                    /// <summary>List Option Attributes - part2(P#400.1.1.1.1.3.6.4)</summary>
                                    public ListOptionAttributesPart2(ProformaPrint parent)
                                    {
                                        _parent = parent;
                                        Title = "List Option Attributes - part2";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537ListOptionAttributesPart2(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = ProdColourAttribWork;
                                        Relations.Add(Colour, 
                                        		Colour.ColourCode.IsEqualTo(ProdColourAttribWork.Colour1), 
                                        	Colour.SortByREF_Colour_X1);
                                        
                                        Relations.Add(OptionAttributeCodes, 
                                        		OptionAttributeCodes.ATTRIBUTE_TYPE.IsEqualTo(17).And(
                                        		OptionAttributeCodes.ATTRIBUTE_CODE.IsEqualTo(ProdColourAttribWork.LowGradeCode)), 
                                        	OptionAttributeCodes.SortByREF_OPT_ATT_CODE_X1);
                                        
                                        Relations.Add(WebOptionOrder, 
                                        		WebOptionOrder.ProductNumber.IsEqualTo(ProdColourAttribWork.Product1).And(
                                        		WebOptionOrder.ColourCode.IsEqualTo(ProdColourAttribWork.Colour1)), 
                                        	WebOptionOrder.SortByMOS_Web_Option_Order_X1);
                                        
                                        Relations.Add(WebSelectedColours, 
                                        		WebSelectedColours.ProductNumber.IsEqualTo(ProdColourAttribWork.Product1).And(
                                        		WebSelectedColours.ColourCode.IsEqualTo(ProdColourAttribWork.Colour1)).And(
                                        		WebSelectedColours.SelectedFlag.IsEqualTo(true)), 
                                        	WebSelectedColours.SortByMOS_Web_Selected_Colours_X1);
                                        
                                        OrderBy = ProdColourAttribWork.SortByMOS_Prod_Colour_Attrib_Work_X1;
                                        
                                        #region Columns
                                        
                                        Columns.Add(ProdColourAttribWork.User1);
                                        Columns.Add(ProdColourAttribWork.Product1);
                                        Columns.Add(ProdColourAttribWork.Colour1);
                                        Columns.Add(ProdColourAttribWork.LowGradeCode);
                                        Columns.Add(ProdColourAttribWork.StoryCode);
                                        Columns.Add(ProdColourAttribWork.LineFlowCode);
                                        Columns.Add(ProdColourAttribWork.SeasonalityCode);
                                        // colour desc
                                        Columns.Add(Colour.ColourCode);
                                        Columns.Add(Colour.ColourDescription);
                                        // lowest grade 17
                                        Columns.Add(vLowestGradePositional);
                                        Columns.Add(OptionAttributeCodes.ATTRIBUTE_TYPE);
                                        Columns.Add(OptionAttributeCodes.ATTRIBUTE_CODE);
                                        Columns.Add(OptionAttributeCodes.ATTRIBUTE_CODE_DESCRIPTION);
                                        
                                        Columns.Add(vAllocationString);
                                        Columns.Add(vAllocationQuantity);
                                        Columns.Add(vSubstitute);
                                        Columns.Add(vTrial);
                                        
                                        Columns.Add(WebOptionOrder.ProductNumber);
                                        Columns.Add(WebOptionOrder.ColourCode);
                                        Columns.Add(WebOptionOrder.WebOrderQuantity);
                                        
                                        Columns.Add(RCTickedForWeb);
                                        Relations[WebSelectedColours].NotifyRowWasFoundTo(RCTickedForWeb);
                                        Columns.Add(WebSelectedColours.ProductNumber);
                                        Columns.Add(WebSelectedColours.ColourCode);
                                        Columns.Add(WebSelectedColours.SelectedFlag);
                                        #endregion
                                    }
                                    
                                    /// <summary>List Option Attributes - part2</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnUserEdit;
                                        TransactionScope = TransactionScopes.RowLocking;
                                        AllowUserAbort = true;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        _layout.OptAttribTypesHeaderPrt2.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        LockCurrentRow();
                                        Cached<ProcessAllocationDetails>().Run();
                                        _layout.OptAttribTypesDetailPrt2.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    
                                    #region Expressions
                                    internal Bool Exp_4()
                                    {
                                        return vAllocationQuantity > 0;
                                    }
                                    internal Text Exp_5()
                                    {
                                        return "Substitute";
                                    }
                                    internal Bool Exp_6()
                                    {
                                        return vAllocationQuantity == 0 && vSubstitute == "Y";
                                    }
                                    internal Text Exp_7()
                                    {
                                        return "Trial";
                                    }
                                    internal Bool Exp_8()
                                    {
                                        return vTrial == "Y";
                                    }
                                    internal Text Exp_12()
                                    {
                                        return u.If(RCTickedForWeb, "Yes", "No");
                                    }
                                    #endregion
                                    
                                    
                                    
                                    /// <summary>Process Allocation Details(P#400.1.1.1.1.3.6.4.1)</summary>
                                    // Last change before Migration: 21/02/2011 15:28:05
                                    class ProcessAllocationDetails : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Columns
                                        
                                        /// <summary>v:DSS department code</summary>
                                        readonly TextColumn vDSSDepartmentCode = new TextColumn("v:DSS department code", "2");
                                        
                                        /// <summary>v:DSS sub department code</summary>
                                        readonly TextColumn vDSSSubDepartmentCode = new TextColumn("v:DSS sub department code", "2");
                                        
                                        /// <summary>v:DSS section code</summary>
                                        readonly TextColumn vDSSSectionCode = new TextColumn("v:DSS section code", "2");
                                        
                                        /// <summary>v:DSS range code</summary>
                                        readonly TextColumn vDSSRangeCode = new TextColumn("v:DSS range code", "2");
                                        
                                        /// <summary>v:DSS sub range</summary>
                                        readonly TextColumn vDSSSubRange = new TextColumn("v:DSS sub range", "2");
                                        
                                        /// <summary>v:Grade set</summary>
                                        readonly TextColumn vGradeSet = new TextColumn("v:Grade set", "10");
                                        
                                        /// <summary>v:due week</summary>
                                        readonly NumberColumn vDueWeek = new NumberColumn("v:due week", "6A");
                                        
                                        /// <summary>v:and condition part1</summary>
                                        readonly TextColumn vAndConditionPart1 = new TextColumn("v:and condition part1", "300");
                                        
                                        /// <summary>v:and condition part2</summary>
                                        readonly TextColumn vAndConditionPart2 = new TextColumn("v:and condition part2", "200");
                                        
                                        /// <summary>v:and condition joined</summary>
                                        readonly TextColumn vAndConditionJoined = new TextColumn("v:and condition joined", "500");
                                        #endregion
                                        
                                        ListOptionAttributesPart2 _parent;
                                        
                                        
                                        /// <summary>Process Allocation Details(P#400.1.1.1.1.3.6.4.1)</summary>
                                        public ProcessAllocationDetails(ListOptionAttributesPart2 parent)
                                        {
                                            _parent = parent;
                                            Title = "Process Allocation Details";
                                            InitializeDataView();
                                        }
                                        void InitializeDataView()
                                        {
                                            #region Columns
                                            
                                            Columns.Add(vDSSDepartmentCode);
                                            Columns.Add(vDSSSubDepartmentCode);
                                            Columns.Add(vDSSSectionCode);
                                            Columns.Add(vDSSRangeCode);
                                            Columns.Add(vDSSSubRange);
                                            Columns.Add(vGradeSet);
                                            
                                            Columns.Add(vDueWeek);
                                            
                                            Columns.Add(vAndConditionPart1);
                                            Columns.Add(vAndConditionPart2);
                                            Columns.Add(vAndConditionJoined);
                                            #endregion
                                        }
                                        
                                        /// <summary>Process Allocation Details</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            Exit(ExitTiming.AfterRow);
                                            AllowUserAbort = true;
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            ApplicationControllerBase.RunProgramFromAnUnreferencedApplication(@"%UnipaasApps%al\ecf\al.ecf","al1045", _parent.ProdColourAttribWork.Product1, _parent.ProdColourAttribWork.Colour1);
                                            ApplicationControllerBase.RunProgramFromAnUnreferencedApplication(@"%UnipaasApps%al\ecf\al.ecf","al580", 
                                            				_parent.ProdColourAttribWork.Product1, 
                                            				_parent.ProdColourAttribWork.Colour1, 
                                            				vDSSDepartmentCode, 
                                            				vDSSSubDepartmentCode, 
                                            				vDSSSectionCode, 
                                            				vDSSRangeCode, 
                                            				vDSSSubRange, 
                                            				vGradeSet);
                                            Cached<GetDueWeek>().Run();
                                            vAndConditionPart1.Value = "and g.dss_department_code = " + "'" + u.If(vDSSDepartmentCode != " ", u.Trim(vDSSDepartmentCode), " ") + "'" + " and g.dss_sub_department_code = " + "'" + u.If(vDSSSubDepartmentCode != " ", u.Trim(vDSSSubDepartmentCode), " ") + "'" + " and g.dss_section_code = " + "'" + u.If(vDSSSectionCode != " ", u.Trim(vDSSSectionCode), " ") + "'" + " and g.dss_range_code = " + "'" + u.If(vDSSRangeCode != " ", u.Trim(vDSSRangeCode), " ") + "'";
                                            vAndConditionPart2.Value = " and g.dss_sub_range_code = " + "'" + u.If(vDSSSubRange != " ", u.Trim(vDSSSubRange), " ") + "'" + " and g.grade_set_id = " + "'" + u.If(vGradeSet != " ", u.Trim(vGradeSet), " ") + "'";
                                            vAndConditionJoined.Value = u.Trim(vAndConditionPart1) + u.Trim(vAndConditionPart2);
                                            Cached<GetAllocationQtys>().Run();
                                        }
                                        
                                        
                                        
                                        /// <summary>Get Due Week(P#400.1.1.1.1.3.6.4.1.1)</summary>
                                        // Last change before Migration: 13/07/2006 12:03:08
                                        class GetDueWeek : Mos.BusinessProcessBase 
                                        {
                                            
                                            #region Models
                                            DynamicSQLEntity sqlEntity;
                                            #endregion
                                            
                                            #region Columns
                                            
                                            /// <summary>MIN(MACKAYS.MOS_ORDER_LOT_ITEM.</summary>
                                            readonly NumberColumn MINMACKAYSMOS_ORDER_LOT_ITEM = new NumberColumn("MIN(MACKAYS.MOS_ORDER_LOT_ITEM.", "6")
                                            {
                                            	AllowNull = true
                                            };
                                            #endregion
                                            
                                            ProcessAllocationDetails _parent;
                                            
                                            
                                            /// <summary>Get Due Week(P#400.1.1.1.1.3.6.4.1.1)</summary>
                                            public GetDueWeek(ProcessAllocationDetails parent)
                                            {
                                                _parent = parent;
                                                Title = "Get Due Week";
                                                InitializeDataView();
                                            }
                                            void InitializeDataView()
                                            {
                                                sqlEntity = new DynamicSQLEntity(Models.DataSources.MOS, "SELECT min( mackays.MOS_Order_Lot_Item.Due_Week) FROM mackays.MOS_Order_Lot_Item WHERE mackays.MOS_Order_Lot_Item.Order_Number = :1");
                                                sqlEntity.AddParameter(_parent._parent._parent._parent._parent._parent._parent._parent._parent.pOrder); //:1;
                                                sqlEntity.Columns.Add(MINMACKAYSMOS_ORDER_LOT_ITEM);
                                                From = sqlEntity;
                                                
                                                #region Columns
                                                
                                                Columns.Add(MINMACKAYSMOS_ORDER_LOT_ITEM);
                                                #endregion
                                            }
                                            
                                            /// <summary>Get Due Week</summary>
                                            internal void Run()
                                            {
                                                Execute();
                                            }
                                            protected override void OnLoad()
                                            {
                                                Exit(ExitTiming.AfterRow);
                                                TransactionScope = TransactionScopes.Task;
                                                Activity = Activities.Browse;
                                                AllowDelete = false;
                                                AllowInsert = false;
                                                AllowUpdate = false;
                                                AllowUserAbort = true;
                                            }
                                            protected override void OnLeaveRow()
                                            {
                                                _parent.vDueWeek.Value = MINMACKAYSMOS_ORDER_LOT_ITEM;
                                            }
                                            
                                            
                                        }
                                        
                                        /// <summary>Get Allocation Qtys(P#400.1.1.1.1.3.6.4.1.2)</summary>
                                        // Last change before Migration: 19/07/2006 09:32:40
                                        class GetAllocationQtys : Mos.BusinessProcessBase 
                                        {
                                            
                                            #region Models
                                            DynamicSQLEntity sqlEntity;
                                            #endregion
                                            
                                            #region Columns
                                            
                                            /// <summary>ALLOCATION</summary>
                                            readonly TextColumn ALLOCATION = new TextColumn("ALLOCATION", "49")
                                            {
                                            	AllowNull = true
                                            };
                                            
                                            /// <summary>ALLOC</summary>
                                            readonly NumberColumn ALLOC = new NumberColumn("ALLOC", "10.3")
                                            {
                                            	AllowNull = true
                                            };
                                            
                                            /// <summary>SUB</summary>
                                            readonly TextColumn SUB = new TextColumn("SUB", "1")
                                            {
                                            	AllowNull = true
                                            };
                                            
                                            /// <summary>TRIAL</summary>
                                            readonly TextColumn TRIAL = new TextColumn("TRIAL", "1")
                                            {
                                            	AllowNull = true
                                            };
                                            #endregion
                                            
                                            ProcessAllocationDetails _parent;
                                            
                                            
                                            /// <summary>Get Allocation Qtys(P#400.1.1.1.1.3.6.4.1.2)</summary>
                                            public GetAllocationQtys(ProcessAllocationDetails parent)
                                            {
                                                _parent = parent;
                                                Title = "Get Allocation Qtys";
                                                InitializeDataView();
                                            }
                                            void InitializeDataView()
                                            {
                                                sqlEntity = new DynamicSQLEntity(Models.DataSources.MOS, 
@"select case when yy.qtyordo = 0 then 0 else 
            round((yy.alloc/yy.qtyordo)*100,0) end || '% ' ||
       yy.min_grade || '-' || yy.max_grade || 
       case when yy.MCo_Incl = 'Y' then ',M' else '' end ||
       case when yy.web_incl = 'Y' then ',W' else '' end allocation,
       yy.alloc, yy.sub, yy.trial
  from       
(select xx.product_number, xx.colour_code,
       sum(xx.qtyord) qtyord, sum(xx.qtyordo) qtyordo, sum(xx.alloc) alloc,
       min(min_grade) min_grade, max(max_grade) max_grade, max(MCo_Incl) MCo_Incl, max(web_incl) web_incl,
       max(xx.sub) sub, max(xx.trial) trial
 from
((Select w1.product_number, w1.colour_code, 
       sum(case when lot.ord_lot_complete_status = 0 
                then w1.items_in_pack * olp.quantity_of_pack else 
                     w1.items_in_pack * olp.delivery_quantity end) qtyord,
       sum(case when ord.order_number = :3
                then 
           case when lot.ord_lot_complete_status = 0
                then w1.items_in_pack * olp.quantity_of_pack else 
                     w1.items_in_pack * olp.delivery_quantity end else 0 end) qtyordo,
       0 alloc, 'z' min_grade, ' ' max_grade, ' ' MCo_Incl, ' ' web_incl,
       ' ' sub, ' ' trial
  from mackays.war_pack_makeup w1,
       mackays.shp_order_lot_packs olp,
       mackays.shp_orders ord,
       mackays.shp_lots lot
 where w1.product_number = :1
   and w1.colour_code = :2
   and w1.product_number = olp.product_number
   and w1.pack_code = olp.pack_code
   and olp.order_number between 300000 and 599999
   and olp.order_number = ord.order_number
   and olp.order_number = lot.order_number
   and olp.lot_number = lot.lot_number
   and (ord.order_status > 0 or ord.order_number = :3)
group by w1.product_number, w1.colour_code)

union all

(select a.product_number, m.colour_code, 0 qtyord, 0 qtyordo,
       sum(((a.allocation_quantity_mos/r.total_items_per_pack) * m.items_in_pack) * g.target_no_of_stores)
       alloc,
       min(case when substr(a.sort_grade,2,1) <> '0' and a.sort_grade <> 'W9' 
                then substr(a.display_grade,1,1) else 'z' end) min_grade,
       max(case when substr(a.sort_grade,2,1) <> '0' and a.sort_grade <> 'W9' 
                then substr(a.display_grade,1,1) else ' ' end) max_grade,
       max(case when substr(a.sort_grade,2,1) = '0' then 'Y' else ' ' end) MCo_Incl,
       max(case when a.sort_grade = 'W9' then 'Y' else ' ' end) web_incl,
       ' ' sub, ' ' trial
  from mackays.alc_bb_allocs a,
       mackays.war_pack_makeup m,
       mackays.war_pack_ref r,
       mackays.alc_grade_sets_grades g
 where a.product_number = :1
   and m.colour_code = :2
   and a.product_number = m.product_number
   and a.pack_code = m.pack_code
   and a.product_number = r.product_number
   and a.pack_code = r.pack_code
   and a.allocation_quantity_mos > 0
   :5 
    and g.sort_grade = a.sort_grade
   and g.from_week = 
       (select max(g1.from_week) 
          from mackays.alc_grade_sets_grades g1
         where g.dss_department_code = g1.dss_department_code
           and g.dss_sub_department_code = g1.dss_sub_department_code
           and g.dss_section_code = g1.dss_section_code
           and g.dss_range_code = g1.dss_range_code
           and g.dss_sub_range_code = g1.dss_sub_range_code
           and g.grade_set_id = g1.grade_set_id
           and g.sort_grade = g1.sort_grade
           and g1.from_week <= :4)
group by a.product_number, m.colour_code)

union all

(select ac.product_number, ac.colour_code, 0 qtyord, 0 qtyordo,
       0 alloc, 'z' min_grade, ' ' max_grade, ' ' MCo_Incl, ' ' web_incl,
       max(ac.substitute) sub, max(ac.trial_line) trial
  from mackays.alc_option_comments ac
 where ac.product_number = :1
   and ac.colour_code = :2
group by ac.product_number, ac.colour_code) ) xx
group by xx.product_number, xx.colour_code) yy");
                                                sqlEntity.AddParameter(_parent._parent.ProdColourAttribWork.Product1); //:1;
                                                sqlEntity.AddParameter(_parent._parent.ProdColourAttribWork.Colour1); //:2;
                                                sqlEntity.AddParameter(_parent._parent._parent._parent._parent._parent._parent._parent._parent.pOrder); //:3;
                                                sqlEntity.AddParameter(_parent.vDueWeek); //:4;
                                                sqlEntity.AddParameter(_parent.vAndConditionJoined); //:5;
                                                sqlEntity.Columns.Add(ALLOCATION, ALLOC, SUB, TRIAL);
                                                From = sqlEntity;
                                                
                                                #region Columns
                                                
                                                Columns.Add(ALLOCATION);
                                                Columns.Add(ALLOC);
                                                Columns.Add(SUB);
                                                Columns.Add(TRIAL);
                                                #endregion
                                            }
                                            
                                            /// <summary>Get Allocation Qtys</summary>
                                            internal void Run()
                                            {
                                                Execute();
                                            }
                                            protected override void OnLoad()
                                            {
                                                TransactionScope = TransactionScopes.Task;
                                                Activity = Activities.Browse;
                                                AllowDelete = false;
                                                AllowUserAbort = true;
                                            }
                                            protected override void OnLeaveRow()
                                            {
                                                _parent._parent.vAllocationString.Value = ALLOCATION;
                                                _parent._parent.vAllocationQuantity.Value = ALLOC;
                                                _parent._parent.vSubstitute.Value = SUB;
                                                _parent._parent.vTrial.Value = TRIAL;
                                            }
                                            
                                            
                                        }
                                    }
                                }
                                
                                /// <summary>List Option Attributes - Home(P#400.1.1.1.1.3.6.5)</summary>
                                // Last change before Migration: 02/07/2010 10:49:20
                                internal class ListOptionAttributesHome : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>Prod Colour Attrib Work</summary>
                                    readonly Models.ProdColourAttribWork ProdColourAttribWork = new Models.ProdColourAttribWork { ReadOnly = true };
                                    
                                    /// <summary>Colour</summary>
                                    internal readonly Models.Colour Colour = new Models.Colour { ReadOnly = true };
                                    
                                    /// <summary>Option Attribute Codes</summary>
                                    internal readonly Models.OptionAttributeCodes OptionAttributeCodes = new Models.OptionAttributeCodes { ReadOnly = true };
                                    
                                    /// <summary>Option Attribute Codes</summary>
                                    internal readonly Models.OptionAttributeCodes OptionAttributeCodes1 = new Models.OptionAttributeCodes { ReadOnly = true };
                                    
                                    /// <summary>Option Attribute Codes</summary>
                                    internal readonly Models.OptionAttributeCodes OptionAttributeCodes2 = new Models.OptionAttributeCodes { ReadOnly = true };
                                    
                                    /// <summary>Option Attribute Codes</summary>
                                    internal readonly Models.OptionAttributeCodes OptionAttributeCodes3 = new Models.OptionAttributeCodes { ReadOnly = true };
                                    
                                    /// <summary>Option Attribute Codes</summary>
                                    internal readonly Models.OptionAttributeCodes OptionAttributeCodes4 = new Models.OptionAttributeCodes { ReadOnly = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Story Positional</summary>
                                    readonly TextColumn vStoryPositional = new TextColumn("v:Story Positional", "1");
                                    
                                    /// <summary>v:Line Flow Positional</summary>
                                    readonly TextColumn vLineFlowPositional = new TextColumn("v:Line Flow Positional", "1");
                                    
                                    /// <summary>v:Seasonality Positional</summary>
                                    readonly TextColumn vSeasonalityPositional = new TextColumn("v:Seasonality Positional", "1");
                                    
                                    /// <summary>v:City Positional</summary>
                                    readonly TextColumn vCityPositional = new TextColumn("v:City Positional", "1");
                                    #endregion
                                    
                                    #region Printing Layouts
                                    Printing.OrderPrintPo1537ListOptionAttributesHome _layout;
                                    #endregion
                                    
                                    ProformaPrint _parent;
                                    
                                    
                                    /// <summary>List Option Attributes - Home(P#400.1.1.1.1.3.6.5)</summary>
                                    public ListOptionAttributesHome(ProformaPrint parent)
                                    {
                                        _parent = parent;
                                        Title = "List Option Attributes - Home";
                                        InitializeDataView();
                                        _layout = new Printing.OrderPrintPo1537ListOptionAttributesHome(this);
                                        _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._layout);
                                    }
                                    void InitializeDataView()
                                    {
                                        From = ProdColourAttribWork;
                                        Relations.Add(Colour, 
                                        		Colour.ColourCode.IsEqualTo(ProdColourAttribWork.Colour1), 
                                        	Colour.SortByREF_Colour_X1);
                                        
                                        Relations.Add(OptionAttributeCodes, 
                                        		OptionAttributeCodes.ATTRIBUTE_TYPE.IsEqualTo(17).And(
                                        		OptionAttributeCodes.ATTRIBUTE_CODE.IsEqualTo(ProdColourAttribWork.LowGradeCode)), 
                                        	OptionAttributeCodes.SortByREF_OPT_ATT_CODE_X1);
                                        
                                        Relations.Add(OptionAttributeCodes1, 
                                        		OptionAttributeCodes1.ATTRIBUTE_TYPE.IsEqualTo(3).And(
                                        		OptionAttributeCodes1.ATTRIBUTE_CODE.IsEqualTo(ProdColourAttribWork.StoryCode)), 
                                        	OptionAttributeCodes1.SortByREF_OPT_ATT_CODE_X1);
                                        
                                        Relations.Add(OptionAttributeCodes2, 
                                        		OptionAttributeCodes2.ATTRIBUTE_TYPE.IsEqualTo(4).And(
                                        		OptionAttributeCodes2.ATTRIBUTE_CODE.IsEqualTo(ProdColourAttribWork.LineFlowCode)), 
                                        	OptionAttributeCodes2.SortByREF_OPT_ATT_CODE_X1);
                                        
                                        Relations.Add(OptionAttributeCodes3, 
                                        		OptionAttributeCodes3.ATTRIBUTE_TYPE.IsEqualTo(21).And(
                                        		OptionAttributeCodes3.ATTRIBUTE_CODE.IsEqualTo(ProdColourAttribWork.SeasonalityCode)), 
                                        	OptionAttributeCodes3.SortByREF_OPT_ATT_CODE_X1);
                                        
                                        Relations.Add(OptionAttributeCodes4, 
                                        		OptionAttributeCodes4.ATTRIBUTE_TYPE.IsEqualTo(46).And(
                                        		OptionAttributeCodes4.ATTRIBUTE_CODE.IsEqualTo(ProdColourAttribWork.CityCode)), 
                                        	OptionAttributeCodes4.SortByREF_OPT_ATT_CODE_X1);
                                        
                                        OrderBy = ProdColourAttribWork.SortByMOS_Prod_Colour_Attrib_Work_X1;
                                        
                                        #region Columns
                                        
                                        Columns.Add(ProdColourAttribWork.User1);
                                        Columns.Add(ProdColourAttribWork.Product1);
                                        Columns.Add(ProdColourAttribWork.Colour1);
                                        Columns.Add(ProdColourAttribWork.LowGradeCode);
                                        Columns.Add(ProdColourAttribWork.StoryCode);
                                        Columns.Add(ProdColourAttribWork.LineFlowCode);
                                        Columns.Add(ProdColourAttribWork.SeasonalityCode);
                                        Columns.Add(ProdColourAttribWork.CityCode);
                                        // colour desc
                                        Columns.Add(Colour.ColourCode);
                                        Columns.Add(Colour.ColourDescription);
                                        // Lowest Grade 17
                                        Columns.Add(OptionAttributeCodes.ATTRIBUTE_TYPE);
                                        Columns.Add(OptionAttributeCodes.ATTRIBUTE_CODE);
                                        Columns.Add(OptionAttributeCodes.ATTRIBUTE_CODE_DESCRIPTION);
                                        // story 3
                                        Columns.Add(vStoryPositional);
                                        Columns.Add(OptionAttributeCodes1.ATTRIBUTE_TYPE);
                                        Columns.Add(OptionAttributeCodes1.ATTRIBUTE_CODE);
                                        Columns.Add(OptionAttributeCodes1.ATTRIBUTE_CODE_DESCRIPTION);
                                        // line flow 4
                                        Columns.Add(vLineFlowPositional);
                                        Columns.Add(OptionAttributeCodes2.ATTRIBUTE_TYPE);
                                        Columns.Add(OptionAttributeCodes2.ATTRIBUTE_CODE);
                                        Columns.Add(OptionAttributeCodes2.ATTRIBUTE_CODE_DESCRIPTION);
                                        // seasonality 21
                                        Columns.Add(vSeasonalityPositional);
                                        Columns.Add(OptionAttributeCodes3.ATTRIBUTE_TYPE);
                                        Columns.Add(OptionAttributeCodes3.ATTRIBUTE_CODE);
                                        Columns.Add(OptionAttributeCodes3.ATTRIBUTE_CODE_DESCRIPTION);
                                        // seasonality 46
                                        Columns.Add(vCityPositional);
                                        Columns.Add(OptionAttributeCodes4.ATTRIBUTE_TYPE);
                                        Columns.Add(OptionAttributeCodes4.ATTRIBUTE_CODE);
                                        Columns.Add(OptionAttributeCodes4.ATTRIBUTE_CODE_DESCRIPTION);
                                        #endregion
                                    }
                                    
                                    /// <summary>List Option Attributes - Home</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnUserEdit;
                                        TransactionScope = TransactionScopes.RowLocking;
                                        AllowUserAbort = true;
                                        _layout.Reset();
                                    }
                                    protected override void OnStart()
                                    {
                                        _layout.OptAttribTypesHeader.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        _layout.OptAttribTypesDetail.WriteTo(_parent._parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    
                                    
                                }
                                
                                /// <summary>Check if labels exist(P#400.1.1.1.1.3.6.6)</summary>
                                // Last change before Migration: 24/11/2009 12:16:43
                                internal class CheckIfLabelsExist : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>Style Labels</summary>
                                    readonly Models.StyleLabels StyleLabels = new Models.StyleLabels { ReadOnly = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>RC:Labels found</summary>
                                    readonly BoolColumn RCLabelsFound = new BoolColumn("RC:Labels found");
                                    #endregion
                                    
                                    ProformaPrint _parent;
                                    
                                    
                                    /// <summary>Check if labels exist(P#400.1.1.1.1.3.6.6)</summary>
                                    public CheckIfLabelsExist(ProformaPrint parent)
                                    {
                                        _parent = parent;
                                        Title = "Check if labels exist";
                                        InitializeDataView();
                                    }
                                    void InitializeDataView()
                                    {
                                        Relations.Add(StyleLabels, 
                                        		StyleLabels.StyleCode.IsEqualTo(_parent._parent._parent._parent._parent.ProductsByStyle.StyleCode), 
                                        	StyleLabels.SortBySHP_Style_Labels_X1);
                                        
                                        
                                        #region Columns
                                        
                                        Columns.Add(RCLabelsFound);
                                        Relations[StyleLabels].NotifyRowWasFoundTo(RCLabelsFound);
                                        Columns.Add(StyleLabels.StyleCode);
                                        Columns.Add(StyleLabels.LabelType);
                                        Columns.Add(StyleLabels.LabelCode);
                                        #endregion
                                    }
                                    
                                    /// <summary>Check if labels exist</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        Exit(ExitTiming.AfterRow);
                                        RowLocking = LockingStrategy.OnRowLoading;
                                        TransactionScope = TransactionScopes.Task;
                                        AllowUserAbort = true;
                                    }
                                    protected override void OnLeaveRow()
                                    {
                                        if(RCLabelsFound)
                                        {
                                            Cached<ListLabelDetails>().Run();
                                        }
                                    }
                                    
                                    
                                    
                                    /// <summary>List Label Details(P#400.1.1.1.1.3.6.6.1)</summary>
                                    // Last change before Migration: 24/11/2009 12:16:43
                                    internal class ListLabelDetails : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Style Labels</summary>
                                        readonly Models.StyleLabels StyleLabels = new Models.StyleLabels { ReadOnly = true };
                                        
                                        /// <summary>Label Codes By Type</summary>
                                        internal readonly Models.LabelCodesByType LabelCodesByType = new Models.LabelCodesByType { ReadOnly = true };
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537ListLabelDetails _layout;
                                        #endregion
                                        
                                        CheckIfLabelsExist _parent;
                                        
                                        
                                        /// <summary>List Label Details(P#400.1.1.1.1.3.6.6.1)</summary>
                                        public ListLabelDetails(CheckIfLabelsExist parent)
                                        {
                                            _parent = parent;
                                            Title = "List Label Details";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537ListLabelDetails(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                        }
                                        void InitializeDataView()
                                        {
                                            From = StyleLabels;
                                            Relations.Add(LabelCodesByType, 
                                            		LabelCodesByType.LabelType.IsEqualTo(StyleLabels.LabelType).And(
                                            		LabelCodesByType.LabelCode.IsEqualTo(StyleLabels.LabelCode)).And(
                                            		LabelCodesByType.DSSDepartmentCode.IsEqualTo(_parent._parent._parent._parent._parent._parent.StyleSpecification.DSS_DEPARTMENT_CODE)).And(
                                            		LabelCodesByType.DSSSubDepartmentCode.IsEqualTo(_parent._parent._parent._parent._parent._parent.StyleSpecification.DSS_SUB_DEPT_CODE)).And(
                                            		LabelCodesByType.DSSSectionCode.IsEqualTo(_parent._parent._parent._parent._parent._parent.StyleSpecification.DSS_SECTION_CODE)), 
                                            	LabelCodesByType.SortBySHP_Label_Codes_By_Type_X2);
                                            
                                            Where.Add(StyleLabels.StyleCode.IsEqualTo(_parent._parent._parent._parent._parent._parent.ProductsByStyle.StyleCode));
                                            OrderBy = StyleLabels.SortBySHP_Style_Labels_X1;
                                            
                                            #region Columns
                                            
                                            Columns.Add(StyleLabels.StyleCode);
                                            Columns.Add(StyleLabels.LabelType);
                                            Columns.Add(StyleLabels.LabelCode);
                                            
                                            Columns.Add(LabelCodesByType.LabelType);
                                            Columns.Add(LabelCodesByType.LabelCode);
                                            Columns.Add(LabelCodesByType.DSSDepartmentCode);
                                            Columns.Add(LabelCodesByType.DSSSubDepartmentCode);
                                            Columns.Add(LabelCodesByType.DSSSectionCode);
                                            Columns.Add(LabelCodesByType.LabelCodeDescription);
                                            #endregion
                                        }
                                        
                                        /// <summary>List Label Details</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            AllowUserAbort = true;
                                            _layout.Reset();
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            _layout.LabelList.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                        }
                                        
                                        
                                    }
                                }
                            }
                            
                            /// <summary>Order Lot Pack - HOME(P#400.1.1.1.1.3.7)</summary>
                            // Last change before Migration: 25/01/2013 14:13:02
                            internal class OrderLotPackHOME : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>Order Lot Packs</summary>
                                internal readonly Models.OrderLotPacks OrderLotPacks = new Models.OrderLotPacks { ReadOnly = true };
                                
                                /// <summary>Lot</summary>
                                readonly Models.Lot Lot = new Models.Lot { ReadOnly = true };
                                #endregion
                                
                                #region Columns
                                
                                /// <summary>v:Footer Total Items Order Pack</summary>
                                readonly NumberColumn vFooterTotalItemsOrderPack = new NumberColumn("v:Footer Total Items Order Pack", "6");
                                
                                /// <summary>v:Footer Total Pack Make Up</summary>
                                readonly NumberColumn vFooterTotalPackMakeUp = new NumberColumn("v:Footer Total Pack Make Up", "6");
                                
                                /// <summary>v:Footer total Items FRA</summary>
                                readonly NumberColumn vFooterTotalItemsFRA = new NumberColumn("v:Footer total Items FRA", "6");
                                #endregion
                                
                                #region Printing Layouts
                                Printing.OrderPrintPo1537OrderLotPackHOME _layout;
                                #endregion
                                
                                LotDetails _parent;
                                
                                
                                /// <summary>Order Lot Pack - HOME(P#400.1.1.1.1.3.7)</summary>
                                public OrderLotPackHOME(LotDetails parent)
                                {
                                    _parent = parent;
                                    Title = "Order Lot Pack - HOME";
                                    InitializeDataView();
                                    _layout = new Printing.OrderPrintPo1537OrderLotPackHOME(this);
                                    _layout.Layouts.Add(_parent._parent._parent._parent._parent._layout);
                                }
                                void InitializeDataView()
                                {
                                    From = OrderLotPacks;
                                    Relations.Add(Lot, 
                                    		Lot.ORDER_NUMBER.IsEqualTo(_parent._parent._parent._parent._parent.vOrderNumber).And(
                                    		Lot.LOT_NUMBER.IsEqualTo(OrderLotPacks.LotNumber)), 
                                    	Lot.SortBySHP_LOTS_X1);
                                    
                                    Where.Add(OrderLotPacks.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.vOrderNumber));
                                    OrderBy = OrderLotPacks.SortBySHP_Order_Lot_Packs_X1;
                                    
                                    #region Columns
                                    
                                    Columns.Add(OrderLotPacks.OrderNumber);
                                    Columns.Add(OrderLotPacks.LotNumber);
                                    // Delivery Date for Lot. Moved to this level because this task called in
                                    // TS instead of RS as was before
                                    Columns.Add(Lot.ORDER_NUMBER);
                                    Columns.Add(Lot.LOT_NUMBER);
                                    Columns.Add(Lot.SHIPPING_DATE_LATEST);
                                    Columns.Add(Lot.ORD_LOT_COMPLETE_STATUS);
                                    // OR FOR FD AND DOMESTIC DELIVERY DATE
                                    Columns.Add(Lot.DELIVERY_DATE);
                                    
                                    Columns.Add(OrderLotPacks.ProductNumber);
                                    Columns.Add(OrderLotPacks.PackType);
                                    Columns.Add(OrderLotPacks.AssortmentCode);
                                    Columns.Add(OrderLotPacks.PackCode);
                                    Columns.Add(OrderLotPacks.QuantityInPack);
                                    Columns.Add(OrderLotPacks.QuantityOfPack);
                                    // Footer Totals fot Line Totals, 'Total Items' & 'Total Items' on Print
                                    Columns.Add(vFooterTotalItemsOrderPack);
                                    Columns.Add(vFooterTotalPackMakeUp);
                                    Columns.Add(vFooterTotalItemsFRA);
                                    #endregion
                                }
                                
                                /// <summary>Order Lot Pack - HOME</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    TransactionScope = TransactionScopes.Task;
                                    _layout.Reset();
                                }
                                protected override void OnStart()
                                {
                                    // header for part 1
                                    if(Exp_4())
                                    {
                                        _layout.PolyBagWarning.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    if(Exp_4())
                                    {
                                        _layout.OrderLotPackHeader2.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                }
                                protected override void OnLeaveRow()
                                {
                                    // detail for part 2
                                    u.DBDel(typeof(Models.WorkPacksMakeup), "");
                                    if(Exp_4())
                                    {
                                        Cached<SeqPackMakeup>().Run();
                                    }
                                }
                                protected override void OnEnd()
                                {
                                    // footer for part 2
                                    ExtraMOSPrograms.CalcFranchiseQtysPo2204.Create().Run(
                                    				_parent._parent._parent._parent._parent._parent.pOrder, 
                                    				"", 
                                    				vFooterTotalItemsFRA, 
                                    				0);
                                    if(Exp_4())
                                    {
                                        _layout.OrderLotPackFooter.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                }
                                
                                #region Expressions
                                internal Text Exp_1()
                                {
                                    return u.If(_parent._parent._parent._parent.vUKForeignSupplier == "014" && _parent._parent._parent._parent.Orders.TERMS_OF_DELIVERY != "FD", "Shipment", "Delivery");
                                }
                                internal Bool Exp_3()
                                {
                                    return _parent._parent._parent._parent._parent.vReportType != "L" && u.Not(_parent._parent._parent._parent.vProdIsSect4N4) && u.Not(_parent._parent._parent._parent.vProdIsSect4N7);
                                }
                                Bool Exp_4()
                                {
                                    return _parent._parent._parent._parent._parent.vReportPart == 2 && Lot.ORD_LOT_COMPLETE_STATUS != 9;
                                }
                                internal Number Exp_9()
                                {
                                    return vFooterTotalItemsOrderPack - vFooterTotalItemsFRA;
                                }
                                internal Number Exp_10()
                                {
                                    return vFooterTotalPackMakeUp - vFooterTotalItemsFRA;
                                }
                                #endregion
                                
                                
                                
                                /// <summary>Seq Pack Makeup(P#400.1.1.1.1.3.7.1)</summary>
                                // Last change before Migration: 25/01/2013 14:13:02
                                internal class SeqPackMakeup : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>Packs Make Up</summary>
                                    readonly Models.PacksMakeUp PacksMakeUp = new Models.PacksMakeUp { ReadOnly = true };
                                    
                                    /// <summary>Product Sizes</summary>
                                    readonly Models.ProductSizes ProductSizes = new Models.ProductSizes { KeepCacheAliveAfterExit = true, ReadOnly = true };
                                    
                                    /// <summary>Work Packs Makeup</summary>
                                    readonly Models.WorkPacksMakeup WorkPacksMakeup = new Models.WorkPacksMakeup { KeepCacheAliveAfterExit = true, AllowRowLocking = true };
                                    #endregion
                                    
                                    #region Columns
                                    
                                    /// <summary>v:Franch Pack Item Qty Total</summary>
                                    readonly NumberColumn vFranchPackItemQtyTotal = new NumberColumn("v:Franch Pack Item Qty Total", "6");
                                    #endregion
                                    
                                    internal OrderLotPackHOME _parent;
                                    
                                    
                                    /// <summary>Seq Pack Makeup(P#400.1.1.1.1.3.7.1)</summary>
                                    public SeqPackMakeup(OrderLotPackHOME parent)
                                    {
                                        _parent = parent;
                                        Title = "Seq Pack Makeup";
                                        InitializeDataView();
                                    }
                                    void InitializeDataView()
                                    {
                                        From = PacksMakeUp;
                                        Relations.Add(ProductSizes, 
                                        		ProductSizes.ProductNumber.IsEqualTo(PacksMakeUp.ProductNumber).And(
                                        		ProductSizes.SizeCode.IsEqualTo(PacksMakeUp.SizeCode)), 
                                        	ProductSizes.SortBySHP_Product_Sizes_X1);
                                        
                                        Relations.Add(WorkPacksMakeup, RelationType.Insert, 
                                        		WorkPacksMakeup.ProductNumber.BindEqualTo(PacksMakeUp.ProductNumber).And(
                                        		WorkPacksMakeup.PackCode.BindEqualTo(PacksMakeUp.PackCode)).And(
                                        		WorkPacksMakeup.ColourCode.BindEqualTo(PacksMakeUp.ColourCode)).And(
                                        		WorkPacksMakeup.SizeRelPosition.BindEqualTo(ProductSizes.SizeRelativePosition)), 
                                        	WorkPacksMakeup.SortBySHP_Work_Packs_Makeup_X1);
                                        
                                        Where.Add(PacksMakeUp.ProductNumber.IsEqualTo(_parent.OrderLotPacks.ProductNumber));
                                        Where.Add(PacksMakeUp.PackCode.IsEqualTo(_parent.OrderLotPacks.PackCode));
                                        OrderBy = PacksMakeUp.SortByWAR_Pack_MakeUp_X1;
                                        
                                        #region Columns
                                        
                                        Columns.Add(PacksMakeUp.ProductNumber);
                                        Columns.Add(PacksMakeUp.PackCode);
                                        Columns.Add(PacksMakeUp.ColourCode);
                                        Columns.Add(PacksMakeUp.SizeCode);
                                        Columns.Add(PacksMakeUp.ItemsInPack);
                                        
                                        Columns.Add(ProductSizes.ProductNumber);
                                        Columns.Add(ProductSizes.SizeCode);
                                        Columns.Add(ProductSizes.SizeRelativePosition);
                                        
                                        Columns.Add(WorkPacksMakeup.ProductNumber);
                                        Columns.Add(WorkPacksMakeup.PackCode);
                                        Columns.Add(WorkPacksMakeup.ColourCode);
                                        Columns.Add(WorkPacksMakeup.SizeCode).BindValue(PacksMakeUp.SizeCode);
                                        Columns.Add(WorkPacksMakeup.SizeRelPosition);
                                        Columns.Add(WorkPacksMakeup.ItemsInPack).BindValue(PacksMakeUp.ItemsInPack);
                                        
                                        Columns.Add(vFranchPackItemQtyTotal);
                                        #endregion
                                    }
                                    
                                    /// <summary>Seq Pack Makeup</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnUserEdit;
                                        TransactionScope = TransactionScopes.RowLocking;
                                        KeepChildRelationCacheAlive = true;
                                        KeepViewVisibleAfterExit = true;
                                    }
                                    protected override void OnEnd()
                                    {
                                        Cached<GetPackItemQtyTotal>().Run();
                                        Cached<PackMakeUp>().Run();
                                    }
                                    
                                    
                                    
                                    /// <summary>Get Pack Item Qty Total(P#400.1.1.1.1.3.7.1.1)</summary>
                                    // Last change before Migration: 01/06/2012 16:14:49
                                    class GetPackItemQtyTotal : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Franch Pack Totals Wrk</summary>
                                        readonly Models.FranchPackTotalsWrk FranchPackTotalsWrk = new Models.FranchPackTotalsWrk { AllowRowLocking = true };
                                        #endregion
                                        
                                        SeqPackMakeup _parent;
                                        
                                        
                                        /// <summary>Get Pack Item Qty Total(P#400.1.1.1.1.3.7.1.1)</summary>
                                        public GetPackItemQtyTotal(SeqPackMakeup parent)
                                        {
                                            _parent = parent;
                                            Title = "Get Pack Item Qty Total";
                                            InitializeDataView();
                                        }
                                        void InitializeDataView()
                                        {
                                            From = FranchPackTotalsWrk;
                                            Where.Add(FranchPackTotalsWrk.OrderNumber.IsEqualTo(_parent._parent.OrderLotPacks.OrderNumber));
                                            Where.Add(FranchPackTotalsWrk.LotNumber.IsEqualTo(_parent._parent.OrderLotPacks.LotNumber));
                                            Where.Add(FranchPackTotalsWrk.PackCode.IsEqualTo(_parent._parent.OrderLotPacks.PackCode));
                                            OrderBy = FranchPackTotalsWrk.SortByMOS_FRA_PACK_TOTALS_X1;
                                            
                                            #region Columns
                                            
                                            Columns.Add(FranchPackTotalsWrk.OrderNumber);
                                            Columns.Add(FranchPackTotalsWrk.LotNumber);
                                            Columns.Add(FranchPackTotalsWrk.PackCode);
                                            Columns.Add(FranchPackTotalsWrk.ItemsInPack);
                                            #endregion
                                        }
                                        
                                        /// <summary>Get Pack Item Qty Total</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            RowLocking = LockingStrategy.OnRowLoading;
                                            TransactionScope = TransactionScopes.Task;
                                            AllowUserAbort = true;
                                        }
                                        protected override void OnStart()
                                        {
                                            _parent.vFranchPackItemQtyTotal.Value = 0;
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            _parent.vFranchPackItemQtyTotal.Value += FranchPackTotalsWrk.ItemsInPack;
                                        }
                                        
                                        
                                    }
                                    
                                    /// <summary>Pack Make Up(P#400.1.1.1.1.3.7.1.2)</summary>
                                    // Last change before Migration: 25/01/2013 14:13:01
                                    internal class PackMakeUp : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Packs Makeup</summary>
                                        internal readonly Models.WorkPacksMakeup WorkPacksMakeup = new Models.WorkPacksMakeup { AllowRowLocking = true };
                                        
                                        /// <summary>Colour</summary>
                                        internal readonly Models.Colour Colour = new Models.Colour { ReadOnly = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Products By Style</summary>
                                        readonly Models.ProductsByStyle ProductsByStyle = new Models.ProductsByStyle { ReadOnly = true };
                                        
                                        /// <summary>Style Specification</summary>
                                        readonly Models.StyleSpecification StyleSpecification = new Models.StyleSpecification { ReadOnly = true };
                                        
                                        /// <summary>Franch Pack Totals Wrk</summary>
                                        readonly Models.FranchPackTotalsWrk FranchPackTotalsWrk = new Models.FranchPackTotalsWrk { ReadOnly = true };
                                        
                                        /// <summary>Product Pack Codes</summary>
                                        internal readonly Models.ProductPackCodes ProductPackCodes = new Models.ProductPackCodes { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Items Order Pack</summary>
                                        readonly NumberColumn vTotalItemsOrderPack = new NumberColumn("v:Total Items Order Pack", "6");
                                        
                                        /// <summary>v:Total Items Pack Make Up</summary>
                                        readonly NumberColumn vTotalItemsPackMakeUp = new NumberColumn("v:Total Items Pack Make Up", "6");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537PackMakeUp2 _layout;
                                        #endregion
                                        
                                        internal SeqPackMakeup _parent;
                                        
                                        
                                        /// <summary>Pack Make Up(P#400.1.1.1.1.3.7.1.2)</summary>
                                        public PackMakeUp(SeqPackMakeup parent)
                                        {
                                            _parent = parent;
                                            Title = "Pack Make Up";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537PackMakeUp2(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                            _layout.Layouts.Add(_parent._parent._layout);
                                            var WorkPacksMakeupPackCodeGroup = Groups.Add(WorkPacksMakeup.PackCode);
                                            WorkPacksMakeupPackCodeGroup.Leave += WorkPacksMakeupPackCodeGroup_Leave;
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkPacksMakeup;
                                            Relations.Add(Colour, 
                                            		Colour.ColourCode.IsEqualTo(WorkPacksMakeup.ColourCode), 
                                            	Colour.SortByREF_Colour_X1);
                                            
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkPacksMakeup.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(ProductsByStyle, 
                                            		ProductsByStyle.ProductNumber.IsEqualTo(WorkPacksMakeup.ProductNumber), 
                                            	ProductsByStyle.SortBySHP_Products_By_Style_X2);
                                            
                                            Relations.Add(StyleSpecification, 
                                            		StyleSpecification.STYLE_CODE.IsEqualTo(ProductsByStyle.StyleCode), 
                                            	StyleSpecification.SortBySHP_STYLE_SPECIFICATION_X1);
                                            
                                            Relations.Add(FranchPackTotalsWrk, 
                                            		FranchPackTotalsWrk.OrderNumber.IsEqualTo(_parent._parent.OrderLotPacks.OrderNumber).And(
                                            		FranchPackTotalsWrk.LotNumber.IsEqualTo(_parent._parent.OrderLotPacks.LotNumber)).And(
                                            		FranchPackTotalsWrk.PackCode.IsEqualTo(_parent._parent.OrderLotPacks.PackCode)).And(
                                            		FranchPackTotalsWrk.ColourCode.IsEqualTo(WorkPacksMakeup.ColourCode)).And(
                                            		FranchPackTotalsWrk.SizeCode.IsEqualTo(WorkPacksMakeup.SizeCode)), 
                                            	FranchPackTotalsWrk.SortByMOS_FRA_PACK_TOTALS_X1);
                                            
                                            Relations.Add(ProductPackCodes, 
                                            		ProductPackCodes.ProductNumber.IsEqualTo(_parent._parent.OrderLotPacks.ProductNumber).And(
                                            		ProductPackCodes.PackCode.IsEqualTo(_parent._parent.OrderLotPacks.PackCode)), 
                                            	ProductPackCodes.SortBySHP_Product_Pack_Codes_X2);
                                            
                                            Where.Add(WorkPacksMakeup.ProductNumber.IsEqualTo(_parent._parent.OrderLotPacks.ProductNumber));
                                            Where.Add(WorkPacksMakeup.PackCode.IsEqualTo(_parent._parent.OrderLotPacks.PackCode));
                                            OrderBy = WorkPacksMakeup.SortBySHP_Work_Packs_Makeup_X1;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkPacksMakeup.ProductNumber);
                                            Columns.Add(WorkPacksMakeup.PackCode);
                                            Columns.Add(WorkPacksMakeup.ColourCode);
                                            Columns.Add(Colour.ColourCode);
                                            Columns.Add(Colour.ColourDescription);
                                            Columns.Add(WorkPacksMakeup.SizeCode);
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            Columns.Add(WorkPacksMakeup.SizeRelPosition);
                                            Columns.Add(WorkPacksMakeup.ItemsInPack);
                                            // virtuals to calculate total items from Order Pack and Pack Make Up
                                            Columns.Add(vTotalItemsOrderPack);
                                            Columns.Add(vTotalItemsPackMakeUp);
                                            
                                            Columns.Add(ProductsByStyle.ProductNumber);
                                            Columns.Add(ProductsByStyle.StyleCode);
                                            
                                            Columns.Add(StyleSpecification.STYLE_CODE);
                                            Columns.Add(StyleSpecification.POLYBAG_MULTI_PACKS);
                                            
                                            Columns.Add(FranchPackTotalsWrk.OrderNumber);
                                            Columns.Add(FranchPackTotalsWrk.ProductNumber);
                                            Columns.Add(FranchPackTotalsWrk.LotNumber);
                                            Columns.Add(FranchPackTotalsWrk.PackCode);
                                            Columns.Add(FranchPackTotalsWrk.ColourCode);
                                            Columns.Add(FranchPackTotalsWrk.SizeCode);
                                            Columns.Add(FranchPackTotalsWrk.PackQty);
                                            Columns.Add(FranchPackTotalsWrk.ItemsInPack);
                                            
                                            Columns.Add(ProductPackCodes.ProductNumber);
                                            Columns.Add(ProductPackCodes.PackCode);
                                            Columns.Add(ProductPackCodes.PolyBag);
                                            #endregion
                                        }
                                        
                                        /// <summary>Pack Make Up</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnEnterRow()
                                        {
                                            vTotalItemsOrderPack.Value = 0;
                                            vTotalItemsPackMakeUp.Value = 0;
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalItemsOrderPack.Value = _parent._parent.OrderLotPacks.QuantityOfPack * _parent._parent.OrderLotPacks.QuantityInPack;
                                            vTotalItemsPackMakeUp.Value = _parent._parent.OrderLotPacks.QuantityOfPack * WorkPacksMakeup.ItemsInPack;
                                            // Update Footer Totals in Parent with 'Total Item' Line Totals on Print
                                            _parent._parent.vFooterTotalPackMakeUp.Value += vTotalItemsPackMakeUp;
                                            _parent._parent.vFooterTotalItemsOrderPack.Value = _parent._parent.vFooterTotalPackMakeUp;
                                            // Output each line of the Pack Make Up Report
                                            if(_parent._parent.OrderLotPacks.QuantityOfPack > 0)
                                            {
                                                _layout.PackMakeUp2.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        void WorkPacksMakeupPackCodeGroup_Leave()
                                        {
                                            // Output a line after each change of PAck Code if the quantity for
                                            // the Pack Code is greater than 0
                                            if(_parent._parent.OrderLotPacks.QuantityOfPack > 0)
                                            {
                                                _layout.PackCodeDividingLine.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_1()
                                        {
                                            return _parent._parent._parent._parent._parent._parent._parent._parent.pReportType == "L";
                                        }
                                        internal Date Exp_2()
                                        {
                                            return u.If(_parent._parent._parent._parent._parent._parent.vUKForeignSupplier == "014" && _parent._parent._parent._parent._parent._parent.Orders.TERMS_OF_DELIVERY != "FD", _parent._parent.Lot.SHIPPING_DATE_LATEST, _parent._parent.Lot.DELIVERY_DATE);
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return Counter == 1;
                                        }
                                        internal Number Exp_21()
                                        {
                                            return _parent._parent.OrderLotPacks.QuantityOfPack - FranchPackTotalsWrk.PackQty;
                                        }
                                        internal Number Exp_22()
                                        {
                                            return vTotalItemsOrderPack - _parent.vFranchPackItemQtyTotal;
                                        }
                                        internal Number Exp_23()
                                        {
                                            return vTotalItemsPackMakeUp - FranchPackTotalsWrk.ItemsInPack;
                                        }
                                        internal Text Exp_24()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        #endregion
                                        
                                        
                                    }
                                }
                            }
                            
                            /// <summary>Order Lot Pack - HOME fran(P#400.1.1.1.1.3.8)</summary>
                            // Last change before Migration: 08/11/2012 14:51:04
                            internal class OrderLotPackHOMEFran : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>MOS_FRA_ORDER_PACKS</summary>
                                internal readonly Models.MOS_FRA_ORDER_PACKS MOS_FRA_ORDER_PACKS = new Models.MOS_FRA_ORDER_PACKS { ReadOnly = true };
                                
                                /// <summary>Lot</summary>
                                readonly Models.Lot Lot = new Models.Lot { ReadOnly = true };
                                
                                /// <summary>Order Lot Packs</summary>
                                internal readonly Models.OrderLotPacks OrderLotPacks = new Models.OrderLotPacks { ReadOnly = true };
                                #endregion
                                
                                #region Columns
                                
                                /// <summary>v:Footer Total Items Order Pack</summary>
                                internal readonly NumberColumn vFooterTotalItemsOrderPack = new NumberColumn("v:Footer Total Items Order Pack", "6");
                                
                                /// <summary>v:Footer Total Pack Make Up</summary>
                                internal readonly NumberColumn vFooterTotalPackMakeUp = new NumberColumn("v:Footer Total Pack Make Up", "6");
                                #endregion
                                
                                #region Printing Layouts
                                Printing.OrderPrintPo1537OrderLotPackHOMEFran _layout;
                                #endregion
                                
                                LotDetails _parent;
                                
                                
                                /// <summary>Order Lot Pack - HOME fran(P#400.1.1.1.1.3.8)</summary>
                                public OrderLotPackHOMEFran(LotDetails parent)
                                {
                                    _parent = parent;
                                    Title = "Order Lot Pack - HOME fran";
                                    InitializeDataView();
                                    _layout = new Printing.OrderPrintPo1537OrderLotPackHOMEFran(this);
                                    _layout.Layouts.Add(_parent._parent._parent._parent._parent._layout);
                                }
                                void InitializeDataView()
                                {
                                    From = MOS_FRA_ORDER_PACKS;
                                    Relations.Add(Lot, 
                                    		Lot.ORDER_NUMBER.IsEqualTo(_parent._parent._parent._parent._parent.vOrderNumber).And(
                                    		Lot.LOT_NUMBER.IsEqualTo(MOS_FRA_ORDER_PACKS.LOT_NUMBER)), 
                                    	Lot.SortBySHP_LOTS_X1);
                                    
                                    Relations.Add(OrderLotPacks, 
                                    		OrderLotPacks.OrderNumber.IsEqualTo(_parent._parent._parent._parent._parent.vOrderNumber).And(
                                    		OrderLotPacks.LotNumber.IsEqualTo(MOS_FRA_ORDER_PACKS.LOT_NUMBER)).And(
                                    		OrderLotPacks.ProductNumber.IsEqualTo(MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER)).And(
                                    		OrderLotPacks.PackCode.IsEqualTo(MOS_FRA_ORDER_PACKS.PACK_CODE)), 
                                    	OrderLotPacks.SortBySHP_Order_Lot_Packs_X1);
                                    
                                    Where.Add(MOS_FRA_ORDER_PACKS.FRANCHISEE_ORDER_NUMBER.IsEqualTo(_parent._parent._parent._parent._parent._parent.pFranchiseOrderNumber));
                                    Where.Add(MOS_FRA_ORDER_PACKS.MACKAYS_ORDER_NUMBER.IsEqualTo(_parent._parent._parent._parent._parent.vOrderNumber));
                                    OrderBy = MOS_FRA_ORDER_PACKS.SortByMOS_FRA_ORDER_PACKS_X1;
                                    
                                    #region Columns
                                    
                                    Columns.Add(MOS_FRA_ORDER_PACKS.FRANCHISEE_ORDER_NUMBER);
                                    Columns.Add(MOS_FRA_ORDER_PACKS.MACKAYS_ORDER_NUMBER);
                                    Columns.Add(MOS_FRA_ORDER_PACKS.LOT_NUMBER);
                                    // Delivery Date for Lot. Moved to this level because this task called in
                                    // TS instead of RS as was before
                                    Columns.Add(Lot.ORDER_NUMBER);
                                    Columns.Add(Lot.LOT_NUMBER);
                                    Columns.Add(Lot.SHIPPING_DATE_LATEST);
                                    Columns.Add(Lot.ORD_LOT_COMPLETE_STATUS);
                                    // OR FOR FD AND DOMESTIC DELIVERY DATE
                                    Columns.Add(Lot.DELIVERY_DATE);
                                    
                                    Columns.Add(MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER);
                                    Columns.Add(MOS_FRA_ORDER_PACKS.PACK_CODE);
                                    Columns.Add(MOS_FRA_ORDER_PACKS.QTY_OF_PACKS);
                                    Columns.Add(MOS_FRA_ORDER_PACKS.CREATE_USER);
                                    // Footer Totals fot Line Totals, 'Total Items' & 'Total Items' on Print
                                    Columns.Add(vFooterTotalItemsOrderPack);
                                    Columns.Add(vFooterTotalPackMakeUp);
                                    
                                    Columns.Add(OrderLotPacks.OrderNumber);
                                    Columns.Add(OrderLotPacks.LotNumber);
                                    Columns.Add(OrderLotPacks.ProductNumber);
                                    Columns.Add(OrderLotPacks.PackType);
                                    Columns.Add(OrderLotPacks.PackCode);
                                    Columns.Add(OrderLotPacks.QuantityInPack);
                                    #endregion
                                }
                                
                                /// <summary>Order Lot Pack - HOME fran</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    TransactionScope = TransactionScopes.Task;
                                    _layout.Reset();
                                }
                                protected override void OnStart()
                                {
                                    // header for part 1
                                    if(Exp_4())
                                    {
                                        _layout.PolyBagWarning.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                    if(Exp_4())
                                    {
                                        _layout.OrderLotPackHeader2.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                }
                                protected override void OnLeaveRow()
                                {
                                    // detail for part 2
                                    u.DBDel(typeof(Models.WorkPacksMakeup), "");
                                    if(Exp_4())
                                    {
                                        Cached<SeqPackMakeup>().Run();
                                    }
                                }
                                protected override void OnEnd()
                                {
                                    // footer for part 2
                                    if(Exp_4())
                                    {
                                        _layout.OrderLotPackFooter.WriteTo(_parent._parent._parent._parent._parent._ioOrderReport);
                                    }
                                }
                                
                                #region Expressions
                                internal Text Exp_1()
                                {
                                    return u.If(_parent._parent._parent._parent.vUKForeignSupplier == "014" && _parent._parent._parent._parent.Orders.TERMS_OF_DELIVERY != "FD", "Shipment", "Delivery");
                                }
                                internal Bool Exp_3()
                                {
                                    return _parent._parent._parent._parent._parent.vReportType != "L" && u.Not(_parent._parent._parent._parent.vProdIsSect4N4) && u.Not(_parent._parent._parent._parent.vProdIsSect4N7);
                                }
                                Bool Exp_4()
                                {
                                    return _parent._parent._parent._parent._parent.vReportPart == 2 && Lot.ORD_LOT_COMPLETE_STATUS != 9;
                                }
                                #endregion
                                
                                
                                
                                /// <summary>Seq Pack Makeup(P#400.1.1.1.1.3.8.1)</summary>
                                // Last change before Migration: 10/08/2012 10:06:31
                                internal class SeqPackMakeup : Mos.BusinessProcessBase 
                                {
                                    
                                    #region Models
                                    
                                    /// <summary>Packs Make Up</summary>
                                    readonly Models.PacksMakeUp PacksMakeUp = new Models.PacksMakeUp { ReadOnly = true };
                                    
                                    /// <summary>Product Sizes</summary>
                                    readonly Models.ProductSizes ProductSizes = new Models.ProductSizes { KeepCacheAliveAfterExit = true, ReadOnly = true };
                                    
                                    /// <summary>Work Packs Makeup</summary>
                                    readonly Models.WorkPacksMakeup WorkPacksMakeup = new Models.WorkPacksMakeup { KeepCacheAliveAfterExit = true, AllowRowLocking = true };
                                    #endregion
                                    
                                    internal OrderLotPackHOMEFran _parent;
                                    
                                    
                                    /// <summary>Seq Pack Makeup(P#400.1.1.1.1.3.8.1)</summary>
                                    public SeqPackMakeup(OrderLotPackHOMEFran parent)
                                    {
                                        _parent = parent;
                                        Title = "Seq Pack Makeup";
                                        InitializeDataView();
                                    }
                                    void InitializeDataView()
                                    {
                                        From = PacksMakeUp;
                                        Relations.Add(ProductSizes, 
                                        		ProductSizes.ProductNumber.IsEqualTo(PacksMakeUp.ProductNumber).And(
                                        		ProductSizes.SizeCode.IsEqualTo(PacksMakeUp.SizeCode)), 
                                        	ProductSizes.SortBySHP_Product_Sizes_X1);
                                        
                                        Relations.Add(WorkPacksMakeup, RelationType.Insert, 
                                        		WorkPacksMakeup.ProductNumber.BindEqualTo(PacksMakeUp.ProductNumber).And(
                                        		WorkPacksMakeup.PackCode.BindEqualTo(PacksMakeUp.PackCode)).And(
                                        		WorkPacksMakeup.ColourCode.BindEqualTo(PacksMakeUp.ColourCode)).And(
                                        		WorkPacksMakeup.SizeRelPosition.BindEqualTo(ProductSizes.SizeRelativePosition)), 
                                        	WorkPacksMakeup.SortBySHP_Work_Packs_Makeup_X1);
                                        
                                        Where.Add(PacksMakeUp.ProductNumber.IsEqualTo(_parent.MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER));
                                        Where.Add(PacksMakeUp.PackCode.IsEqualTo(_parent.MOS_FRA_ORDER_PACKS.PACK_CODE));
                                        OrderBy = PacksMakeUp.SortByWAR_Pack_MakeUp_X1;
                                        
                                        #region Columns
                                        
                                        Columns.Add(PacksMakeUp.ProductNumber);
                                        Columns.Add(PacksMakeUp.PackCode);
                                        Columns.Add(PacksMakeUp.ColourCode);
                                        Columns.Add(PacksMakeUp.SizeCode);
                                        Columns.Add(PacksMakeUp.ItemsInPack);
                                        
                                        Columns.Add(ProductSizes.ProductNumber);
                                        Columns.Add(ProductSizes.SizeCode);
                                        Columns.Add(ProductSizes.SizeRelativePosition);
                                        
                                        Columns.Add(WorkPacksMakeup.ProductNumber);
                                        Columns.Add(WorkPacksMakeup.PackCode);
                                        Columns.Add(WorkPacksMakeup.ColourCode);
                                        Columns.Add(WorkPacksMakeup.SizeCode).BindValue(PacksMakeUp.SizeCode);
                                        Columns.Add(WorkPacksMakeup.SizeRelPosition);
                                        Columns.Add(WorkPacksMakeup.ItemsInPack).BindValue(PacksMakeUp.ItemsInPack);
                                        #endregion
                                    }
                                    
                                    /// <summary>Seq Pack Makeup</summary>
                                    internal void Run()
                                    {
                                        Execute();
                                    }
                                    protected override void OnLoad()
                                    {
                                        RowLocking = LockingStrategy.OnUserEdit;
                                        TransactionScope = TransactionScopes.RowLocking;
                                        KeepChildRelationCacheAlive = true;
                                        KeepViewVisibleAfterExit = true;
                                    }
                                    protected override void OnEnd()
                                    {
                                        Cached<PackMakeUp>().Run();
                                    }
                                    
                                    
                                    
                                    /// <summary>Pack Make Up(P#400.1.1.1.1.3.8.1.1)</summary>
                                    // Last change before Migration: 25/01/2013 14:13:03
                                    internal class PackMakeUp : Mos.BusinessProcessBase 
                                    {
                                        
                                        #region Models
                                        
                                        /// <summary>Work Packs Makeup</summary>
                                        internal readonly Models.WorkPacksMakeup WorkPacksMakeup = new Models.WorkPacksMakeup { AllowRowLocking = true };
                                        
                                        /// <summary>Colour</summary>
                                        internal readonly Models.Colour Colour = new Models.Colour { ReadOnly = true };
                                        
                                        /// <summary>Size</summary>
                                        readonly Models.Size1 Size1 = new Models.Size1 { ReadOnly = true };
                                        
                                        /// <summary>Products By Style</summary>
                                        readonly Models.ProductsByStyle ProductsByStyle = new Models.ProductsByStyle { ReadOnly = true };
                                        
                                        /// <summary>Style Specification</summary>
                                        readonly Models.StyleSpecification StyleSpecification = new Models.StyleSpecification { ReadOnly = true };
                                        
                                        /// <summary>Product Pack Codes</summary>
                                        internal readonly Models.ProductPackCodes ProductPackCodes = new Models.ProductPackCodes { ReadOnly = true };
                                        #endregion
                                        
                                        #region Columns
                                        
                                        /// <summary>v:Total Items Order Pack</summary>
                                        internal readonly NumberColumn vTotalItemsOrderPack = new NumberColumn("v:Total Items Order Pack", "6");
                                        
                                        /// <summary>v:Total Items Pack Make Up</summary>
                                        internal readonly NumberColumn vTotalItemsPackMakeUp = new NumberColumn("v:Total Items Pack Make Up", "6");
                                        #endregion
                                        
                                        #region Printing Layouts
                                        Printing.OrderPrintPo1537PackMakeUp3 _layout;
                                        #endregion
                                        
                                        internal SeqPackMakeup _parent;
                                        
                                        
                                        /// <summary>Pack Make Up(P#400.1.1.1.1.3.8.1.1)</summary>
                                        public PackMakeUp(SeqPackMakeup parent)
                                        {
                                            _parent = parent;
                                            Title = "Pack Make Up";
                                            InitializeDataView();
                                            _layout = new Printing.OrderPrintPo1537PackMakeUp3(this);
                                            _layout.Layouts.Add(_parent._parent._parent._parent._parent._parent._parent._layout);
                                            _layout.Layouts.Add(_parent._parent._layout);
                                            var WorkPacksMakeupPackCodeGroup = Groups.Add(WorkPacksMakeup.PackCode);
                                            WorkPacksMakeupPackCodeGroup.Leave += WorkPacksMakeupPackCodeGroup_Leave;
                                        }
                                        void InitializeDataView()
                                        {
                                            From = WorkPacksMakeup;
                                            Relations.Add(Colour, 
                                            		Colour.ColourCode.IsEqualTo(WorkPacksMakeup.ColourCode), 
                                            	Colour.SortByREF_Colour_X1);
                                            
                                            Relations.Add(Size1, 
                                            		Size1.SizeCode.IsEqualTo(WorkPacksMakeup.SizeCode), 
                                            	Size1.SortByREF_Size_X1);
                                            
                                            Relations.Add(ProductsByStyle, 
                                            		ProductsByStyle.ProductNumber.IsEqualTo(WorkPacksMakeup.ProductNumber), 
                                            	ProductsByStyle.SortBySHP_Products_By_Style_X2);
                                            
                                            Relations.Add(StyleSpecification, 
                                            		StyleSpecification.STYLE_CODE.IsEqualTo(ProductsByStyle.StyleCode), 
                                            	StyleSpecification.SortBySHP_STYLE_SPECIFICATION_X1);
                                            
                                            Relations.Add(ProductPackCodes, 
                                            		ProductPackCodes.ProductNumber.IsEqualTo(_parent._parent.MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER).And(
                                            		ProductPackCodes.PackCode.IsEqualTo(_parent._parent.MOS_FRA_ORDER_PACKS.PACK_CODE)), 
                                            	ProductPackCodes.SortBySHP_Product_Pack_Codes_X2);
                                            
                                            Where.Add(WorkPacksMakeup.ProductNumber.IsEqualTo(_parent._parent.MOS_FRA_ORDER_PACKS.PRODUCT_NUMBER));
                                            Where.Add(WorkPacksMakeup.PackCode.IsEqualTo(_parent._parent.MOS_FRA_ORDER_PACKS.PACK_CODE));
                                            OrderBy = WorkPacksMakeup.SortBySHP_Work_Packs_Makeup_X1;
                                            
                                            #region Columns
                                            
                                            Columns.Add(WorkPacksMakeup.ProductNumber);
                                            Columns.Add(WorkPacksMakeup.PackCode);
                                            Columns.Add(WorkPacksMakeup.ColourCode);
                                            Columns.Add(Colour.ColourCode);
                                            Columns.Add(Colour.ColourDescription);
                                            Columns.Add(WorkPacksMakeup.SizeCode);
                                            Columns.Add(Size1.SizeCode);
                                            Columns.Add(Size1.SizeDescription);
                                            Columns.Add(Size1.FullDescription);
                                            Columns.Add(WorkPacksMakeup.SizeRelPosition);
                                            Columns.Add(WorkPacksMakeup.ItemsInPack);
                                            // virtuals to calculate total items from Order Pack and Pack Make Up
                                            Columns.Add(vTotalItemsOrderPack);
                                            Columns.Add(vTotalItemsPackMakeUp);
                                            
                                            Columns.Add(ProductsByStyle.ProductNumber);
                                            Columns.Add(ProductsByStyle.StyleCode);
                                            
                                            Columns.Add(StyleSpecification.STYLE_CODE);
                                            Columns.Add(StyleSpecification.POLYBAG_MULTI_PACKS);
                                            
                                            Columns.Add(ProductPackCodes.ProductNumber);
                                            Columns.Add(ProductPackCodes.PackCode);
                                            Columns.Add(ProductPackCodes.PolyBag);
                                            #endregion
                                        }
                                        
                                        /// <summary>Pack Make Up</summary>
                                        internal void Run()
                                        {
                                            Execute();
                                        }
                                        protected override void OnLoad()
                                        {
                                            TransactionScope = TransactionScopes.Task;
                                            _layout.Reset();
                                        }
                                        protected override void OnEnterRow()
                                        {
                                            vTotalItemsOrderPack.Value = 0;
                                            vTotalItemsPackMakeUp.Value = 0;
                                        }
                                        protected override void OnLeaveRow()
                                        {
                                            vTotalItemsOrderPack.Value = _parent._parent.MOS_FRA_ORDER_PACKS.QTY_OF_PACKS * _parent._parent.OrderLotPacks.QuantityInPack;
                                            vTotalItemsPackMakeUp.Value = _parent._parent.MOS_FRA_ORDER_PACKS.QTY_OF_PACKS * WorkPacksMakeup.ItemsInPack;
                                            // Update Footer Totals in Parent with 'Total Item' Line Totals on Print
                                            _parent._parent.vFooterTotalPackMakeUp.Value += vTotalItemsPackMakeUp;
                                            _parent._parent.vFooterTotalItemsOrderPack.Value = _parent._parent.vFooterTotalPackMakeUp;
                                            // Output each line of the Pack Make Up Report
                                            if(_parent._parent.MOS_FRA_ORDER_PACKS.QTY_OF_PACKS > 0)
                                            {
                                                _layout.PackMakeUp2.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        void WorkPacksMakeupPackCodeGroup_Leave()
                                        {
                                            // Output a line after each change of PAck Code if the quantity for
                                            // the Pack Code is greater than 0
                                            if(_parent._parent.MOS_FRA_ORDER_PACKS.QTY_OF_PACKS > 0)
                                            {
                                                _layout.PackCodeDividingLine.WriteTo(_parent._parent._parent._parent._parent._parent._parent._ioOrderReport);
                                            }
                                        }
                                        
                                        #region Expressions
                                        internal Bool Exp_1()
                                        {
                                            return _parent._parent._parent._parent._parent._parent._parent._parent.pReportType == "L";
                                        }
                                        internal Date Exp_2()
                                        {
                                            return u.If(_parent._parent._parent._parent._parent._parent.vUKForeignSupplier == "014" && _parent._parent._parent._parent._parent._parent.Orders.TERMS_OF_DELIVERY != "FD", _parent._parent.Lot.SHIPPING_DATE_LATEST, _parent._parent.Lot.DELIVERY_DATE);
                                        }
                                        internal Bool Exp_11()
                                        {
                                            return Counter == 1;
                                        }
                                        internal Text Exp_16()
                                        {
                                            return u.If(u.Trim(Size1.FullDescription) != "", u.Trim(Size1.FullDescription), u.Trim(Size1.SizeDescription));
                                        }
                                        #endregion
                                        
                                        
                                    }
                                }
                            }
                            
                            /// <summary>Clear Franch Pack Totals(P#400.1.1.1.1.3.9)</summary>
                            // Last change before Migration: 01/06/2012 10:48:26
                            class ClearFranchPackTotals : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                
                                /// <summary>Franch Pack Totals Wrk</summary>
                                readonly Models.FranchPackTotalsWrk FranchPackTotalsWrk = new Models.FranchPackTotalsWrk { AllowRowLocking = true };
                                #endregion
                                
                                
                                /// <summary>Clear Franch Pack Totals(P#400.1.1.1.1.3.9)</summary>
                                public ClearFranchPackTotals()
                                {
                                    Title = "Clear Franch Pack Totals";
                                    InitializeDataView();
                                }
                                void InitializeDataView()
                                {
                                    From = FranchPackTotalsWrk;
                                    OrderBy = FranchPackTotalsWrk.SortByMOS_FRA_PACK_TOTALS_X1;
                                    
                                    #region Columns
                                    
                                    Columns.Add(FranchPackTotalsWrk.OrderNumber);
                                    #endregion
                                }
                                
                                /// <summary>Clear Franch Pack Totals</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    Activity = Activities.Delete;
                                    AllowUserAbort = true;
                                }
                                
                                
                            }
                            
                            /// <summary>Get Franch Pack Totals(P#400.1.1.1.1.3.10)</summary>
                            // Last change before Migration: 31/05/2012 12:33:03
                            class GetFranchPackTotals : Mos.BusinessProcessBase 
                            {
                                
                                #region Models
                                DynamicSQLEntity sqlEntity;
                                
                                /// <summary>Franch Pack Totals Wrk</summary>
                                readonly Models.FranchPackTotalsWrk FranchPackTotalsWrk = new Models.FranchPackTotalsWrk { AllowRowLocking = true };
                                #endregion
                                
                                #region Columns
                                
                                /// <summary>MACKAYS_ORDER_NUMBER</summary>
                                readonly NumberColumn MACKAYS_ORDER_NUMBER = new NumberColumn("MACKAYS_ORDER_NUMBER", "N6")
                                {
                                	AllowNull = false
                                };
                                
                                /// <summary>PRODUCT_NUMBER</summary>
                                readonly NumberColumn PRODUCT_NUMBER = new NumberColumn("PRODUCT_NUMBER", "N8")
                                {
                                	AllowNull = false
                                };
                                
                                /// <summary>LOT_NUMBER</summary>
                                readonly TextColumn LOT_NUMBER = new TextColumn("LOT_NUMBER", "2")
                                {
                                	AllowNull = true,
                                	DefaultValue = null
                                };
                                
                                /// <summary>PACK_CODE</summary>
                                readonly TextColumn PACK_CODE = new TextColumn("PACK_CODE", "3")
                                {
                                	AllowNull = true,
                                	DefaultValue = null
                                };
                                
                                /// <summary>COLOUR_CODE</summary>
                                readonly NumberColumn COLOUR_CODE = new NumberColumn("COLOUR_CODE", "N4")
                                {
                                	AllowNull = false
                                };
                                
                                /// <summary>SIZE_CODE</summary>
                                readonly NumberColumn SIZE_CODE = new NumberColumn("SIZE_CODE", "N4")
                                {
                                	AllowNull = false
                                };
                                
                                /// <summary>QTY_OF_PACKS</summary>
                                readonly NumberColumn QTY_OF_PACKS = new NumberColumn("QTY_OF_PACKS", "10.3")
                                {
                                	AllowNull = true,
                                	DefaultValue = null
                                };
                                
                                /// <summary>ITEM_QTY</summary>
                                readonly NumberColumn ITEM_QTY = new NumberColumn("ITEM_QTY", "10.3")
                                {
                                	AllowNull = true,
                                	DefaultValue = null
                                };
                                #endregion
                                
                                LotDetails _parent;
                                
                                
                                /// <summary>Get Franch Pack Totals(P#400.1.1.1.1.3.10)</summary>
                                public GetFranchPackTotals(LotDetails parent)
                                {
                                    _parent = parent;
                                    Title = "Get Franch Pack Totals";
                                    InitializeDataView();
                                }
                                void InitializeDataView()
                                {
                                    sqlEntity = new DynamicSQLEntity(Models.DataSources.MOS, 
@"select t.mackays_order_number,
       t.product_number,
       t.lot_number,
       t.pack_code,
       m.colour_code,
       m.size_code,
       sum(t.qty_of_packs) Qty_Of_Packs,
       sum(t.qty_of_packs * m.items_in_pack) Item_Qty
  from mos_fra_order_packs t, war_pack_makeup m
 where t.product_number = m.product_number
   and t.pack_code = m.pack_code
   and t.mackays_order_number = :1
 group by t.mackays_order_number,
          t.lot_number,
          t.product_number,
          m.colour_code,
          m.size_code,
          t.pack_code
 order by t.lot_number, t.pack_code, m.colour_code, m.size_code");
                                    sqlEntity.AddParameter(_parent._parent._parent._parent._parent.vOrderNumber); //:1;
                                    sqlEntity.Columns.Add(MACKAYS_ORDER_NUMBER, PRODUCT_NUMBER, LOT_NUMBER, PACK_CODE, COLOUR_CODE, SIZE_CODE, QTY_OF_PACKS, ITEM_QTY);
                                    From = sqlEntity;
                                    Relations.Add(FranchPackTotalsWrk, RelationType.Insert, 
                                    	FranchPackTotalsWrk.SortByMOS_FRA_PACK_TOTALS_X1);
                                    
                                    
                                    #region Columns
                                    
                                    Columns.Add(MACKAYS_ORDER_NUMBER);
                                    Columns.Add(PRODUCT_NUMBER);
                                    Columns.Add(LOT_NUMBER);
                                    Columns.Add(PACK_CODE);
                                    Columns.Add(COLOUR_CODE);
                                    Columns.Add(SIZE_CODE);
                                    Columns.Add(QTY_OF_PACKS);
                                    Columns.Add(ITEM_QTY);
                                    
                                    Columns.Add(FranchPackTotalsWrk.OrderNumber).BindValue(MACKAYS_ORDER_NUMBER);
                                    Columns.Add(FranchPackTotalsWrk.ProductNumber).BindValue(PRODUCT_NUMBER);
                                    Columns.Add(FranchPackTotalsWrk.LotNumber).BindValue(LOT_NUMBER);
                                    Columns.Add(FranchPackTotalsWrk.PackCode).BindValue(PACK_CODE);
                                    Columns.Add(FranchPackTotalsWrk.ColourCode).BindValue(COLOUR_CODE);
                                    Columns.Add(FranchPackTotalsWrk.SizeCode).BindValue(SIZE_CODE);
                                    Columns.Add(FranchPackTotalsWrk.PackQty).BindValue(QTY_OF_PACKS);
                                    Columns.Add(FranchPackTotalsWrk.ItemsInPack).BindValue(ITEM_QTY);
                                    #endregion
                                }
                                
                                /// <summary>Get Franch Pack Totals</summary>
                                internal void Run()
                                {
                                    Execute();
                                }
                                protected override void OnLoad()
                                {
                                    AllowUserAbort = true;
                                }
                                
                                
                            }
                        }
                        
                        /// <summary>Zap Temp Table(P#400.1.1.1.1.4)</summary>
                        // Last change before Migration: 11/02/2002 14:13:25
                        class ZapTempTable : Mos.BusinessProcessBase 
                        {
                            
                            #region Models
                            
                            /// <summary>General Work File</summary>
                            readonly Models.GeneralWorkFile GeneralWorkFile = new Models.GeneralWorkFile { AllowRowLocking = true };
                            #endregion
                            
                            
                            /// <summary>Zap Temp Table(P#400.1.1.1.1.4)</summary>
                            public ZapTempTable()
                            {
                                Title = "Zap Temp Table";
                                InitializeDataView();
                            }
                            void InitializeDataView()
                            {
                                From = GeneralWorkFile;
                                Where.Add(GeneralWorkFile.UserId.IsEqualTo(() => u.Upper(ENV.Security.UserManager.CurrentUser.Name)));
                                OrderBy = GeneralWorkFile.SortBySHP_General_Work_X1;
                                
                                #region Columns
                                
                                Columns.Add(GeneralWorkFile.UserId);
                                #endregion
                            }
                            
                            /// <summary>Zap Temp Table</summary>
                            internal void Run()
                            {
                                Execute();
                            }
                            protected override void OnLoad()
                            {
                                RowLocking = LockingStrategy.OnUserEdit;
                                TransactionScope = TransactionScopes.RowLocking;
                                Activity = Activities.Delete;
                                KeepViewVisibleAfterExit = true;
                            }
                            
                            
                        }
                    }
                }
                
                /// <summary>Style Components(P#400.1.1.2)</summary>
                // Last change before Migration: 14/04/2006 12:19:32
                internal class StyleComponents : Mos.BusinessProcessBase 
                {
                    
                    #region Models
                    
                    /// <summary>Style Components</summary>
                    readonly Models.StyleComponents StyleComponents1 = new Models.StyleComponents { ReadOnly = true };
                    #endregion
                    
                    #region Columns
                    
                    /// <summary>v:Component Description</summary>
                    internal readonly TextColumn vComponentDescription = new TextColumn("v:Component Description", "30A");
                    
                    /// <summary>v:Parts and Yarns String</summary>
                    internal readonly TextColumn vPartsAndYarnsString = new TextColumn("v:Parts and Yarns String", "100A");
                    #endregion
                    
                    #region Printing Layouts
                    Printing.OrderPrintPo1537StyleComponents _layout;
                    #endregion
                    
                    OrderDetails _parent;
                    
                    
                    /// <summary>Style Components(P#400.1.1.2)</summary>
                    public StyleComponents(OrderDetails parent)
                    {
                        _parent = parent;
                        Title = "Style Components";
                        InitializeDataView();
                        _layout = new Printing.OrderPrintPo1537StyleComponents(this);
                        _layout.Layouts.Add(_parent._parent._layout);
                    }
                    void InitializeDataView()
                    {
                        From = StyleComponents1;
                        Where.Add(StyleComponents1.StyleCode.IsEqualTo(_parent.StyleSpecification.STYLE_CODE));
                        OrderBy = StyleComponents1.SortBySHP_Style_Components_X1;
                        
                        #region Columns
                        
                        Columns.Add(StyleComponents1.StyleCode);
                        Columns.Add(StyleComponents1.StyleComponentSequence);
                        Columns.Add(StyleComponents1.StyleComponent);
                        
                        // Component Virtual not visible on Form if = Single or Main Product
                        Columns.Add(vComponentDescription);
                        Columns.Add(vPartsAndYarnsString);
                        #endregion
                    }
                    
                    /// <summary>Style Components</summary>
                    internal void Run()
                    {
                        Execute();
                    }
                    protected override void OnLoad()
                    {
                        TransactionScope = TransactionScopes.Task;
                        _layout.Reset();
                    }
                    protected override void OnStart()
                    {
                        _layout.CompositionHeader.WriteTo(_parent._parent._ioOrderReport);
                    }
                    protected override void OnLeaveRow()
                    {
                        // Update virtual string with Component Description
                        vComponentDescription.Value = u.Trim(StyleComponents1.StyleComponent);
                        Cached<StyleParts>().Run();
                    }
                    
                    #region Expressions
                    internal Bool Exp_3()
                    {
                        return vComponentDescription != "Single Product" && vComponentDescription != "Main Product";
                    }
                    #endregion
                    
                    
                    
                    /// <summary>Style Parts(P#400.1.1.2.1)</summary>
                    // Last change before Migration: 14/04/2006 12:19:32
                    class StyleParts : Mos.BusinessProcessBase 
                    {
                        
                        #region Models
                        
                        /// <summary>Style Parts</summary>
                        readonly Models.StyleParts StyleParts1 = new Models.StyleParts { ReadOnly = true };
                        
                        /// <summary>Parts</summary>
                        readonly Models.Parts Parts = new Models.Parts { ReadOnly = true };
                        #endregion
                        
                        StyleComponents _parent;
                        
                        
                        /// <summary>Style Parts(P#400.1.1.2.1)</summary>
                        public StyleParts(StyleComponents parent)
                        {
                            _parent = parent;
                            Title = "Style Parts";
                            InitializeDataView();
                        }
                        void InitializeDataView()
                        {
                            From = StyleParts1;
                            Relations.Add(Parts, 
                            		Parts.PartCode.IsEqualTo(StyleParts1.StylePartCode), 
                            	Parts.SortBySHP_Parts_X1);
                            
                            Where.Add(StyleParts1.StyleCode.IsEqualTo(_parent.StyleComponents1.StyleCode));
                            Where.Add(StyleParts1.StyleComponentSequence.IsEqualTo(_parent.StyleComponents1.StyleComponentSequence));
                            OrderBy = StyleParts1.SortBySHP_Style_Parts_X1;
                            
                            #region Columns
                            
                            Columns.Add(StyleParts1.StyleCode);
                            Columns.Add(StyleParts1.StyleComponentSequence);
                            Columns.Add(StyleParts1.StylePartCode);
                            Columns.Add(Parts.PartCode);
                            Columns.Add(Parts.PartDescription);
                            #endregion
                        }
                        
                        /// <summary>Style Parts</summary>
                        internal void Run()
                        {
                            Execute();
                        }
                        protected override void OnLoad()
                        {
                            TransactionScope = TransactionScopes.Task;
                        }
                        protected override void OnEnterRow()
                        {
                            _parent.vPartsAndYarnsString.Value = "";
                        }
                        protected override void OnLeaveRow()
                        {
                            // Do not put Part Name into Parts & Yarn String if = Whole Product
                            if(u.Trim(Parts.PartDescription) != "Whole Product")
                            {
                                _parent.vPartsAndYarnsString.Value = u.Trim(u.Trim(_parent.vPartsAndYarnsString) + " " + u.Trim(Parts.PartDescription));
                            }
                            Cached<StyleYarns>().Run();
                            _parent._layout.StyleYarnDescriptions13.WriteTo(_parent._parent._parent._ioOrderReport);
                        }
                        
                        
                        
                        /// <summary>Style Yarns(P#400.1.1.2.1.1)</summary>
                        // Last change before Migration: 14/04/2006 12:19:32
                        class StyleYarns : Mos.BusinessProcessBase 
                        {
                            
                            #region Models
                            
                            /// <summary>Style Yarns</summary>
                            readonly Models.StyleYarns StyleYarns1 = new Models.StyleYarns { ReadOnly = true };
                            
                            /// <summary>Yarns</summary>
                            readonly Models.Yarns Yarns = new Models.Yarns { ReadOnly = true };
                            #endregion
                            
                            StyleParts _parent;
                            
                            
                            /// <summary>Style Yarns(P#400.1.1.2.1.1)</summary>
                            public StyleYarns(StyleParts parent)
                            {
                                _parent = parent;
                                Title = "Style Yarns";
                                InitializeDataView();
                            }
                            void InitializeDataView()
                            {
                                From = StyleYarns1;
                                Relations.Add(Yarns, 
                                		Yarns.YarnCode.IsEqualTo(StyleYarns1.StyleYarnCode), 
                                	Yarns.SortBySHP_Yarns_X1);
                                
                                Where.Add(StyleYarns1.StyleCode.IsEqualTo(_parent.StyleParts1.StyleCode));
                                Where.Add(StyleYarns1.StyleComponentSequence.IsEqualTo(_parent.StyleParts1.StyleComponentSequence));
                                Where.Add(StyleYarns1.StylePartCode.IsEqualTo(_parent.StyleParts1.StylePartCode));
                                OrderBy = StyleYarns1.SortBySHP_Style_Yarns_X2;
                                
                                #region Columns
                                
                                Columns.Add(StyleYarns1.StyleCode);
                                Columns.Add(StyleYarns1.StyleComponentSequence);
                                Columns.Add(StyleYarns1.StylePartCode);
                                Columns.Add(StyleYarns1.YarnPercentage);
                                Columns.Add(StyleYarns1.StyleYarnCode);
                                Columns.Add(Yarns.YarnCode);
                                Columns.Add(Yarns.YarnDescription);
                                #endregion
                            }
                            
                            /// <summary>Style Yarns</summary>
                            internal void Run()
                            {
                                Execute();
                            }
                            protected override void OnLoad()
                            {
                                TransactionScope = TransactionScopes.Task;
                            }
                            protected override void OnLeaveRow()
                            {
                                if(u.Right(u.Str(StyleYarns1.YarnPercentage, "###.##"), 2) != "00")
                                {
                                    _parent._parent.vPartsAndYarnsString.Value = u.Trim(u.Trim(_parent._parent.vPartsAndYarnsString) + " " + u.Str(StyleYarns1.YarnPercentage, "###.##") + "%" + " " + u.Trim(Yarns.YarnDescription));
                                }
                                if(u.Right(u.Str(StyleYarns1.YarnPercentage, "###.##"), 2) == "00")
                                {
                                    _parent._parent.vPartsAndYarnsString.Value = u.Trim(u.Trim(_parent._parent.vPartsAndYarnsString) + " " + u.Str(StyleYarns1.YarnPercentage, "###") + "%" + " " + u.Trim(Yarns.YarnDescription));
                                }
                            }
                            
                            
                        }
                    }
                }
                
                /// <summary>Order Certificates(P#400.1.1.3)</summary>
                // Last change before Migration: 02/12/2010 11:26:11
                class OrderCertificates : Mos.BusinessProcessBase 
                {
                    
                    #region Models
                    
                    /// <summary>Orders</summary>
                    readonly Models.Orders Orders = new Models.Orders { ReadOnly = true };
                    #endregion
                    
                    #region Columns
                    
                    /// <summary>v:no of loops to de-limit comma</summary>
                    readonly NumberColumn vNoOfLoopsToDeLimitComma = new NumberColumn("v:no of loops to de-limit comma", "1");
                    #endregion
                    
                    OrderDetails _parent;
                    
                    
                    /// <summary>Order Certificates(P#400.1.1.3)</summary>
                    public OrderCertificates(OrderDetails parent)
                    {
                        _parent = parent;
                        Title = "Order Certificates";
                        InitializeDataView();
                    }
                    void InitializeDataView()
                    {
                        From = Orders;
                        Where.Add(Orders.ORDER_NUMBER.IsEqualTo(_parent._parent.vOrderNumber));
                        OrderBy = Orders.SortBySHP_ORDERS_X1;
                        
                        #region Columns
                        
                        Columns.Add(Orders.ORDER_NUMBER);
                        Columns.Add(Orders.COFO_CERT_REQD);
                        Columns.Add(Orders.EXPORT_LIC_REQD);
                        Columns.Add(Orders.INSPECTION_CERT_REQD);
                        Columns.Add(Orders.GSP_CERT_REQD);
                        Columns.Add(Orders.EUR_CERT_REQD);
                        Columns.Add(Orders.ATR_CERT_REQD);
                        
                        Columns.Add(vNoOfLoopsToDeLimitComma);
                        #endregion
                    }
                    
                    /// <summary>Order Certificates</summary>
                    internal void Run()
                    {
                        Execute();
                    }
                    protected override void OnLoad()
                    {
                        TransactionScope = TransactionScopes.Task;
                    }
                    protected override void OnLeaveRow()
                    {
                        vNoOfLoopsToDeLimitComma.Value = Counter;
                        _parent.vCertificateString1.Value = u.Trim(_parent.vCertificateString1) + u.Trim(u.If(Orders.COFO_CERT_REQD == "Y", "CO ", "") + u.If(Orders.GSP_CERT_REQD == "Y", "GSP ", "") + u.If(Orders.EUR_CERT_REQD == "Y", "EUR ", "") + u.If(Orders.ATR_CERT_REQD == "Y", "ATR ", ""));
                        _parent.vCertificateString2.Value = u.Trim(_parent.vCertificateString2) + u.Trim(u.If(Orders.INSPECTION_CERT_REQD == "Y", "Inspection ", "") + u.If(Orders.INSPECTION_CERT_REQD == "Y" && Orders.EXPORT_LIC_REQD == "Y", ",", "") + u.If(Orders.EXPORT_LIC_REQD == "Y", " Export Licence", ""));
                    }
                    protected override void OnEnd()
                    {
                        Cached<MFACats>().Run();
                        Cached<HSCodes>().Run();
                    }
                    
                    
                    
                    /// <summary>MFA Cats(P#400.1.1.3.1)</summary>
                    // Last change before Migration: 30/06/2010 12:22:43
                    class MFACats : Mos.BusinessProcessBase 
                    {
                        
                        #region Models
                        
                        /// <summary>Order MFA Cats</summary>
                        readonly Models.OrderMFACats OrderMFACats = new Models.OrderMFACats { ReadOnly = true };
                        #endregion
                        
                        OrderCertificates _parent;
                        
                        
                        /// <summary>MFA Cats(P#400.1.1.3.1)</summary>
                        public MFACats(OrderCertificates parent)
                        {
                            _parent = parent;
                            Title = "MFA Cats";
                            InitializeDataView();
                        }
                        void InitializeDataView()
                        {
                            From = OrderMFACats;
                            Where.Add(OrderMFACats.OrderNumber.IsEqualTo(_parent._parent._parent.vOrderNumber));
                            OrderBy = OrderMFACats.SortBySHP_Order_MFA_Cats_X1;
                            
                            #region Columns
                            
                            Columns.Add(OrderMFACats.OrderNumber);
                            Columns.Add(OrderMFACats.MFACategoryCode);
                            #endregion
                        }
                        
                        /// <summary>MFA Cats</summary>
                        internal void Run()
                        {
                            Execute();
                        }
                        protected override void OnLoad()
                        {
                            TransactionScope = TransactionScopes.Task;
                        }
                        protected override void OnLeaveRow()
                        {
                            _parent._parent.vMFACats.Value = u.Trim(u.Trim(_parent._parent.vMFACats) + u.Str(OrderMFACats.MFACategoryCode, "##### "));
                        }
                        
                        
                    }
                    
                    /// <summary>HS Codes(P#400.1.1.3.2)</summary>
                    // Last change before Migration: 02/12/2010 11:26:11
                    class HSCodes : Mos.BusinessProcessBase 
                    {
                        
                        #region Models
                        
                        /// <summary>OrdLotCommodity</summary>
                        readonly Models.OrdLotCommodity OrdLotCommodity = new Models.OrdLotCommodity { ReadOnly = true };
                        #endregion
                        
                        OrderCertificates _parent;
                        
                        
                        /// <summary>HS Codes(P#400.1.1.3.2)</summary>
                        public HSCodes(OrderCertificates parent)
                        {
                            _parent = parent;
                            Title = "HS Codes";
                            InitializeDataView();
                        }
                        void InitializeDataView()
                        {
                            From = OrdLotCommodity;
                            Where.Add(OrdLotCommodity.OrderNumber.IsEqualTo(_parent._parent._parent.vOrderNumber));
                            Where.Add(OrdLotCommodity.LotNumber.IsEqualTo("1"));
                            OrderBy = OrdLotCommodity.SortBySHP_Order_Lot_Comm_X1;
                            
                            #region Columns
                            
                            Columns.Add(OrdLotCommodity.OrderNumber);
                            Columns.Add(OrdLotCommodity.LotNumber);
                            Columns.Add(OrdLotCommodity.CommodityCode);
                            #endregion
                        }
                        
                        /// <summary>HS Codes</summary>
                        internal void Run()
                        {
                            Execute();
                        }
                        protected override void OnLoad()
                        {
                            TransactionScope = TransactionScopes.Task;
                        }
                        protected override void OnLeaveRow()
                        {
                            _parent._parent.vHSCodes.Value = u.Trim(_parent._parent.vHSCodes) + " " + u.Left(OrdLotCommodity.CommodityCode, 6);
                        }
                        
                        
                    }
                }
                
                /// <summary>Style Construction(P#400.1.1.4)</summary>
                // Last change before Migration: 08/11/2006 11:42:12
                class StyleConstruction : Mos.BusinessProcessBase 
                {
                    
                    #region Models
                    
                    /// <summary>Style Components</summary>
                    readonly Models.StyleComponents StyleComponents = new Models.StyleComponents { ReadOnly = true };
                    #endregion
                    
                    OrderDetails _parent;
                    
                    
                    /// <summary>Style Construction(P#400.1.1.4)</summary>
                    public StyleConstruction(OrderDetails parent)
                    {
                        _parent = parent;
                        Title = "Style Construction";
                        InitializeDataView();
                    }
                    void InitializeDataView()
                    {
                        From = StyleComponents;
                        Where.Add(StyleComponents.StyleCode.IsEqualTo(_parent.ProductsByStyle.StyleCode));
                        OrderBy = StyleComponents.SortBySHP_Style_Components_X1;
                        
                        #region Columns
                        
                        // Build Style Construction String for Supplier Details in Parent Task
                        Columns.Add(StyleComponents.StyleCode);
                        Columns.Add(StyleComponents.ComponentConstruction);
                        #endregion
                    }
                    
                    /// <summary>Style Construction</summary>
                    internal void Run()
                    {
                        Execute();
                    }
                    protected override void OnLoad()
                    {
                        TransactionScope = TransactionScopes.Task;
                    }
                    protected override void OnLeaveRow()
                    {
                        // Only Update the String if the Component Construction Type is
                        // the first occurence. ie Knitted, Woven or Other appear only once each
                        if(u.InStr(_parent.vStyleConstructionString, u.If(StyleComponents.ComponentConstruction == "K", "Knitted", u.If(StyleComponents.ComponentConstruction == "O", "Other", "Woven"))) == 0)
                        {
                            _parent.vStyleConstructionString.Value = u.Trim(u.Trim(_parent.vStyleConstructionString) + "  " + u.Trim(u.If(StyleComponents.ComponentConstruction == "K", "Knitted", u.If(StyleComponents.ComponentConstruction == "O", "Other", "Woven"))));
                        }
                    }
                    
                    
                }
                
                /// <summary>Multiple Packing Methods?(P#400.1.1.5)</summary>
                // Last change before Migration: 22/02/2010 14:56:27
                class MultiplePackingMethods : Mos.BusinessProcessBase 
                {
                    
                    #region Models
                    
                    /// <summary>Lot</summary>
                    readonly Models.Lot Lot = new Models.Lot { AllowRowLocking = true };
                    #endregion
                    
                    #region Columns
                    
                    /// <summary>v:Previous Packing Method</summary>
                    readonly TextColumn vPreviousPackingMethod = new TextColumn("v:Previous Packing Method", "U2");
                    #endregion
                    
                    OrderDetails _parent;
                    
                    
                    /// <summary>Multiple Packing Methods?(P#400.1.1.5)</summary>
                    public MultiplePackingMethods(OrderDetails parent)
                    {
                        _parent = parent;
                        Title = "Multiple Packing Methods?";
                        InitializeDataView();
                    }
                    void InitializeDataView()
                    {
                        From = Lot;
                        Where.Add(Lot.ORDER_NUMBER.IsEqualTo(_parent._parent._parent.pOrder));
                        OrderBy = Lot.SortBySHP_LOTS_X1;
                        
                        #region Columns
                        
                        Columns.Add(Lot.ORDER_NUMBER);
                        Columns.Add(Lot.LOT_NUMBER);
                        Columns.Add(Lot.BOXED_BH_OR_HANGING);
                        
                        Columns.Add(vPreviousPackingMethod);
                        #endregion
                    }
                    
                    /// <summary>Multiple Packing Methods?</summary>
                    internal void Run()
                    {
                        Execute();
                    }
                    protected override void OnLoad()
                    {
                        Exit(ExitTiming.BeforeRow, () => _parent.vMultiplePackingMethods);
                        AllowUserAbort = true;
                        KeepViewVisibleAfterExit = true;
                    }
                    protected override void OnLeaveRow()
                    {
                        if(u.Trim(Lot.BOXED_BH_OR_HANGING) != u.Trim(vPreviousPackingMethod) && Counter > 1)
                        {
                            _parent.vMultiplePackingMethods.Value = true;
                        }
                        
                        vPreviousPackingMethod.Value = u.Trim(Lot.BOXED_BH_OR_HANGING);
                    }
                    
                    
                }
                
                /// <summary>Packing Method1 - B/BH/H(P#400.1.1.6)</summary>
                // Last change before Migration: 05/09/2012 15:02:58
                internal class PackingMethod1BBHH : Mos.BusinessProcessBase 
                {
                    
                    #region Models
                    
                    /// <summary>Multiple Hangers Workfile</summary>
                    internal readonly Models.MultipleHangersWorkfile MultipleHangersWorkfile = new Models.MultipleHangersWorkfile { AllowRowLocking = true };
                    #endregion
                    
                    #region Columns
                    
                    /// <summary>v:Hanger Count</summary>
                    readonly NumberColumn vHangerCount = new NumberColumn("v:Hanger Count", "2");
                    
                    /// <summary>v:Hanger Codes</summary>
                    readonly TextColumn vHangerCodes = new TextColumn("v:Hanger Codes", "100");
                    
                    /// <summary>v:Packing Method</summary>
                    readonly TextColumn vPackingMethod = new TextColumn("v:Packing Method", "U2");
                    #endregion
                    
                    #region Printing Layouts
                    Printing.OrderPrintPo1537PackingMethod1BBHH _layout;
                    #endregion
                    
                    OrderDetails _parent;
                    
                    
                    /// <summary>Packing Method1 - B/BH/H(P#400.1.1.6)</summary>
                    public PackingMethod1BBHH(OrderDetails parent)
                    {
                        _parent = parent;
                        Title = "Packing Method1 - B/BH/H";
                        InitializeDataView();
                        _layout = new Printing.OrderPrintPo1537PackingMethod1BBHH(this);
                        _layout.Layouts.Add(_parent._parent._layout);
                    }
                    void InitializeDataView()
                    {
                        From = MultipleHangersWorkfile;
                        Where.Add(MultipleHangersWorkfile.OrderNumber.IsEqualTo(_parent._parent._parent.pOrder));
                        OrderBy = MultipleHangersWorkfile.SortByMULTI_HANGERS_X1;
                        
                        #region Columns
                        
                        Columns.Add(vHangerCount);
                        Columns.Add(vHangerCodes);
                        Columns.Add(vPackingMethod);
                        
                        Columns.Add(MultipleHangersWorkfile.OrderNumber);
                        Columns.Add(MultipleHangersWorkfile.HangerCode);
                        Columns.Add(MultipleHangersWorkfile.HangerDescription);
                        #endregion
                    }
                    
                    /// <summary>Packing Method1 - B/BH/H</summary>
                    internal void Run()
                    {
                        Execute();
                    }
                    protected override void OnLoad()
                    {
                        RowLocking = LockingStrategy.OnRowLoading;
                        TransactionScope = TransactionScopes.Task;
                        AllowUserAbort = true;
                        _layout.Reset();
                    }
                    protected override void OnStart()
                    {
                        _layout.HangerDetailsHeader.WriteTo(_parent._parent._ioOrderReport);
                        Cached<ClearWorkfile>().Run();
                        Cached<GetHangerCodes>().Run();
                        Cached<ReadThroughHangerCodes>().Run();
                    }
                    protected override void OnLeaveRow()
                    {
                        _layout.DeliveryDetailsBBHH.WriteTo(_parent._parent._ioOrderReport);
                    }
                    
                    #region Expressions
                    internal Bool Exp_1()
                    {
                        return vPackingMethod != "B";
                    }
                    internal Text Exp_2()
                    {
                        return u.If(u.Not(_parent._parent._parent.pFranchiseOrder), u.If(vPackingMethod == "B", "Boxed", u.If(vPackingMethod == "H", "Hanging", "Boxed Hanging")), u.If(vPackingMethod == "B", "Boxed", u.If(vPackingMethod == "H", "Boxed Hanging", "Boxed Hanging")));
                    }
                    internal Bool Exp_3()
                    {
                        return vPackingMethod == "B";
                    }
                    internal Bool Exp_5()
                    {
                        return _parent.StyleSpecification.SIZE_SPEC_CODE == "" && _parent._parent.vReportPart == 3;
                    }
                    internal Bool Exp_6()
                    {
                        return _parent.StyleSpecification.IN_OUT_BOXING == "Y";
                    }
                    #endregion
                    
                    
                    
                    /// <summary>Read through Hanger Codes(P#400.1.1.6.1)</summary>
                    // Last change before Migration: 06/07/2006 11:31:38
                    class ReadThroughHangerCodes : Mos.BusinessProcessBase 
                    {
                        
                        #region Models
                        
                        /// <summary>Hanger Codes</summary>
                        readonly Models.HangerCodes HangerCodes = new Models.HangerCodes { ReadOnly = true };
                        
                        /// <summary>Multiple Hangers Workfile</summary>
                        readonly Models.MultipleHangersWorkfile MultipleHangersWorkfile = new Models.MultipleHangersWorkfile { AllowRowLocking = true };
                        #endregion
                        
                        #region Columns
                        
                        /// <summary>v:this task - counter</summary>
                        readonly NumberColumn vThisTaskCounter = new NumberColumn("v:this task - counter", "2");
                        #endregion
                        
                        PackingMethod1BBHH _parent;
                        
                        
                        /// <summary>Read through Hanger Codes(P#400.1.1.6.1)</summary>
                        public ReadThroughHangerCodes(PackingMethod1BBHH parent)
                        {
                            _parent = parent;
                            Title = "Read through Hanger Codes";
                            InitializeDataView();
                        }
                        void InitializeDataView()
                        {
                            Relations.Add(HangerCodes, 
                            		HangerCodes.DepartmentCode.IsEqualTo(_parent._parent.StyleSpecification.DSS_DEPARTMENT_CODE).And(
                            		HangerCodes.SubdeptCode.IsEqualTo(_parent._parent.StyleSpecification.DSS_SUB_DEPT_CODE)).And(
                            		HangerCodes.SectionCode.IsEqualTo(_parent._parent.StyleSpecification.DSS_SECTION_CODE)).And(
                            		HangerCodes.HangerCode.IsEqualTo(() => u.StrToken(_parent.vHangerCodes, vThisTaskCounter, ","))), 
                            	HangerCodes.SortByMOS_HANGER_CODS_X1);
                            
                            Relations.Add(MultipleHangersWorkfile, RelationType.Insert, 
                            	MultipleHangersWorkfile.SortByMULTI_HANGERS_X1);
                            
                            
                            #region Columns
                            
                            Columns.Add(vThisTaskCounter);
                            
                            Columns.Add(HangerCodes.DepartmentCode);
                            Columns.Add(HangerCodes.SubdeptCode);
                            Columns.Add(HangerCodes.SectionCode);
                            Columns.Add(HangerCodes.HangerCode);
                            Columns.Add(HangerCodes.HangerDescription);
                            
                            Columns.Add(MultipleHangersWorkfile.OrderNumber).BindValue(_parent._parent._parent._parent.pOrder);
                            Columns.Add(MultipleHangersWorkfile.HangerCode).BindValue(() => u.StrToken(_parent.vHangerCodes, vThisTaskCounter, ","));
                            Columns.Add(MultipleHangersWorkfile.HangerDescription).BindValue(HangerCodes.HangerDescription);
                            #endregion
                        }
                        
                        /// <summary>Read through Hanger Codes</summary>
                        internal void Run()
                        {
                            Execute();
                        }
                        protected override void OnLoad()
                        {
                            Exit(ExitTiming.AfterRow, () => vThisTaskCounter == _parent.vHangerCount);
                            RowLocking = LockingStrategy.OnRowLoading;
                            TransactionScope = TransactionScopes.Task;
                            AllowUserAbort = true;
                        }
                        protected override void OnLeaveRow()
                        {
                            vThisTaskCounter.Value++;
                        }
                        
                        
                    }
                    
                    /// <summary>Get Hanger codes(P#400.1.1.6.2)</summary>
                    // Last change before Migration: 07/07/2006 09:47:13
                    class GetHangerCodes : Mos.BusinessProcessBase 
                    {
                        
                        #region Models
                        
                        /// <summary>Style Specification</summary>
                        readonly Models.StyleSpecification StyleSpecification = new Models.StyleSpecification { ReadOnly = true };
                        #endregion
                        
                        PackingMethod1BBHH _parent;
                        
                        
                        /// <summary>Get Hanger codes(P#400.1.1.6.2)</summary>
                        public GetHangerCodes(PackingMethod1BBHH parent)
                        {
                            _parent = parent;
                            Title = "Get Hanger codes";
                            InitializeDataView();
                        }
                        void InitializeDataView()
                        {
                            Relations.Add(StyleSpecification, 
                            		StyleSpecification.STYLE_CODE.IsEqualTo(_parent._parent.ProductsByStyle.StyleCode), 
                            	StyleSpecification.SortBySHP_STYLE_SPECIFICATION_X1);
                            
                            
                            #region Columns
                            
                            Columns.Add(StyleSpecification.STYLE_CODE);
                            Columns.Add(StyleSpecification.BOXED_BH_OR_HANGING);
                            Columns.Add(StyleSpecification.HANGER_CODE);
                            #endregion
                        }
                        
                        /// <summary>Get Hanger codes</summary>
                        internal void Run()
                        {
                            Execute();
                        }
                        protected override void OnLoad()
                        {
                            Exit(ExitTiming.AfterRow);
                            RowLocking = LockingStrategy.OnRowLoading;
                            TransactionScope = TransactionScopes.Task;
                            AllowUserAbort = true;
                        }
                        protected override void OnLeaveRow()
                        {
                            _parent.vHangerCodes.Value = u.Trim(StyleSpecification.HANGER_CODE);
                            _parent.vPackingMethod.Value = StyleSpecification.BOXED_BH_OR_HANGING;
                            _parent.vHangerCount.Value = u.StrTokenCnt(_parent.vHangerCodes, ",");
                        }
                        
                        
                    }
                    
                    /// <summary>Clear workfile(P#400.1.1.6.3)</summary>
                    // Last change before Migration: 21/02/2011 15:28:14
                    class ClearWorkfile : Mos.BusinessProcessBase 
                    {
                        
                        #region Models
                        
                        /// <summary>Multiple Hangers Workfile</summary>
                        readonly Models.MultipleHangersWorkfile MultipleHangersWorkfile = new Models.MultipleHangersWorkfile { AllowRowLocking = true };
                        #endregion
                        
                        
                        /// <summary>Clear workfile(P#400.1.1.6.3)</summary>
                        public ClearWorkfile()
                        {
                            Title = "Clear workfile";
                            InitializeDataView();
                        }
                        void InitializeDataView()
                        {
                            From = MultipleHangersWorkfile;
                            OrderBy = MultipleHangersWorkfile.SortByMULTI_HANGERS_X1;
                            
                            #region Columns
                            
                            Columns.Add(MultipleHangersWorkfile.OrderNumber);
                            Columns.Add(MultipleHangersWorkfile.HangerCode);
                            Columns.Add(MultipleHangersWorkfile.HangerDescription);
                            #endregion
                        }
                        
                        /// <summary>Clear workfile</summary>
                        internal void Run()
                        {
                            Execute();
                        }
                        protected override void OnLoad()
                        {
                            Activity = Activities.Delete;
                            AllowUserAbort = true;
                        }
                        
                        
                    }
                }
                
                /// <summary>Packing Method2 - B/BH/H(P#400.1.1.7)</summary>
                // Last change before Migration: 30/06/2010 13:49:30
                internal class PackingMethod2BBHH : Mos.BusinessProcessBase 
                {
                    
                    #region Printing Layouts
                    Printing.OrderPrintPo1537PackingMethod2BBHH _layout;
                    #endregion
                    
                    OrderDetails _parent;
                    
                    
                    /// <summary>Packing Method2 - B/BH/H(P#400.1.1.7)</summary>
                    public PackingMethod2BBHH(OrderDetails parent)
                    {
                        _parent = parent;
                        Title = "Packing Method2 - B/BH/H";
                        _layout = new Printing.OrderPrintPo1537PackingMethod2BBHH(this);
                        _layout.Layouts.Add(_parent._parent._layout);
                    }
                    
                    /// <summary>Packing Method2 - B/BH/H</summary>
                    internal void Run()
                    {
                        Execute();
                    }
                    protected override void OnLoad()
                    {
                        Exit(ExitTiming.AfterRow);
                        TransactionScope = TransactionScopes.Task;
                        AllowUserAbort = true;
                        _layout.Reset();
                    }
                    protected override void OnStart()
                    {
                        _layout.HangerDetailsHeader.WriteTo(_parent._parent._ioOrderReport);
                    }
                    protected override void OnLeaveRow()
                    {
                        _layout.DeliveryDetailsBBHH.WriteTo(_parent._parent._ioOrderReport);
                    }
                    
                    #region Expressions
                    internal Bool Exp_1()
                    {
                        return _parent.StyleSpecification.SIZE_SPEC_CODE == "" && _parent._parent.vReportPart == 3;
                    }
                    internal Bool Exp_2()
                    {
                        return _parent.StyleSpecification.IN_OUT_BOXING == "Y";
                    }
                    #endregion
                    
                    
                }
                
                /// <summary>Packing Method - Multiple(P#400.1.1.8)</summary>
                // Last change before Migration: 05/09/2012 15:03:00
                internal class PackingMethodMultiple : Mos.BusinessProcessBase 
                {
                    
                    #region Models
                    
                    /// <summary>Lot</summary>
                    internal readonly Models.Lot Lot = new Models.Lot { ReadOnly = true };
                    #endregion
                    
                    OrderDetails _parent;
                    
                    
                    /// <summary>Packing Method - Multiple(P#400.1.1.8)</summary>
                    public PackingMethodMultiple(OrderDetails parent)
                    {
                        _parent = parent;
                        Title = "Packing Method - Multiple";
                        InitializeDataView();
                    }
                    void InitializeDataView()
                    {
                        From = Lot;
                        Where.Add(Lot.ORDER_NUMBER.IsEqualTo(_parent._parent._parent.pOrder));
                        OrderBy = Lot.SortBySHP_LOTS_X1;
                        
                        #region Columns
                        
                        Columns.Add(Lot.ORDER_NUMBER);
                        Columns.Add(Lot.LOT_NUMBER);
                        Columns.Add(Lot.BOXED_BH_OR_HANGING);
                        Columns.Add(Lot.HANGER_CODE);
                        #endregion
                    }
                    
                    /// <summary>Packing Method - Multiple</summary>
                    internal void Run()
                    {
                        Execute();
                    }
                    protected override void OnLoad()
                    {
                        RowLocking = LockingStrategy.OnRowLoading;
                        TransactionScope = TransactionScopes.Task;
                        AllowUserAbort = true;
                    }
                    protected override void OnLeaveRow()
                    {
                        if((_parent._parent.vReportPart == 1 || _parent._parent.vReportPart == 3) && u.StrTokenCnt(Lot.HANGER_CODE, ",") > 0)
                        {
                            Cached<PackingMethod1BBHH>().Run();
                        }
                        if((_parent._parent.vReportPart == 1 || _parent._parent.vReportPart == 3) && u.StrTokenCnt(Lot.HANGER_CODE, ",") == 0)
                        {
                            Cached<PackingMethod2BBHH>().Run();
                        }
                    }
                    
                    
                    
                    /// <summary>Packing Method1 - B/BH/H(P#400.1.1.8.1)</summary>
                    // Last change before Migration: 05/09/2012 15:03:00
                    internal class PackingMethod1BBHH : Mos.BusinessProcessBase 
                    {
                        
                        #region Models
                        
                        /// <summary>Multiple Hangers Workfile</summary>
                        internal readonly Models.MultipleHangersWorkfile MultipleHangersWorkfile = new Models.MultipleHangersWorkfile { AllowRowLocking = true };
                        #endregion
                        
                        #region Columns
                        
                        /// <summary>v:Hanger Count</summary>
                        readonly NumberColumn vHangerCount = new NumberColumn("v:Hanger Count", "2");
                        
                        /// <summary>v:Hanger Codes</summary>
                        readonly TextColumn vHangerCodes = new TextColumn("v:Hanger Codes", "100");
                        
                        /// <summary>v:Packing Method</summary>
                        readonly TextColumn vPackingMethod = new TextColumn("v:Packing Method", "U2");
                        #endregion
                        
                        #region Printing Layouts
                        Printing.OrderPrintPo1537PackingMethod1BBHH1 _layout;
                        #endregion
                        
                        internal PackingMethodMultiple _parent;
                        
                        
                        /// <summary>Packing Method1 - B/BH/H(P#400.1.1.8.1)</summary>
                        public PackingMethod1BBHH(PackingMethodMultiple parent)
                        {
                            _parent = parent;
                            Title = "Packing Method1 - B/BH/H";
                            InitializeDataView();
                            _layout = new Printing.OrderPrintPo1537PackingMethod1BBHH1(this);
                            _layout.Layouts.Add(_parent._parent._parent._layout);
                        }
                        void InitializeDataView()
                        {
                            From = MultipleHangersWorkfile;
                            Where.Add(MultipleHangersWorkfile.OrderNumber.IsEqualTo(_parent._parent._parent._parent.pOrder));
                            OrderBy = MultipleHangersWorkfile.SortByMULTI_HANGERS_X1;
                            
                            #region Columns
                            
                            Columns.Add(vHangerCount);
                            Columns.Add(vHangerCodes);
                            Columns.Add(vPackingMethod);
                            
                            Columns.Add(MultipleHangersWorkfile.OrderNumber);
                            Columns.Add(MultipleHangersWorkfile.HangerCode);
                            Columns.Add(MultipleHangersWorkfile.HangerDescription);
                            #endregion
                        }
                        
                        /// <summary>Packing Method1 - B/BH/H</summary>
                        internal void Run()
                        {
                            Execute();
                        }
                        protected override void OnLoad()
                        {
                            RowLocking = LockingStrategy.OnRowLoading;
                            TransactionScope = TransactionScopes.Task;
                            AllowUserAbort = true;
                            _layout.Reset();
                        }
                        protected override void OnStart()
                        {
                            _layout.HangerDetailsHeader.WriteTo(_parent._parent._parent._ioOrderReport);
                            Cached<ClearWorkfile>().Run();
                            Cached<GetHangerCodes>().Run();
                            Cached<ReadThroughHangerCodes>().Run();
                        }
                        protected override void OnLeaveRow()
                        {
                            _layout.DeliveryDetailsBBHH.WriteTo(_parent._parent._parent._ioOrderReport);
                        }
                        
                        #region Expressions
                        internal Bool Exp_1()
                        {
                            return vPackingMethod != "B";
                        }
                        internal Text Exp_2()
                        {
                            return u.If(u.Not(_parent._parent._parent._parent.pFranchiseOrder), u.If(vPackingMethod == "B", "Boxed", u.If(vPackingMethod == "H", "Hanging", "Boxed Hanging")), u.If(vPackingMethod == "B", "Boxed", u.If(vPackingMethod == "H", "Boxed Hanging", "Boxed Hanging")));
                        }
                        internal Bool Exp_3()
                        {
                            return vPackingMethod == "B";
                        }
                        internal Bool Exp_5()
                        {
                            return _parent._parent.StyleSpecification.SIZE_SPEC_CODE == "" && _parent._parent._parent.vReportPart == 3;
                        }
                        internal Bool Exp_6()
                        {
                            return _parent._parent.StyleSpecification.IN_OUT_BOXING == "Y";
                        }
                        #endregion
                        
                        
                        
                        /// <summary>Read through Hanger Codes(P#400.1.1.8.1.1)</summary>
                        // Last change before Migration: 19/02/2010 12:55:45
                        class ReadThroughHangerCodes : Mos.BusinessProcessBase 
                        {
                            
                            #region Models
                            
                            /// <summary>Hanger Codes</summary>
                            readonly Models.HangerCodes HangerCodes = new Models.HangerCodes { ReadOnly = true };
                            
                            /// <summary>Multiple Hangers Workfile</summary>
                            readonly Models.MultipleHangersWorkfile MultipleHangersWorkfile = new Models.MultipleHangersWorkfile { AllowRowLocking = true };
                            #endregion
                            
                            #region Columns
                            
                            /// <summary>v:this task - counter</summary>
                            readonly NumberColumn vThisTaskCounter = new NumberColumn("v:this task - counter", "2");
                            #endregion
                            
                            PackingMethod1BBHH _parent;
                            
                            
                            /// <summary>Read through Hanger Codes(P#400.1.1.8.1.1)</summary>
                            public ReadThroughHangerCodes(PackingMethod1BBHH parent)
                            {
                                _parent = parent;
                                Title = "Read through Hanger Codes";
                                InitializeDataView();
                            }
                            void InitializeDataView()
                            {
                                Relations.Add(HangerCodes, 
                                		HangerCodes.DepartmentCode.IsEqualTo(_parent._parent._parent.StyleSpecification.DSS_DEPARTMENT_CODE).And(
                                		HangerCodes.SubdeptCode.IsEqualTo(_parent._parent._parent.StyleSpecification.DSS_SUB_DEPT_CODE)).And(
                                		HangerCodes.SectionCode.IsEqualTo(_parent._parent._parent.StyleSpecification.DSS_SECTION_CODE)).And(
                                		HangerCodes.HangerCode.IsEqualTo(() => u.StrToken(_parent.vHangerCodes, vThisTaskCounter, ","))), 
                                	HangerCodes.SortByMOS_HANGER_CODS_X1);
                                
                                Relations.Add(MultipleHangersWorkfile, RelationType.Insert, 
                                	MultipleHangersWorkfile.SortByMULTI_HANGERS_X1);
                                
                                
                                #region Columns
                                
                                Columns.Add(vThisTaskCounter);
                                
                                Columns.Add(HangerCodes.DepartmentCode);
                                Columns.Add(HangerCodes.SubdeptCode);
                                Columns.Add(HangerCodes.SectionCode);
                                Columns.Add(HangerCodes.HangerCode);
                                Columns.Add(HangerCodes.HangerDescription);
                                
                                Columns.Add(MultipleHangersWorkfile.OrderNumber).BindValue(_parent._parent._parent._parent._parent.pOrder);
                                Columns.Add(MultipleHangersWorkfile.HangerCode).BindValue(() => u.StrToken(_parent.vHangerCodes, vThisTaskCounter, ","));
                                Columns.Add(MultipleHangersWorkfile.HangerDescription).BindValue(HangerCodes.HangerDescription);
                                #endregion
                            }
                            
                            /// <summary>Read through Hanger Codes</summary>
                            internal void Run()
                            {
                                Execute();
                            }
                            protected override void OnLoad()
                            {
                                Exit(ExitTiming.AfterRow, () => vThisTaskCounter == _parent.vHangerCount);
                                RowLocking = LockingStrategy.OnRowLoading;
                                TransactionScope = TransactionScopes.Task;
                                AllowUserAbort = true;
                            }
                            protected override void OnLeaveRow()
                            {
                                vThisTaskCounter.Value++;
                            }
                            
                            
                        }
                        
                        /// <summary>Get Hanger codes(P#400.1.1.8.1.2)</summary>
                        // Last change before Migration: 22/02/2010 14:21:11
                        class GetHangerCodes : Mos.BusinessProcessBase 
                        {
                            PackingMethod1BBHH _parent;
                            
                            
                            /// <summary>Get Hanger codes(P#400.1.1.8.1.2)</summary>
                            public GetHangerCodes(PackingMethod1BBHH parent)
                            {
                                _parent = parent;
                                Title = "Get Hanger codes";
                            }
                            
                            /// <summary>Get Hanger codes</summary>
                            internal void Run()
                            {
                                Execute();
                            }
                            protected override void OnLoad()
                            {
                                Exit(ExitTiming.AfterRow);
                                TransactionScope = TransactionScopes.Task;
                                AllowUserAbort = true;
                            }
                            protected override void OnEnd()
                            {
                                _parent.vHangerCodes.Value = u.Trim(_parent._parent.Lot.HANGER_CODE);
                                _parent.vPackingMethod.Value = _parent._parent.Lot.BOXED_BH_OR_HANGING;
                                _parent.vHangerCount.Value = u.StrTokenCnt(_parent.vHangerCodes, ",");
                            }
                            
                            
                        }
                        
                        /// <summary>Clear workfile(P#400.1.1.8.1.3)</summary>
                        // Last change before Migration: 21/02/2011 15:28:21
                        class ClearWorkfile : Mos.BusinessProcessBase 
                        {
                            
                            #region Models
                            
                            /// <summary>Multiple Hangers Workfile</summary>
                            readonly Models.MultipleHangersWorkfile MultipleHangersWorkfile = new Models.MultipleHangersWorkfile { AllowRowLocking = true };
                            #endregion
                            
                            
                            /// <summary>Clear workfile(P#400.1.1.8.1.3)</summary>
                            public ClearWorkfile()
                            {
                                Title = "Clear workfile";
                                InitializeDataView();
                            }
                            void InitializeDataView()
                            {
                                From = MultipleHangersWorkfile;
                                OrderBy = MultipleHangersWorkfile.SortByMULTI_HANGERS_X1;
                                
                                #region Columns
                                
                                Columns.Add(MultipleHangersWorkfile.OrderNumber);
                                Columns.Add(MultipleHangersWorkfile.HangerCode);
                                Columns.Add(MultipleHangersWorkfile.HangerDescription);
                                #endregion
                            }
                            
                            /// <summary>Clear workfile</summary>
                            internal void Run()
                            {
                                Execute();
                            }
                            protected override void OnLoad()
                            {
                                Activity = Activities.Delete;
                                AllowUserAbort = true;
                            }
                            
                            
                        }
                    }
                    
                    /// <summary>Packing Method2 - B/BH/H(P#400.1.1.8.2)</summary>
                    // Last change before Migration: 30/06/2010 13:49:35
                    internal class PackingMethod2BBHH : Mos.BusinessProcessBase 
                    {
                        
                        #region Printing Layouts
                        Printing.OrderPrintPo1537PackingMethod2BBHH1 _layout;
                        #endregion
                        
                        internal PackingMethodMultiple _parent;
                        
                        
                        /// <summary>Packing Method2 - B/BH/H(P#400.1.1.8.2)</summary>
                        public PackingMethod2BBHH(PackingMethodMultiple parent)
                        {
                            _parent = parent;
                            Title = "Packing Method2 - B/BH/H";
                            _layout = new Printing.OrderPrintPo1537PackingMethod2BBHH1(this);
                            _layout.Layouts.Add(_parent._parent._parent._layout);
                        }
                        
                        /// <summary>Packing Method2 - B/BH/H</summary>
                        internal void Run()
                        {
                            Execute();
                        }
                        protected override void OnLoad()
                        {
                            Exit(ExitTiming.AfterRow);
                            TransactionScope = TransactionScopes.Task;
                            AllowUserAbort = true;
                            _layout.Reset();
                        }
                        protected override void OnStart()
                        {
                            _layout.HangerDetailsHeader.WriteTo(_parent._parent._parent._ioOrderReport);
                        }
                        protected override void OnLeaveRow()
                        {
                            _layout.DeliveryDetailsBBHH.WriteTo(_parent._parent._parent._ioOrderReport);
                        }
                        
                        #region Expressions
                        internal Bool Exp_1()
                        {
                            return _parent._parent.StyleSpecification.SIZE_SPEC_CODE == "" && _parent._parent._parent.vReportPart == 3;
                        }
                        internal Bool Exp_2()
                        {
                            return _parent._parent.StyleSpecification.IN_OUT_BOXING == "Y";
                        }
                        #endregion
                        
                        
                    }
                }
                
                /// <summary>Size Spec Details(P#400.1.1.9)</summary>
                // Last change before Migration: 31/07/2006 10:48:37
                internal class SizeSpecDetails : Mos.BusinessProcessBase 
                {
                    
                    #region Printing Layouts
                    Printing.OrderPrintPo1537SizeSpecDetails _layout;
                    #endregion
                    
                    internal OrderDetails _parent;
                    
                    
                    /// <summary>Size Spec Details(P#400.1.1.9)</summary>
                    public SizeSpecDetails(OrderDetails parent)
                    {
                        _parent = parent;
                        Title = "Size Spec Details";
                        _layout = new Printing.OrderPrintPo1537SizeSpecDetails(this);
                        _layout.Layouts.Add(_parent._parent._layout);
                    }
                    
                    /// <summary>Size Spec Details</summary>
                    internal void Run()
                    {
                        Execute();
                    }
                    protected override void OnLoad()
                    {
                        Exit(ExitTiming.AfterRow);
                        TransactionScope = TransactionScopes.Task;
                        AllowUserAbort = true;
                        _layout.Reset();
                    }
                    protected override void OnStart()
                    {
                        _layout.sizeSpecHeader.WriteTo(_parent._parent._ioOrderReport);
                    }
                    protected override void OnLeaveRow()
                    {
                        _layout.sizeSpecDetail.WriteTo(_parent._parent._ioOrderReport);
                    }
                    
                    #region Expressions
                    internal Bool Exp_1()
                    {
                        return _parent._parent.vReportPart == 3;
                    }
                    #endregion
                    
                    
                }
                
                /// <summary>Format Suppliers Address(P#400.1.1.10)</summary>
                // Last change before Migration: 02/11/2007 14:58:38
                class FormatSuppliersAddress : Mos.BusinessProcessBase 
                {
                    OrderDetails _parent;
                    
                    
                    /// <summary>Format Suppliers Address(P#400.1.1.10)</summary>
                    public FormatSuppliersAddress(OrderDetails parent)
                    {
                        _parent = parent;
                        Title = "Format Suppliers Address";
                    }
                    
                    /// <summary>Format Suppliers Address</summary>
                    internal void Run()
                    {
                        Execute();
                    }
                    protected override void OnLoad()
                    {
                        Exit(ExitTiming.AfterRow);
                        AllowUserAbort = true;
                    }
                    protected override void OnLeaveRow()
                    {
                        if(_parent.Supplier2.SUPPLIER_ADDRESS_1 != "")
                        {
                            _parent.vFormattedSuppliersAddress.Value = u.Trim(_parent.vFormattedSuppliersAddress) + u.Trim(_parent.Supplier2.SUPPLIER_ADDRESS_1) + u.Trim(_parent.vCharReturn);
                        }
                        if(_parent.Supplier2.SUPPLIER_ADDRESS_2 != "")
                        {
                            _parent.vFormattedSuppliersAddress.Value = u.Trim(_parent.vFormattedSuppliersAddress) + u.Trim(_parent.Supplier2.SUPPLIER_ADDRESS_2) + u.Trim(_parent.vCharReturn);
                        }
                        if(_parent.Supplier2.SUPPLIER_ADDRESS_3 != "")
                        {
                            _parent.vFormattedSuppliersAddress.Value = u.Trim(_parent.vFormattedSuppliersAddress) + u.Trim(_parent.Supplier2.SUPPLIER_ADDRESS_3) + u.Trim(_parent.vCharReturn);
                        }
                        if(_parent.Supplier2.SUPPLIER_ADDRESS_4 != "")
                        {
                            _parent.vFormattedSuppliersAddress.Value = u.Trim(_parent.vFormattedSuppliersAddress) + u.Trim(_parent.Supplier2.SUPPLIER_ADDRESS_4) + u.Trim(_parent.vCharReturn);
                        }
                        if(_parent.Supplier2.CITY != "")
                        {
                            _parent.vFormattedSuppliersAddress.Value = u.Trim(_parent.vFormattedSuppliersAddress) + u.Trim(_parent.Supplier2.CITY) + u.Trim(_parent.vCharReturn);
                        }
                        if(_parent.Supplier2.POST_ZIP_CODE != "")
                        {
                            _parent.vFormattedSuppliersAddress.Value = u.Trim(_parent.vFormattedSuppliersAddress) + u.Trim(_parent.Supplier2.POST_ZIP_CODE);
                        }
                    }
                    
                    
                }
                
                /// <summary>Format Factory Address(P#400.1.1.11)</summary>
                // Last change before Migration: 22/02/2010 14:39:49
                class FormatFactoryAddress : Mos.BusinessProcessBase 
                {
                    
                    #region Models
                    
                    /// <summary>Country</summary>
                    readonly Models.Country Country = new Models.Country { ReadOnly = true };
                    #endregion
                    
                    OrderDetails _parent;
                    
                    
                    /// <summary>Format Factory Address(P#400.1.1.11)</summary>
                    public FormatFactoryAddress(OrderDetails parent)
                    {
                        _parent = parent;
                        Title = "Format Factory Address";
                        InitializeDataView();
                    }
                    void InitializeDataView()
                    {
                        Relations.Add(Country, 
                        		Country.CountryCode.IsEqualTo(_parent.SupplierFactoryList.COUNTRY_CODE), 
                        	Country.SortBySHP_Countries_X1);
                        
                        
                        #region Columns
                        
                        Columns.Add(Country.CountryCode);
                        Columns.Add(Country.CountryName);
                        #endregion
                    }
                    
                    /// <summary>Format Factory Address</summary>
                    internal void Run()
                    {
                        Execute();
                    }
                    protected override void OnLoad()
                    {
                        Exit(ExitTiming.AfterRow);
                        RowLocking = LockingStrategy.OnRowLoading;
                        TransactionScope = TransactionScopes.Task;
                        AllowUserAbort = true;
                    }
                    protected override void OnLeaveRow()
                    {
                        if(_parent.SupplierFactoryList.FACTORY_COMPANY_NAME != "")
                        {
                            _parent.vFormattedFactoryAddress.Value = u.Trim(_parent.vFormattedFactoryAddress) + u.Trim(_parent.SupplierFactoryList.FACTORY_COMPANY_NAME) + u.Trim(_parent.vCharReturn);
                        }
                        if(_parent.SupplierFactoryList.FLAT_BLOCK_UNIT_ROOM_FLOOR != "")
                        {
                            _parent.vFormattedFactoryAddress.Value = u.Trim(_parent.vFormattedFactoryAddress) + u.Trim(_parent.SupplierFactoryList.FLAT_BLOCK_UNIT_ROOM_FLOOR) + u.Trim(_parent.vCharReturn);
                        }
                        if(_parent.SupplierFactoryList.BUILDING_CENTRE_PLAZA != "")
                        {
                            _parent.vFormattedFactoryAddress.Value = u.Trim(_parent.vFormattedFactoryAddress) + u.Trim(_parent.SupplierFactoryList.BUILDING_CENTRE_PLAZA) + u.Trim(_parent.vCharReturn);
                        }
                        if(_parent.SupplierFactoryList.NUMBER_AND_STREET_LINE_1 != "")
                        {
                            _parent.vFormattedFactoryAddress.Value = u.Trim(_parent.vFormattedFactoryAddress) + u.Trim(_parent.SupplierFactoryList.NUMBER_AND_STREET_LINE_1) + u.Trim(_parent.vCharReturn);
                        }
                        if(_parent.SupplierFactoryList.NUMBER_AND_STREET_LINE_2 != "")
                        {
                            _parent.vFormattedFactoryAddress.Value = u.Trim(_parent.vFormattedFactoryAddress) + u.Trim(_parent.SupplierFactoryList.NUMBER_AND_STREET_LINE_2) + u.Trim(_parent.vCharReturn);
                        }
                        if(_parent.SupplierFactoryList.CITY != "")
                        {
                            _parent.vFormattedFactoryAddress.Value = u.Trim(_parent.vFormattedFactoryAddress) + u.Trim(_parent.SupplierFactoryList.CITY) + u.Trim(_parent.vCharReturn);
                        }
                        if(_parent.SupplierFactoryList.POST_ZIP_CODE != "")
                        {
                            _parent.vFormattedFactoryAddress.Value = u.Trim(_parent.vFormattedFactoryAddress) + u.Trim(_parent.SupplierFactoryList.POST_ZIP_CODE) + u.Trim(_parent.vCharReturn);
                        }
                        if(_parent.SupplierFactoryList.COUNTRY_CODE != "")
                        {
                            _parent.vFormattedFactoryAddress.Value = u.Trim(_parent.vFormattedFactoryAddress) + u.Trim(Country.CountryName);
                        }
                    }
                    
                    
                }
            }
            
            /// <summary>Check for Cost Diffs(P#400.1.2)</summary>
            // Last change before Migration: 11/02/2002 14:18:26
            class CheckForCostDiffs : Mos.BusinessProcessBase 
            {
                
                #region Models
                
                /// <summary>Order Lot Size Cost</summary>
                readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                #endregion
                
                MainControl _parent;
                
                
                /// <summary>Check for Cost Diffs(P#400.1.2)</summary>
                public CheckForCostDiffs(MainControl parent)
                {
                    _parent = parent;
                    Title = "Check for Cost Diffs";
                    InitializeDataView();
                }
                void InitializeDataView()
                {
                    From = OrderLotSizeCost;
                    Where.Add(OrderLotSizeCost.OrderNumber.IsEqualTo(_parent.vOrderNumber));
                    Where.Add(OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1));
                    OrderBy = OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X1;
                    
                    #region Columns
                    
                    Columns.Add(OrderLotSizeCost.OrderNumber);
                    Columns.Add(OrderLotSizeCost.LotNumber);
                    Columns.Add(OrderLotSizeCost.ProductNumber);
                    Columns.Add(OrderLotSizeCost.SizeCode);
                    Columns.Add(OrderLotSizeCost.SizeCost);
                    // must be ordered
                    Columns.Add(OrderLotSizeCost.SizeQuantity);
                    #endregion
                }
                
                /// <summary>Check for Cost Diffs</summary>
                internal void Run()
                {
                    Execute();
                }
                protected override void OnLoad()
                {
                    KeepChildRelationCacheAlive = true;
                    KeepViewVisibleAfterExit = true;
                }
                protected override void OnLeaveRow()
                {
                    Cached<CostDiffsTweenLots>().Run();
                }
                
                
                
                /// <summary>Cost Diffs tween Lots(P#400.1.2.1)</summary>
                // Last change before Migration: 11/02/2002 14:18:26
                class CostDiffsTweenLots : Mos.BusinessProcessBase 
                {
                    
                    #region Models
                    
                    /// <summary>Order Lot Size Cost</summary>
                    readonly Models.OrderLotSizeCost OrderLotSizeCost = new Models.OrderLotSizeCost { ReadOnly = true };
                    #endregion
                    
                    CheckForCostDiffs _parent;
                    
                    
                    /// <summary>Cost Diffs tween Lots(P#400.1.2.1)</summary>
                    public CostDiffsTweenLots(CheckForCostDiffs parent)
                    {
                        _parent = parent;
                        Title = "Cost Diffs tween Lots";
                        InitializeDataView();
                    }
                    void InitializeDataView()
                    {
                        From = OrderLotSizeCost;
                        Where.Add(OrderLotSizeCost.SizeCode.IsEqualTo(_parent.OrderLotSizeCost.SizeCode));
                        Where.Add(OrderLotSizeCost.OrderNumber.IsEqualTo(_parent._parent.vOrderNumber));
                        Where.Add(OrderLotSizeCost.SizeQuantity.IsGreaterOrEqualTo(1));
                        OrderBy = OrderLotSizeCost.SortBySHP_Order_Lot_Size_Cost_X2;
                        
                        #region Columns
                        
                        Columns.Add(OrderLotSizeCost.SizeCode);
                        Columns.Add(OrderLotSizeCost.OrderNumber);
                        Columns.Add(OrderLotSizeCost.LotNumber);
                        Columns.Add(OrderLotSizeCost.SizeCost);
                        // ordered sizes
                        Columns.Add(OrderLotSizeCost.SizeQuantity);
                        #endregion
                    }
                    
                    /// <summary>Cost Diffs tween Lots</summary>
                    internal void Run()
                    {
                        Execute();
                    }
                    protected override void OnLoad()
                    {
                        KeepChildRelationCacheAlive = true;
                        KeepViewVisibleAfterExit = true;
                    }
                    protected override void OnLeaveRow()
                    {
                        if(OrderLotSizeCost.SizeCost != _parent.OrderLotSizeCost.SizeCost)
                        {
                            _parent._parent.vCostDiffTweenLotsFound.Value = true;
                        }
                    }
                    
                    
                }
            }
            
            /// <summary>Check for Prev Ord(P#400.1.3)</summary>
            // Last change before Migration: 11/02/2002 14:18:20
            class CheckForPrevOrd : Mos.BusinessProcessBase 
            {
                
                #region Models
                
                /// <summary>Orders</summary>
                readonly Models.Orders Orders = new Models.Orders { ReadOnly = true };
                #endregion
                
                MainControl _parent;
                
                
                /// <summary>Check for Prev Ord(P#400.1.3)</summary>
                public CheckForPrevOrd(MainControl parent)
                {
                    _parent = parent;
                    Title = "Check for Prev Ord";
                    InitializeDataView();
                }
                void InitializeDataView()
                {
                    From = Orders;
                    Where.Add(Orders.PRODUCT_NUMBER.IsEqualTo(_parent.Orders.PRODUCT_NUMBER));
                    Where.Add(Orders.TOT_SEL_UNTS_PER_ORD.IsGreaterOrEqualTo(1));
                    Where.Add(Orders.ORDER_STATUS.IsGreaterOrEqualTo(1));
                    Where.Add(Orders.ORDER_COMPLETE_STATUS.IsBetween(() => 0, 5));
                    OrderBy = Orders.SortBySHP_ORDERS_X2;
                    
                    #region Columns
                    
                    Columns.Add(Orders.ORDER_NUMBER);
                    Columns.Add(Orders.PRODUCT_NUMBER);
                    // must have units on order
                    Columns.Add(Orders.TOT_SEL_UNTS_PER_ORD);
                    // approved or greater
                    Columns.Add(Orders.ORDER_STATUS);
                    // not cancelled
                    Columns.Add(Orders.ORDER_COMPLETE_STATUS);
                    #endregion
                }
                
                /// <summary>Check for Prev Ord</summary>
                internal void Run()
                {
                    Execute();
                }
                protected override void OnLoad()
                {
                    TransactionScope = TransactionScopes.RowLocking;
                    KeepChildRelationCacheAlive = true;
                    KeepViewVisibleAfterExit = true;
                }
                protected override void OnLeaveRow()
                {
                    // if any order except current order
                    if(Orders.ORDER_NUMBER != _parent.vOrderNumber)
                    {
                        _parent.vPrevOrderFound.Value = true;
                    }
                }
                
                
            }
        }
        
        /// <summary>Archive Order PDF(P#400.2)</summary>
        // Last change before Migration: 03/12/2012 16:20:21
        class ArchiveOrderPDF : Mos.BusinessProcessBase 
        {
            
            #region Models
            
            /// <summary>MOS_STORE_ORDER_PDF</summary>
            readonly Models.MOS_STORE_ORDER_PDF MOS_STORE_ORDER_PDF = new Models.MOS_STORE_ORDER_PDF { AllowRowLocking = true };
            #endregion
            
            OrderPrintPo1537Core _parent;
            
            
            /// <summary>Archive Order PDF(P#400.2)</summary>
            public ArchiveOrderPDF(OrderPrintPo1537Core parent)
            {
                _parent = parent;
                Title = "Archive Order PDF";
                InitializeDataView();
            }
            void InitializeDataView()
            {
                Relations.Add(MOS_STORE_ORDER_PDF, RelationType.InsertIfNotFound, 
                		MOS_STORE_ORDER_PDF.OrderNumber.BindEqualTo(_parent.pOrder).And(
                		MOS_STORE_ORDER_PDF.OrderVersionNo.BindEqualTo(_parent.pOrderVersionNumber)).And(
                		MOS_STORE_ORDER_PDF.PrintType.BindEqualTo(() => u.If(_parent.pFranchiseOrder, "F", "M"))).And(
                		MOS_STORE_ORDER_PDF.FranchiseOrderNo.BindEqualTo(() => u.If(_parent.pFranchiseOrder, _parent.pFranchiseOrderNumber, 0))), 
                	MOS_STORE_ORDER_PDF.SortByMOS_STORE_ORDER_PDF_X1);
                
                
                #region Columns
                
                Columns.Add(MOS_STORE_ORDER_PDF.OrderNumber);
                Columns.Add(MOS_STORE_ORDER_PDF.OrderVersionNo).Caption = "Order Version No";
                Columns.Add(MOS_STORE_ORDER_PDF.PrintType);
                Columns.Add(MOS_STORE_ORDER_PDF.FranchiseOrderNo);
                Columns.Add(MOS_STORE_ORDER_PDF.PDFBlob);
                Columns.Add(MOS_STORE_ORDER_PDF.Sent_User);
                Columns.Add(MOS_STORE_ORDER_PDF.Sent_Date);
                Columns.Add(MOS_STORE_ORDER_PDF.Sent_Time);
                #endregion
            }
            
            /// <summary>Archive Order PDF</summary>
            internal void Run()
            {
                Execute();
            }
            protected override void OnLoad()
            {
                Exit(ExitTiming.AfterRow);
                RowLocking = LockingStrategy.OnRowLoading;
                TransactionScope = TransactionScopes.Task;
                AllowUserAbort = true;
            }
            protected override void OnLeaveRow()
            {
                MOS_STORE_ORDER_PDF.PDFBlob.Value = u.File2Blb(@"C:\temp\" + u.Str(_parent.pOrder, "6"));
                MOS_STORE_ORDER_PDF.Sent_User.Value = u.Upper(ENV.Security.UserManager.CurrentUser.Name);
                MOS_STORE_ORDER_PDF.Sent_Date.Value = Date.Now;
                MOS_STORE_ORDER_PDF.Sent_Time.Value = Time.Now;
            }
            
            
        }
    }
}
